{"version":3,"sources":["System/Collections/List.ts"],"names":[],"mappings":"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","file":"List.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../Compare\";\r\nimport {remove, indexOf, contains, copyTo, removeIndex} from \"./Array/Utility\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {Type} from \"../Types\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {EqualityComparison, ActionWithIndex, PredicateWithIndex} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IList} from \"./IList\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ArrayLikeWritable} from \"./Array/ArrayLikeWritable\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\nexport class List<T>\r\nextends CollectionBase<T> implements IList<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tprotected readonly _source:T[];\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(VOID0, equalityComparer);\r\n\t\tif((source)instanceof(Array))\r\n\t\t{\r\n\t\t\tthis._source = source.slice();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._source = [];\r\n\t\t\tthis._importEntries(source);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _onDispose() {\r\n\t\tsuper._onDispose();\r\n\t\t(<any>this)._source = null;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._source.length;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._source.push(entry);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\treturn remove(\r\n\t\t\tthis._source, entry, max,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst len = this._source.length;\r\n\t\tthis._source.length = 0;\r\n\t\treturn len;\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>|null|undefined):number\r\n\t{\r\n\t\tif(Type.isArrayLike(entries))\r\n\t\t{\r\n\t\t\tlet len = entries.length;\r\n\t\t\tif(!len) return 0;\r\n\t\t\tconst s = this._source;\r\n\r\n\t\t\tconst first = s.length;\r\n\t\t\ts.length += len;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\ts[i + first] = entries[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn len;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn super._importEntries(entries);\r\n\t\t}\r\n\t}\r\n\r\n\tget(index:number):T\r\n\t{\r\n\t\treturn this._source[index];\r\n\t}\r\n\r\n\tset(index:number, value:T):boolean\r\n\t{\r\n\t\tconst s = this._source;\r\n\t\tif(index<s.length && areEqual(value, s[index]))\r\n\t\t\treturn false;\r\n\r\n\t\ts[index] = value;\r\n\t\tthis._signalModification(true);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tindexOf(item:T):number\r\n\t{\r\n\t\treturn indexOf(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tinsert(index:number, value:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst s = _._source;\r\n\t\tif(index<s.length)\r\n\t\t{\r\n\t\t\t_._source.splice(index, 0, value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._source[index] = value;\r\n\t\t}\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tif(removeIndex(this._source, index))\r\n\t\t{\r\n\t\t\tthis._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn contains(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tcopyTo<TTarget extends ArrayLikeWritable<any>>(target:TTarget, index?:number):TTarget\r\n\t{\r\n\t\treturn copyTo(this._source, target, 0, index);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet source:T[], index:number, version:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = _._source;\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tif(index) _.throwIfDisposed();\r\n\t\t\t\telse if(_.wasDisposed) {\r\n\t\t\t\t\t// We never actually started? Then no biggie.\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_.assertVersion(version);\r\n\r\n\t\t\t\tif(index>=source.length) // Just in case the size changes as we enumerate use '>='.\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(source[index++]);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tconst s = this._source;\r\n\t\treturn forEach(useCopy ? s.slice() : this, action);\r\n\t}\r\n\r\n}\r\n\r\nexport default List;"]}