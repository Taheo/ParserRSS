{"version":3,"sources":["System/Collections/Enumeration/SimpleEnumerableBase.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,cAAc,EAAC,MAAM,kBAAkB,CAAC;AAIhD,MAAM,KAAK,GAAa,KAAK,CAAC,CAAC;AAE/B,MAAM;IAML;QAEC,IAAI,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAED,IAAI,OAAO;QAEV,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAID,IAAI,WAAW;QACd,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;IAC5B,CAAC;IAID,WAAW,CAAC,GAAa;QACxB,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACpB,GAAG,CAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAGS,cAAc;QAEvB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QACpB,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,CAAC,CAAC;IACV,CAAC;IAED,SAAS;QAER,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAED,IAAI;QAEH,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE;cACnB,IAAI,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC;cAC9C,cAAc,CAAC,IAAI,CAAC;IACxB,CAAC;IAED,GAAG;QACF,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB,CAAC;IAID,QAAQ,CAAC,KAAU;QAElB,IACA,CAAC;YACA,MAAM,CAAC,KAAK,KAAG,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE;kBACxC,IAAI,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;kBACtC,cAAc,CAAC,IAAI,CAAC;QACxB,CAAC;gBAED,CAAC;YACA,IAAI,CAAC,OAAO,EAAE,CAAC;QAChB,CAAC;IACF,CAAC;IAED,KAAK;QAEJ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;IACnB,CAAC;IAED,OAAO;QAEN,IAAI,CAAC,KAAK,EAAE,CAAC;IACd,CAAC;IAES,YAAY;QAErB,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;IAC5B,CAAC;IAED,IAAI,SAAS;QAEZ,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;IAC5B,CAAC;CACD;AAED,eAAe,oBAAoB,CAAC","file":"SimpleEnumerableBase.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {Action} from \"../../FunctionTypes\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport abstract class SimpleEnumerableBase<T> implements IEnumerator<T>\r\n{\r\n\r\n\tprotected _current:T|undefined;\r\n\tprotected _index:number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tget current():T|undefined\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tprotected abstract _canMoveNext():boolean;\r\n\r\n\tget canMoveNext():boolean {\r\n\t\treturn this._canMoveNext();\r\n\t}\r\n\r\n\tabstract moveNext():boolean;\r\n\r\n\ttryMoveNext(out:Action<T>):boolean {\r\n\t\tif(this.moveNext()) {\r\n\t\t\tout(<T>this._current);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tprotected incrementIndex():number\r\n\t{\r\n\t\tlet i = this._index;\r\n\t\tthis._index = i = isNaN(i) ? 0 : (i + 1);\r\n\t\treturn i;\r\n\t}\r\n\r\n\tnextValue():T|undefined\r\n\t{\r\n\t\tthis.moveNext();\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this._current, this._index)\r\n\t\t\t: IteratorResult.Done;\r\n\t}\r\n\r\n\tend():void {\r\n\t\tthis.dispose();\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value!==VOID0 && this._canMoveNext()\r\n\t\t\t\t? new IteratorResult(value, VOID0, true)\r\n\t\t\t\t: IteratorResult.Done;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = NaN;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn this._canMoveNext();\r\n\t}\r\n\r\n\tget isEndless():boolean|undefined\r\n\t{\r\n\t\treturn this.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default SimpleEnumerableBase;\r\n"]}