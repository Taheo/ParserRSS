{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,oBAAoB,EAAC,MAAM,wBAAwB,CAAC;AAE5D,oCAAoC;AAGpC;;;;;GAKG;AACH,MAAM,yBAA6B,SAAQ,oBAAuB;IAEjE;;;OAGG;IACH,YACkB,SAAsB,EACtB,UAAmB;QAEpC,KAAK,EAAE,CAAC;QAHS,cAAS,GAAT,SAAS,CAAa;QACtB,eAAU,GAAV,UAAU,CAAS;IAGrC,CAAC;IAES,YAAY;QAErB,MAAM,CAAC,IAAI,CAAC,SAAS,IAAE,IAAI,CAAC;IAC7B,CAAC;IAED,QAAQ,CAAC,KAAU;QAElB,MAAM,CAAC,GAAG,IAAI,CAAC;QACf,MAAM,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC;QACtB,EAAE,CAAA,CAAC,CAAC,CAAC,CACL,CAAC;YACA,MAAM,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;YACtD,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC;YACrB,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC;gBAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YACvB,IAAI;gBAAC,MAAM,CAAC,IAAI,CAAC;QAClB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED,OAAO;QAEN,KAAK,CAAC,OAAO,EAAE,CAAC;QACV,IAAK,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,CAAC;IAES,YAAY;QAErB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,YAAY,EAAE,CAAC;IACzD,CAAC;CACD;AAED,eAAe,kBAAkB,CAAC","file":"IteratorEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(\r\n\t\tprivate readonly _iterator:IIterator<T>,\r\n\t\tprivate readonly _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected _canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tconst r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\t(<any>this)._iterator = null;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn Boolean(this._isEndless) && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}