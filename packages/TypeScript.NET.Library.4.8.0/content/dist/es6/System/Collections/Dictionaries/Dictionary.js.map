{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.ts"],"names":[],"mappings":"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","file":"Dictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../../Compare\";\r\nimport {Type} from \"../../Types\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {LinkedNodeList} from \"../LinkedNodeList\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {getIdentifier} from \"./getIdentifier\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {ILinkedNode} from \"../ILinkedListNode\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport DictionaryBase from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n\r\nexport interface IHashEntry<TKey, TValue>\r\nextends ILinkedNode<IHashEntry<TKey, TValue>>, IKeyValuePair<TKey,TValue>\r\n{\r\n\r\n}\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements IHashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key:TKey,\r\n\t\tpublic value:TValue,\r\n\t\tpublic previous?:IHashEntry<TKey, TValue>|null,\r\n\t\tpublic next?:IHashEntry<TKey, TValue>|null)\r\n\t{\r\n\r\n\t}\r\n}\r\n\r\ntype HashEntryLinkedList<TKey,TValue> = LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>;\r\n\r\nlet linkedListPool:ObjectPool<LinkedNodeList<any>>;\r\nfunction linkedNodeList():LinkedNodeList<any>;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):void;\r\n//noinspection JSUnusedLocalSymbols\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):LinkedNodeList<any>|void\r\n{\r\n\tif(!linkedListPool)\r\n\t\tlinkedListPool\r\n\t\t\t= new ObjectPool<LinkedNodeList<any>>(20, ()=>new LinkedNodeList<any>(), r=>r.clear());\r\n\tif(!recycle) return linkedListPool.take();\r\n\tlinkedListPool.add(recycle);\r\n}\r\n\r\n\r\n\r\nexport class Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\t// Retains the order...\r\n\tprivate readonly _entries:LinkedNodeList<IHashEntry<TKey, TValue>>;\r\n\tprivate readonly _buckets:IMap<LinkedNodeList<IHashEntry<TKey, IHashEntry<TKey, TValue>>>>;\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _keyGenerator?:Selector<TKey,string|number|symbol>)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._entries = linkedNodeList();\r\n\t\tthis._buckets = {};\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst _ = (<any>this);\r\n\t\t_._entries = null;\r\n\t\t_._buckets = null;\r\n\t\t_._hashGenerator = null;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._entries && this._entries.unsafeCount || 0;\r\n\t}\r\n\r\n\tprivate _getBucket(\r\n\t\thash:string|number|symbol,\r\n\t\tcreateIfMissing?:boolean):HashEntryLinkedList<TKey,TValue>|null\r\n\t{\r\n\t\tif(hash==null || !createIfMissing && !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tif(!Type.isPrimitiveOrSymbol(hash))\r\n\t\t\tconsole.warn(\"Key type not indexable and could cause Dictionary to be extremely slow.\");\r\n\r\n\t\tconst buckets = this._buckets;\r\n\t\tlet bucket = buckets[hash];\r\n\r\n\t\tif(createIfMissing && !bucket)\r\n\t\t\tbuckets[hash]\r\n\t\t\t\t= bucket\r\n\t\t\t\t= linkedNodeList();\r\n\r\n\t\treturn bucket || null;\r\n\t}\r\n\r\n\tprivate _getBucketEntry(\r\n\t\tkey:TKey,\r\n\t\thash?:string|number|symbol,\r\n\t\tbucket?:HashEntryLinkedList<TKey,TValue>|null):IHashEntry<TKey,IHashEntry<TKey,TValue>>|null\r\n\t{\r\n\t\tif(key==null || !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tconst _          = this,\r\n\t\t      comparer   = _._keyGenerator,\r\n\t\t      compareKey = comparer ? comparer(key) : key;\r\n\r\n\t\tif(!bucket) bucket = _._getBucket(hash || getIdentifier(compareKey));\r\n\r\n\t\treturn bucket\r\n\t\t\t&& (comparer\r\n\t\t\t\t? bucket.find(e=>comparer!(e.key)===compareKey)\r\n\t\t\t\t: bucket.find(e=>e.key===compareKey)\r\n\t\t\t);\r\n\t}\r\n\r\n\tprotected _getEntry(key:TKey):IHashEntry<TKey,TValue>|null\r\n\t{\r\n\t\tconst e = this._getBucketEntry(key);\r\n\t\treturn e && e.value;\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue|undefined\r\n\t{\r\n\t\tconst e = this._getEntry(key);\r\n\t\treturn e ? e.value : VOID0;\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:TKey, value:TValue|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst buckets    = _._buckets,\r\n\t\t      entries    = _._entries,\r\n\t\t      compareKey = _._keyGenerator ? _._keyGenerator(key) : key,\r\n\t\t      hash       = getIdentifier(compareKey);\r\n\t\tlet bucket = _._getBucket(hash);\r\n\t\tconst bucketEntry = bucket && _._getBucketEntry(key, hash, bucket);\r\n\r\n\t\t// Entry exits? Delete or update\r\n\t\tif(bucketEntry)\r\n\t\t{\r\n\t\t\tconst b = <HashEntryLinkedList<TKey,TValue>>bucket;\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tlet x = b.removeNode(bucketEntry),\r\n\t\t\t\t    y = entries.removeNode(bucketEntry.value);\r\n\r\n\t\t\t\tif(x && !b.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\tlinkedNodeList(b);\r\n\t\t\t\t\tbucket = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(x!==y) throw \"Entries and buckets are out of sync.\";\r\n\r\n\t\t\t\tif(x) return true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We don't expose the internal hash entries so replacing the value is ok.\r\n\t\t\t\tconst old = bucketEntry.value.value;\r\n\t\t\t\tbucketEntry.value.value = value;\r\n\t\t\t\treturn !areEqual(value, old);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse if(value!==VOID0)\r\n\t\t{\r\n\t\t\tif(!bucket) bucket = _._getBucket(hash, true);\r\n\t\t\tif(!bucket) throw new Error(`\"${hash}\" cannot be added to lookup table.`);\r\n\t\t\tlet entry = new HashEntry(key, value);\r\n\t\t\tentries.addNode(entry);\r\n\t\t\tbucket.addNode(new HashEntry(key, entry));\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst buckets = _._buckets;\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t{\r\n\t\t\t\tlet bucket = buckets[key];\r\n\t\t\t\tdelete buckets[key];\r\n\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _._entries.clear();\r\n\t}\r\n\r\n\t/*\r\n\t * Note: super.getEnumerator() works perfectly well,\r\n\t * but enumerating the internal linked node list is much more efficient.\r\n\t */\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet ver:number, currentEntry:IHashEntry<TKey, TValue>|null;\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\tver = _._version;\r\n\t\t\t\tcurrentEntry = _._entries.first;\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\t\t_.assertVersion(ver);\r\n\t\t\t\t\tconst result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next || null;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst result:TKey[] = [];\r\n\t\tlet e:any = _._entries && _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst result:TValue[] = [];\r\n\t\tlet e:any = _._entries && _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n\r\nexport default Dictionary;"]}