{"version":3,"sources":["System/Uri/QueryBuilder.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAC,IAAI,EAAC,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAC,0BAA0B,EAAC,MAAM,wDAAwD,CAAC;AAClG,OAAO,EAAC,uBAAuB,EAAC,MAAM,uCAAuC,CAAC;AAG9E,OAAO,EAAC,KAAK,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AAE5C,oCAAoC;AAIpC;;;;GAIG;AACH,MAAM,mBAAoB,SAAQ,0BAAmE;IAGpG,YACC,KAA4B,EAC5B,eAAuB,IAAI;QAE3B,KAAK,EAAE,CAAC;QAER,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IACvC,CAAC;IAGD,MAAM,CAAC,IAAI,CACV,KAA4B,EAC5B,eAAuB,IAAI;QAE3B,MAAM,CAAC,IAAI,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;IAC9C,CAAC;IAED,WAAW,CACV,KAA4B,EAC5B,eAAuB,IAAI;QAG3B,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CACxB,CAAC;YACA,IAAI,CAAC,gBAAgB,CAAS,KAAK,EAAE,YAAY,CAAC,CAAC;QACpD,CAAC;QACD,IAAI,CAAC,EAAE,CAAA,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CACvC,CAAC;YACA,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,CACJ,CAAC;YACA,IAAI,CAAC,SAAS,CAAmB,KAAK,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAED;;;;;;OAMG;IACH,gBAAgB,CACf,MAAa,EACb,cAAsB,IAAI,EAC1B,eAAuB,IAAI;QAE3B,MAAM,CAAC,GAAG,IAAI,CAAC;QACf,KAAK,CAAC,MAAM,EACX,CAAC,GAAG,EAAE,KAAK;YAEV,EAAE,CAAA,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CACtB,CAAC;gBACA,MAAM,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAC7B,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,YAAU,CAAC,KAAK,CAAC,CAAC;oBAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAClB,IAAI;oBACH,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAqB,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;YACrD,CAAC;YACD,IAAI;gBACH,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACzB,CAAC,EACD,WAAW,EACX,YAAY,CAAC,CAAC;QAEf,MAAM,CAAC,IAAI,CAAC;IACb,CAAC;IAGD;;OAEG;IACH,MAAM,CAAC,gBAAyB;QAE/B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;QAEP,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;CACD;AAED,eAAe,YAAY,CAAC","file":"QueryBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../Types\";\r\nimport {OrderedStringKeyDictionary} from \"../Collections/Dictionaries/OrderedStringKeyDictionary\";\r\nimport {isEnumerableOrArrayLike} from \"../Collections/Enumeration/Enumerator\";\r\nimport {UriComponent} from \"./UriComponent\";\r\nimport {QueryParam} from \"./QueryParam\";\r\nimport {parse, encode} from \"./QueryParams\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n/**\r\n * Provides a means for parsing and building a set of parameters.\r\n *\r\n * In other languages, dictionaries are not reliable for retaining the order of stored values. So for certainty and flexibility we use an ordered dictionary as a base class.\r\n */\r\nexport class QueryBuilder extends OrderedStringKeyDictionary<UriComponent.Value|UriComponent.Value[]>\r\n{\r\n\r\n\tconstructor(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.importQuery(query, decodeValues);\r\n\t}\r\n\r\n\r\n\tstatic init(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\treturn new QueryBuilder(query, decodeValues);\r\n\t}\r\n\r\n\timportQuery(\r\n\t\tquery:QueryParam.Convertible,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\r\n\t\tif(Type.isString(query))\r\n\t\t{\r\n\t\t\tthis.importFromString(<string>query, decodeValues);\r\n\t\t}\r\n\t\telse if(isEnumerableOrArrayLike(query))\r\n\t\t{\r\n\t\t\tthis.importEntries(query);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.importMap(<UriComponent.Map>query);\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Property parses the components of an URI into their values or array of values.\r\n\t * @param values\r\n\t * @param deserialize\r\n\t * @param decodeValues\r\n\t * @returns {QueryBuilder}\r\n\t */\r\n\timportFromString(\r\n\t\tvalues:string,\r\n\t\tdeserialize:boolean = true,\r\n\t\tdecodeValues:boolean = true):QueryBuilder\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tparse(values,\r\n\t\t\t(key, value)=>\r\n\t\t\t{\r\n\t\t\t\tif(_.containsKey(key))\r\n\t\t\t\t{\r\n\t\t\t\t\tconst prev = _.getValue(key);\r\n\t\t\t\t\tif((prev)instanceof(Array))\r\n\t\t\t\t\t\tprev.push(value);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_.setValue(key, [<UriComponent.Value>prev, value]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_.setValue(key, value);\r\n\t\t\t},\r\n\t\t\tdeserialize,\r\n\t\t\tdecodeValues);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the encoded URI string\r\n\t */\r\n\tencode(prefixIfNotEmpty?:boolean):string\r\n\t{\r\n\t\treturn encode(this, prefixIfNotEmpty);\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\treturn this.encode();\r\n\t}\r\n}\r\n\r\nexport default QueryBuilder;\r\n"]}