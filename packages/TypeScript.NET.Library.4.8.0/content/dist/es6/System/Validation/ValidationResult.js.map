{"version":3,"sources":["System/Validation/ValidationResult.ts"],"names":[],"mappings":"AAOA,MAAM,KAAK,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAEzC;;GAEG;AACH,MAAM,CAAC,OAAO;IAGb;;OAEG;IACH,YACU,UAAkB,KAAK,EACvB,OAAe,EACf,OAAW,IAAI;QAFf,YAAO,GAAP,OAAO,CAAgB;QACvB,YAAO,GAAP,OAAO,CAAQ;QACf,SAAI,GAAJ,IAAI,CAAW;QAExB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,cAAc;QACd,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAuB;QAE7B,MAAM,CAAC,GAAG,IAAI,CAAC;QACf,MAAM,CAAC,CAAC,CAAC,OAAO,KAAG,KAAK,CAAC,OAAO;eAC5B,CAAC,CAAC,OAAO,IAAE,CAAC,CAAC,OAAO;eACpB,CAAC,CAAC,IAAI,IAAE,CAAC,CAAC,IAAI,CAAC;IACpB,CAAC;IAGD;;;OAGG;IACH,MAAM,KAAK,KAAK;QAEf,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,OAAO,CACb,OAAc,EACd,OAAW,IAAI;QAEf,MAAM,CAAC,IAAI,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;CACD","file":"ValidationResult.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport {IValidationResult} from \"./IValidationResult\"; // For compatibility with (let, const, function, class);\r\n\r\nconst valid = new ValidationResult(true);\r\n\r\n/**\r\n * A class for generating responses to validation.\r\n */\r\nexport default\r\nclass ValidationResult implements IValidationResult, IEquatable<IValidationResult>\r\n{\r\n\t/**\r\n\t * Allows for rare cases that ValidationResult.valid and ValidationResult.invalid() don't cover.\r\n\t */\r\n\tconstructor(\r\n\t\treadonly isValid:boolean = false,\r\n\t\treadonly message?:string,\r\n\t\treadonly data:any = null)\r\n\t{\r\n\t\tthis.isValid = isValid;\r\n\t\tthis.message = message;\r\n\t\tthis.data = data;\r\n\r\n\t\t// Readonly...\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Allows for comparing another IValidationResult to see if they are equal.\r\n\t */\r\n\tequals(other:IValidationResult):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.isValid===other.isValid\r\n\t\t\t&& _.message==_.message\r\n\t\t\t&& _.data==_.data;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Represents a single/shared instance of a valid result.\r\n\t * Allows for returning this instance like you would return 'true'.\r\n\t */\r\n\tstatic get valid():IValidationResult\r\n\t{\r\n\t\treturn valid;\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for easily creating an invalid result.\r\n\t */\r\n\tstatic invalid(\r\n\t\tmessage:string,\r\n\t\tdata:any = null):IValidationResult\r\n\t{\r\n\t\treturn new ValidationResult(false, message, data);\r\n\t}\r\n}\r\n"]}