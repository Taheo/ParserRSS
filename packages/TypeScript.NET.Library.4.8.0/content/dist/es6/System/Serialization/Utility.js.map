{"version":3,"sources":["System/Serialization/Utility.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAC,IAAI,EAAC,MAAM,UAAU,CAAC;AAC9B,OAAO,EAAC,yBAAyB,EAAC,MAAM,yCAAyC,CAAC;AAKlF,MAAM,KAAK,GAAG,EAAE,EAAE,IAAI,GAAG,MAAM,EAAE,KAAK,GAAG,OAAO,CAAC;AAEjD,MAAM,mBACL,KAA4C,EAC5C,iBAAyB;IAGzB,IAAI,CAAC,GAAQ,KAAK,CAAC;IACnB,MAAM,CAAA,CAAC,OAAO,CAAC,CAAC,CAChB,CAAC;QACA,KAAK,IAAI,CAAC,MAAM;YACf,MAAM,CAAC,CAAC,CAAC;QACV,KAAK,IAAI,CAAC,OAAO;YAChB,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;QACzB,KAAK,IAAI,CAAC,MAAM;YACf,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC;QAClB;YAEC,EAAE,CAAA,CAAC,CAAC,IAAE,IAAI,CAAC;gBACV,MAAM,CAAC,CAAC,CAAC;YAEV,EAAE,CAAA,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBACpB,MAAM,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;YACtB,IAAI,CAAC,EAAE,CAAA,CAAC,iBAAiB,CAAC;gBACzB,MAAM,CAAC,iBAAiB,CAAC;YAE1B,MAAM,EAAE,GAAG,IAAI,yBAAyB,CAAC,8CAA8C,CAAC,CAAC;YACzF,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACrB,MAAM,EAAE,CAAC;IAEX,CAAC;AAEF,CAAC;AAED,MAAM,yBAAyB,QAAY;IAE1C,MAAM,CAAC,IAAI,CAAC,eAAe,CAAgB,QAAQ,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAClF,CAAC;AAED,MAAM,sBACL,KAAY,EACZ,eAAwB,EACxB,cAAkC;IAIlC,EAAE,CAAA,CAAC,KAAK,CAAC,CACT,CAAC;QACA,EAAE,CAAA,CAAC,eAAe,CAAC;YAAC,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAEhD,MAAM,CAAA,CAAC,KAAK,CAAC,CACb,CAAC;YACA,KAAK,MAAM;gBACV,MAAM,CAAC,IAAI,CAAC;YACb,KAAK,IAAI,CAAC,SAAS;gBAClB,MAAM,CAAC,KAAI,CAAC,CAAC,CAAC,CAAC;YAChB,KAAK,IAAI;gBACR,MAAM,CAAC,IAAI,CAAC;YACb,KAAK,KAAK;gBACT,MAAM,CAAC,KAAK,CAAC;YACd;gBAEC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;gBACrD,EAAE,CAAA,CAAC,OAAO,CAAC,CACX,CAAC;oBAEA,EAAE,CAAA,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAC1B,CAAC;wBACA,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;wBAC9B,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;4BAAC,MAAM,CAAC,GAAG,CAAC;oBAC5B,CAAC;oBACD,IAAI,CACJ,CAAC;wBACA,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;wBACjC,EAAE,CAAA,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;4BAAC,MAAM,CAAC,MAAM,CAAC;oBAClC,CAAC;gBAEF,CAAC;gBAED,kCAAkC;gBAElC,+CAA+C;gBAC/C,EAAE,CAAA,CAAC,cAAc,CAAC;oBAAC,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBAEjD,KAAK,CAAC;QACR,CAAC;IAEF,CAAC;IAED,MAAM,CAAC,KAAK,CAAC;AAEd,CAAC","file":"Utility.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../Types\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ISerializable} from \"./ISerializable\";\r\nimport {Primitive} from \"../Primitive\";\r\n\r\n\r\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n\r\nexport function toString(\r\n\tvalue:Primitive|ISerializable|undefined|null,\r\n\tdefaultForUnknown?:string):string\r\n{\r\n\r\n\tlet v = <any>value;\r\n\tswitch(typeof v)\r\n\t{\r\n\t\tcase Type.STRING:\r\n\t\t\treturn v;\r\n\t\tcase Type.BOOLEAN:\r\n\t\t\treturn v ? TRUE : FALSE;\r\n\t\tcase Type.NUMBER:\r\n\t\t\treturn EMPTY + v;\r\n\t\tdefault:\r\n\r\n\t\t\tif(v==null)\r\n\t\t\t\treturn v;\r\n\r\n\t\t\tif(isSerializable(v))\r\n\t\t\t\treturn v.serialize();\r\n\t\t\telse if(defaultForUnknown)\r\n\t\t\t\treturn defaultForUnknown;\r\n\r\n\t\t\tconst ex = new InvalidOperationException('Attempting to serialize unidentifiable type.');\r\n\t\t\tex.data['value'] = v;\r\n\t\t\tthrow ex;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function isSerializable(instance:any):instance is ISerializable\r\n{\r\n\treturn Type.hasMemberOfType<ISerializable>(instance, 'serialize', Type.FUNCTION);\r\n}\r\n\r\nexport function toPrimitive(\r\n\tvalue:string,\r\n\tcaseInsensitive?:boolean,\r\n\tunknownHandler?:(v:string)=>string):Primitive|null|undefined\r\n{\r\n\r\n\r\n\tif(value)\r\n\t{\r\n\t\tif(caseInsensitive) value = value.toLowerCase();\r\n\r\n\t\tswitch(value)\r\n\t\t{\r\n\t\t\tcase 'null':\r\n\t\t\t\treturn null;\r\n\t\t\tcase Type.UNDEFINED:\r\n\t\t\t\treturn void(0);\r\n\t\t\tcase TRUE:\r\n\t\t\t\treturn true;\r\n\t\t\tcase FALSE:\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconst cleaned = value.replace(/^\\s+|,|\\s+$/g, EMPTY);\r\n\t\t\t\tif(cleaned)\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tif(/^\\d+$/g.test(cleaned))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst int = parseInt(cleaned);\r\n\t\t\t\t\t\tif(!isNaN(int)) return int;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst number = parseFloat(value);\r\n\t\t\t\t\t\tif(!isNaN(number)) return number;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handle Dates...  Possibly JSON?\r\n\r\n\t\t\t\t// Instead of throwing we allow for handling...\r\n\t\t\t\tif(unknownHandler) value = unknownHandler(value);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn value;\r\n\r\n}\r\n"]}