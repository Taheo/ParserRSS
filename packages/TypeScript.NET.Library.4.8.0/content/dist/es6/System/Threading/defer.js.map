{"version":3,"sources":["System/Threading/defer.ts"],"names":[],"mappings":"AAOA,oCAAoC;AAGpC;IAOC,OAAO;QAEN,IAAI,CAAC,MAAM,EAAE,CAAC;IACf,CAAC;CACD;AAED,WAAY,SAAQ,SAAS;IAI5B,YAAY,IAAa,EAAE,QAAe,CAAC,EAAE,OAAY;QAExD,KAAK,EAAE,CAAC;QACR,EAAE,CAAA,CAAC,CAAC,CAAC,KAAK,GAAC,CAAC,CAAC,CAAC;YAAC,KAAK,GAAG,CAAC,CAAC,CAAC,6BAA6B;QACvD,IAAI,CAAC,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IAED,MAAM;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,EAAE,CAAA,CAAC,EAAE,CAAC,CACN,CAAC;YACA,YAAY,CAAC,EAAE,CAAC,CAAC;YACjB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED,4EAA4E;IACpE,MAAM,CAAC,OAAO,CAAC,IAAa,EAAE,CAAO,EAAE,OAAY;QAE1D,CAAC,CAAC,MAAM,EAAE,CAAC;QACX,IAAI,CAAC,OAAO,CAAC,CAAC;IACf,CAAC;CAED;AAED,mBAAoB,SAAQ,SAAS;IAIpC,YACC,IAAa,EACb,QAAe,EACP,aAAoB,QAAQ;QAEpC,KAAK,EAAE,CAAC;QAFA,eAAU,GAAV,UAAU,CAAkB;QAGpC,EAAE,CAAA,CAAC,QAAQ,IAAE,IAAI,CAAC;YACjB,MAAM,oCAAoC,CAAC;QAC5C,EAAE,CAAA,CAAC,QAAQ,GAAC,CAAC,CAAC;YACb,MAAM,gCAAgC,CAAC;QAExC,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACrE,CAAC;IAED,MAAM;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;QACpB,EAAE,CAAA,CAAC,EAAE,CAAC,CACN,CAAC;YACA,aAAa,CAAC,EAAE,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC;QACb,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAEO,MAAM,CAAC,OAAO,CAAC,IAAa,EAAE,CAAe;QAEpD,EAAE,CAAA,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC;YAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QACjC,IAAI,EAAE,CAAC;IACR,CAAC;CAED;AAYD,MAAM,gBACL,IAAa,EACb,KAAa,EACb,OAAY;IAEZ,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC;AAED,MAAM,mBACL,IAAa,EACb,QAAe,EACf,QAAe,QAAQ;IAEvB,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;AACjD,CAAC;AAED,eAAe,KAAK,CAAC","file":"defer.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {ICancellable} from \"./ICancellable\";\r\nimport {Closure, Func} from \"../FunctionTypes\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nabstract class DeferBase implements ICancellable\r\n{\r\n\t// It may be a Timer in node, should not be restricted to number.\r\n\tprotected _id:any;\r\n\r\n\tabstract cancel():boolean;\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n}\r\n\r\nclass Defer extends DeferBase\r\n{\r\n\r\n\r\n\tconstructor(task:Function, delay:number = 0, payload?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!(delay>0)) delay = 0; // covers undefined and null.\r\n\t\tthis._id = setTimeout(Defer.handler, delay, task, this, payload);\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tconst id = this._id;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearTimeout(id);\r\n\t\t\tthis._id = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Use a static function here to avoid recreating a new function every time.\r\n\tprivate static handler(task:Function, d:Defer, payload?:any):void\r\n\t{\r\n\t\td.cancel();\r\n\t\ttask(payload);\r\n\t}\r\n\r\n}\r\n\r\nclass DeferInterval extends DeferBase\r\n{\r\n\r\n\r\n\tconstructor(\r\n\t\ttask:Function,\r\n\t\tinterval:number,\r\n\t\tprivate _remaining:number = Infinity)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(interval==null)\r\n\t\t\tthrow \"'interval' must be a valid number.\";\r\n\t\tif(interval<0)\r\n\t\t\tthrow \"'interval' cannot be negative.\";\r\n\r\n\t\tthis._id = setInterval(DeferInterval.handler, interval, task, this);\r\n\t}\r\n\r\n\tcancel():boolean\r\n\t{\r\n\t\tconst id = this._id;\r\n\t\tif(id)\r\n\t\t{\r\n\t\t\tclearInterval(id);\r\n\t\t\tthis._id = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate static handler(task:Function, d:DeferInterval):void\r\n\t{\r\n\t\tif(!(--d._remaining)) d.cancel();\r\n\t\ttask();\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport function defer(\r\n\ttask:Closure,\r\n\tdelay?:number):ICancellable;\r\n\r\nexport function defer<T>(\r\n\ttask:Func<T>,\r\n\tdelay?:number,\r\n\tpayload?:T):ICancellable\r\n\r\nexport function defer<T>(\r\n\ttask:Function,\r\n\tdelay?:number,\r\n\tpayload?:any):ICancellable\r\n{\r\n\treturn new Defer(task, delay, payload);\r\n}\r\n\r\nexport function interval(\r\n\ttask:Function,\r\n\tinterval:number,\r\n\tcount:number = Infinity):ICancellable\r\n{\r\n\treturn new DeferInterval(task, interval, count);\r\n}\r\n\r\nexport default defer;"]}