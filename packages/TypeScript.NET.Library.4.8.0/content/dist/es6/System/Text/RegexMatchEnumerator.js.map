{"version":3,"sources":["System/Text/RegexMatchEnumerator.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAC,KAAK,EAAQ,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAC,eAAe,EAAC,MAAM,4CAA4C,CAAC;AAC3E,OAAO,EAAC,cAAc,EAAC,MAAM,2CAA2C,CAAC;AAGzE,MAAM;IAIL,YAAY,OAA2B;QAEtC,EAAE,CAAA,CAAC,OAAO,YAAY,KAAK,CAAC,CAC5B,CAAC;YACA,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACzB,CAAC;QACD,IAAI,CACJ,CAAC;YACA,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;IACF,CAAC;IAED,OAAO,CAAC,KAAY;QAEnB,IAAI,CAAQ,CAAC,CAAC,UAAU;QACxB,MAAM,CAAC,IAAI,cAAc,CACxB;YAEC,CAAC,GAAG,CAAC,CAAC;QACP,CAAC,EACD,OAAO;YAEN,IAAI,KAAK,GAAS,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAChD,EAAE,CAAA,CAAC,KAAK,CAAC,OAAO,CAAC,CACjB,CAAC;gBACA,CAAC,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;gBAC/B,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACnC,CAAC;YAED,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,KAAY,EAAE,OAA2B;QAEvD,MAAM,CAAC,KAAK,IAAI,OAAO;cACpB,CAAC,IAAI,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;cAClD,eAAe,CAAC;IACpB,CAAC;CAED;AAED,eAAe,oBAAoB,CAAC,OAAO,CAAC","file":"RegexMatchEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Regex, Match} from \"./RegularExpressions\";\r\nimport {EmptyEnumerator} from \"../Collections/Enumeration/EmptyEnumerator\";\r\nimport {EnumeratorBase} from \"../Collections/Enumeration/EnumeratorBase\";\r\nimport {IEnumerator} from \"../Collections/Enumeration/IEnumerator\";\r\n\r\nexport class RegexMatchEnumerator\r\n{\r\n\tprivate readonly _pattern:Regex;\r\n\r\n\tconstructor(pattern:string|RegExp|Regex)\r\n\t{\r\n\t\tif(pattern instanceof Regex)\r\n\t\t{\r\n\t\t\tthis._pattern = pattern;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._pattern = new Regex(pattern);\r\n\t\t}\r\n\t}\r\n\r\n\tmatches(input:string):IEnumerator<Match>\r\n\t{\r\n\t\tlet p:number; // pointer\r\n\t\treturn new EnumeratorBase<Match>(\r\n\t\t\t()=>\r\n\t\t\t{\r\n\t\t\t\tp = 0;\r\n\t\t\t},\r\n\t\t\tyielder=>\r\n\t\t\t{\r\n\t\t\t\tlet match:Match = this._pattern.match(input, p);\r\n\t\t\t\tif(match.success)\r\n\t\t\t\t{\r\n\t\t\t\t\tp = match.index + match.length;\r\n\t\t\t\t\treturn yielder.yieldReturn(match);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic matches(input:string, pattern:string|RegExp|Regex):IEnumerator<Match>\r\n\t{\r\n\t\treturn input && pattern\r\n\t\t\t? (new RegexMatchEnumerator(pattern)).matches(input)\r\n\t\t\t: EmptyEnumerator;\r\n\t}\r\n\r\n}\r\n\r\nexport default RegexMatchEnumerator.matches;"]}