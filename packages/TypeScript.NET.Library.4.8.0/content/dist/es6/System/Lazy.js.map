{"version":3,"sources":["System/Lazy.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAIH,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAE5C,oCAAoC;AAIpC,0EAA0E;AAC1E,MAAM,WAAe,SAAQ,YAAe;IAG3C,YAAY,YAAoB,EAAE,iBAAyB,KAAK,EAAE,aAAqB,KAAK;QAE3F,KAAK,CAAC,YAAY,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;QAChD,IAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC;QACpC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED,IAAI,cAAc;QAEjB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;IAC/B,CAAC;IAED,IAAI,KAAK;QAER,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IACxB,CAAC;IAED,MAAM,CAAC,KAAa;QAEnB,MAAM,CAAC,IAAI,IAAE,KAAK,CAAC;IACpB,CAAC;IAED,WAAW,CAAC,KAAa;QAExB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,KAAG,KAAK,CAAC,KAAK,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,MAAM,CAAI,YAAoB,EAAE,iBAAyB,KAAK,EAAE,aAAqB,KAAK;QAEhG,MAAM,CAAC,IAAI,IAAI,CAAI,YAAY,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;IAC9D,CAAC;CAED;AAED,MAAM,qBAAyB,SAAQ,IAAO;IAE7C,YAAY,YAAoB,EAAE,iBAAyB,KAAK;QAE/D,KAAK,CAAC,YAAY,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,qBAAqB,GAAG,gBAAgB,CAAC;IAC/C,CAAC;IAED,MAAM,CAAC,MAAM,CAAI,YAAoB,EAAE,iBAAyB,KAAK;QAEpE,MAAM,CAAC,IAAI,cAAc,CAAI,YAAY,EAAE,cAAc,CAAC,CAAC;IAC5D,CAAC;CACD;AAED,eAAe,IAAI,CAAC","file":"Lazy.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ILazy} from \"./ILazy\";\r\nimport {Func} from \"./FunctionTypes\";\r\nimport {ResolverBase} from \"./ResolverBase\";\r\nimport __extendsImport from \"../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// We need a non-resettable lazy to ensure it can be passed safely around.\r\nexport class Lazy<T> extends ResolverBase<T> implements ILazy<T>\r\n{\r\n\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false, allowReset:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, allowReset);\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t\tthis._isValueCreated = false;\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn !!this._isValueCreated;\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n\r\n\tstatic create<T>(valueFactory:Func<T>, trapExceptions:boolean = false, allowReset:boolean = false)\r\n\t{\r\n\t\treturn new Lazy<T>(valueFactory, trapExceptions, allowReset);\r\n\t}\r\n\r\n}\r\n\r\nexport class ResettableLazy<T> extends Lazy<T>\r\n{\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, true);\r\n\t\tthis._disposableObjectName = 'ResettableLazy';\r\n\t}\r\n\r\n\tstatic create<T>(valueFactory:Func<T>, trapExceptions:boolean = false)\r\n\t{\r\n\t\treturn new ResettableLazy<T>(valueFactory, trapExceptions);\r\n\t}\r\n}\r\n\r\nexport default Lazy;"]}