{"version":3,"sources":["System/Diagnostics/Stopwatch.ts"],"names":[],"mappings":"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","file":"Stopwatch.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {TimeSpan} from \"../Time/TimeSpan\";\r\nimport {ITimer} from \"../Timers/ITimer\";\r\n\r\nfunction getTimestampMilliseconds():number\r\n{\r\n\treturn (new Date()).getTime();\r\n}\r\n\r\nexport default\r\nclass Stopwatch implements ITimer\r\n{\r\n\r\n\tstatic getTimestampMilliseconds():number\r\n\t{\r\n\t\treturn getTimestampMilliseconds();\r\n\t}\r\n\r\n\tprivate _elapsed:number;\r\n\tprivate _startTimeStamp:number;\r\n\r\n\tprivate _isRunning:boolean;\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn this._isRunning;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tstatic startNew():Stopwatch\r\n\t{\r\n\t\tconst s = new Stopwatch();\r\n\t\ts.start();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tstatic measure(closure:()=>void):TimeSpan\r\n\t{\r\n\t\tconst start = getTimestampMilliseconds();\r\n\t\tclosure();\r\n\t\treturn new TimeSpan(getTimestampMilliseconds() - start);\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!_._isRunning)\r\n\t\t{\r\n\t\t\t_._startTimeStamp = getTimestampMilliseconds();\r\n\t\t\t_._isRunning = true;\r\n\t\t}\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._isRunning)\r\n\t\t{\r\n\t\t\t_._elapsed += _.currentLapMilliseconds;\r\n\t\t\t_._isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._elapsed = 0;\r\n\t\t_._isRunning = false;\r\n\t\t_._startTimeStamp = NaN;\r\n\t}\r\n\r\n\t// Effectively calls a stop start and continues timing...\r\n\t// Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\r\n\tlap():TimeSpan\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._isRunning)\r\n\t\t{\r\n\t\t\tconst t = getTimestampMilliseconds();\r\n\t\t\tconst s = _._startTimeStamp;\r\n\t\t\tconst e = t - s;\r\n\t\t\t_._startTimeStamp = t;\r\n\t\t\t_._elapsed += e;\r\n\t\t\treturn new TimeSpan(e);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn TimeSpan.zero;\r\n\t}\r\n\r\n\tget currentLapMilliseconds():number\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? (getTimestampMilliseconds() - this._startTimeStamp)\r\n\t\t\t: 0;\r\n\t}\r\n\r\n\tget currentLap():TimeSpan\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? new TimeSpan(this.currentLapMilliseconds)\r\n\t\t\t: TimeSpan.zero;\r\n\t}\r\n\r\n\tget elapsedMilliseconds():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet timeElapsed = _._elapsed;\r\n\r\n\t\tif(_._isRunning)\r\n\t\t\ttimeElapsed += _.currentLapMilliseconds;\r\n\r\n\t\treturn timeElapsed;\r\n\t}\r\n\r\n\tget elapsed():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.elapsedMilliseconds);\r\n\t}\r\n\r\n}\r\n"]}