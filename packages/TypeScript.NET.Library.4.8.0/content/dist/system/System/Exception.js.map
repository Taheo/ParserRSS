{"version":3,"sources":["System/Exception.ts"],"names":[],"mappings":";;;;;;;YAOM,IAAI,GAAU,WAAW,CAAC;YAQhC;;eAEG;YACH;gBAUC;;;;;mBAKG;gBACH,mBACU,OAAc,EACvB,cAAqB,EACrB,aAA6B;oBAFpB,YAAO,GAAP,OAAO,CAAO;oBAIvB,IAAM,CAAC,GAAG,IAAI,CAAC;oBAEf,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;oBACxB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;oBAEf,EAAE,CAAA,CAAC,cAAc,CAAC;wBACjB,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,cAAc,CAAC;oBAE3C;;;uBAGG;oBAEH,EAAE,CAAA,CAAC,aAAa,CAAC;wBAAC,aAAa,CAAC,CAAC,CAAC,CAAC;oBAEnC,qCAAqC;oBACrC,IACA,CAAC;wBACA,IAAI,KAAK,GAAU,IAAI,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC;wBAC7C,KAAK,GAAG,KAAK;+BACT,KAAK;iCACN,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;iCACvB,OAAO,CAAC,oBAAoB,EAAE,EAAE,CAAC;+BAChC,EAAE,CAAC;wBAEP,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,uBAAuB,EAAE,GAAG,KAAK,CAAC;oBAClD,CAAC;oBACD,KAAK,CAAA,CAAC,EAAE,CAAC,CACT,CAAC,CAAA,CAAC;oBAEF,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;gBAGD;;;mBAGG;gBACO,2BAAO,GAAjB,cACE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBAEhB;;mBAEG;gBACH,4BAAQ,GAAR;oBAEC,MAAM,CAAC,MAAI,IAAI,CAAC,uBAAuB,EAAE,MAAG,CAAC;gBAC9C,CAAC;gBAES,2CAAuB,GAAjC;oBAEC,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,IAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC;oBACpB,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;gBACvC,CAAC;gBAED;;mBAEG;gBACH,2BAAO,GAAP;oBAEC,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;oBACvB,GAAG,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAClB,CAAC;wBACA,EAAE,CAAA,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;4BACzB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;oBACjB,CAAC;gBACF,CAAC;gBACF,gBAAC;YAAD,CAzFA,AAyFC,IAAA;;iCAEc,SAAS;QACxB,CAAC","file":"Exception.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\nimport {IDisposable} from \"./Disposable/IDisposable\";\r\nimport {IMap} from \"../IMap\";\r\nconst NAME:string = 'Exception';\r\n\r\n// Avoid importing node reference..\r\nexport interface Error {\r\n\tname: string;\r\n\tmessage: string;\r\n}\r\n\r\n/**\r\n * Represents errors that occur during application execution.\r\n */\r\nexport class Exception implements Error, IDisposable\r\n{\r\n\t/**\r\n\t * A string representation of the error type.\r\n\t * The default is 'Error'.\r\n\t */\r\n\treadonly name:string;\r\n\treadonly stack:string;\r\n\treadonly data:IMap<any>;\r\n\r\n\t/**\r\n\t * Initializes a new instance of the Exception class with a specified error message and optionally a reference to the inner exception that is the cause of this exception.\r\n\t * @param message\r\n\t * @param innerException\r\n\t * @param beforeSealing This delegate is used to allow actions to occur just before this constructor finishes.  Since some compilers do not allow the use of 'this' before super.\r\n\t */\r\n\tconstructor(\r\n\t\treadonly message:string,\r\n\t\tinnerException?:Error,\r\n\t\tbeforeSealing?:(ex:any)=>void)\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\tthis.name = _.getName();\r\n\t\tthis.data = {};\r\n\r\n\t\tif(innerException)\r\n\t\t\t_.data['innerException'] = innerException;\r\n\r\n\t\t/* Originally intended to use 'get' accessors for properties,\r\n\t\t * But debuggers don't display these readily yet.\r\n\t\t * Object.freeze has to be used carefully, but will prevent overriding values at runtime.\r\n\t\t */\r\n\r\n\t\tif(beforeSealing) beforeSealing(_);\r\n\r\n\t\t// Node has a .stack, let's use it...\r\n\t\ttry\r\n\t\t{\r\n\t\t\tlet stack:string = eval(\"new Error()\").stack;\r\n\t\t\tstack = stack\r\n\t\t\t\t&& stack\r\n\t\t\t\t\t.replace(/^Error\\n/, '')\r\n\t\t\t\t\t.replace(/(.|\\n)+\\s+at new.+/, '')\r\n\t\t\t\t|| '';\r\n\r\n\t\t\tthis.stack = _.toStringWithoutBrackets() + stack;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{}\r\n\r\n\t\tObject.freeze(_);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A string representation of the error type.\r\n\t * The default is 'Error'.\r\n\t */\r\n\tprotected getName():string\r\n\t{ return NAME; }\r\n\r\n\t/**\r\n\t * The string representation of the Exception instance.\r\n\t */\r\n\ttoString():string\r\n\t{\r\n\t\treturn `[${this.toStringWithoutBrackets()}]`;\r\n\t}\r\n\r\n\tprotected toStringWithoutBrackets():string\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst m = _.message;\r\n\t\treturn _.name + (m ? (': ' + m) : '');\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the data object.\r\n\t */\r\n\tdispose():void\r\n\t{\r\n\t\tconst data = this.data;\r\n\t\tfor(let k in data)\r\n\t\t{\r\n\t\t\tif(data.hasOwnProperty(k))\r\n\t\t\t\tdelete data[k];\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Exception;\r\n"]}