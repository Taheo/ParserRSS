{"version":3,"sources":["System/Threading/Tasks/Task.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAWA,oCAAoC;YAC9B,SAAS,GAAG,iBAAe,CAAC;YAElC;;;eAGG;YACH;gBAA6B,wBAAe;gBAI3C,cAAY,YAAoB;oBAAhC,YAEC,iBAAO,SAGP;oBAFA,EAAE,CAAA,CAAC,CAAC,YAAY,CAAC;wBAAC,MAAM,IAAI,6CAAqB,CAAC,cAAc,CAAC,CAAC;oBAClE,KAAI,CAAC,OAAO,GAAG,IAAI,WAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;;gBAC9C,CAAC;gBAES,yBAAU,GAApB;oBAEC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACzB,CAAC;gBAES,wBAAS,GAAnB;oBAEC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,4CAA4C;gBACxE,CAAC;gBAES,uBAAQ,GAAlB;oBAEC,IAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;oBACvB,MAAM,CAAC,CAAC,IAAI;wBACV,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE;wBACxB,MAAM,EAAE,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;wBAC3C,KAAK,EAAE,CAAC,CAAC,KAAK;qBACd,CAAC;gBACJ,CAAC;gBAGD,oBAAK,GAAL,UAAM,KAAa;oBAElB,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,EAAE,IAAE,eAAkB,CAAC,CACxC,CAAC;wBACA,iBAAM,KAAK,YAAC,KAAK,CAAC,CAAC;oBACpB,CAAC;gBACF,CAAC;gBAED,+BAAgB,GAAhB;oBAEC,EAAE,CAAA,CAAC,IAAI,CAAC,SAAS,EAAE,IAAE,eAAkB,CAAC,CACxC,CAAC;wBACA,iBAAM,gBAAgB,WAAE,CAAC;oBAC1B,CAAC;gBACF,CAAC;gBAED,sBAAI,uBAAK;yBAAT;wBAEC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACxB,CAAC;;;mBAAA;gBAED,sBAAI,wBAAM;yBAAV;wBAEC,IAAI,CAAC,eAAe,EAAE,CAAC;wBACvB,IAAI,CAAC,gBAAgB,EAAE,CAAC;wBACxB,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;oBACzB,CAAC;;;mBAAA;gBAED,sBAAI,uBAAK;yBAAT;wBAEC,IAAI,CAAC,eAAe,EAAE,CAAC;wBACvB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;oBAC3B,CAAC;;;mBAAA;gBAES,yBAAU,GAApB;oBAEC,iBAAM,UAAU,WAAE,CAAC;oBACnB,IAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;oBAEvB,EAAE,CAAA,CAAC,CAAC,CAAC,CACL,CAAC;wBACM,IAAK,CAAC,OAAO,GAAG,IAAI,CAAC;wBAC3B,CAAC,CAAC,OAAO,EAAE,CAAC;oBACb,CAAC;gBACF,CAAC;gBACF,WAAC;YAAD,CA7EA,AA6EC,CA7E4B,iCAAe,GA6E3C;;iCAEc,IAAI;QAAC,CAAC","file":"Task.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {TaskHandlerBase} from \"./TaskHandlerBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {Func} from \"../../FunctionTypes\";\r\nimport {Lazy} from \"../../Lazy\";\r\nimport {ITaskState} from \"./ITaskState\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified synchronous (but deferrable) version of Task<T>\r\n * Asynchronous operations should use Promise<T>.\r\n */\r\nexport class Task<T> extends TaskHandlerBase\r\n{\r\n\tprivate readonly _result:Lazy<T>;\r\n\r\n\tconstructor(valueFactory:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!valueFactory) throw new ArgumentNullException('valueFactory');\r\n\t\tthis._result = new Lazy(valueFactory, false);\r\n\t}\r\n\r\n\tprotected _onExecute():void\r\n\t{\r\n\t\tthis._result.getValue();\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result.value; // This will detect any potential recursion.\r\n\t}\r\n\r\n\tprotected getState():ITaskState<T>\r\n\t{\r\n\t\tconst r = this._result;\r\n\t\treturn r && {\r\n\t\t\t\tstatus: this.getStatus(),\r\n\t\t\t\tresult: r.isValueCreated ? r.value : void 0,\r\n\t\t\t\terror: r.error\r\n\t\t\t};\r\n\t}\r\n\r\n\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.start(defer);\r\n\t\t}\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.runSynchronously();\r\n\t\t}\r\n\t}\r\n\r\n\tget state():ITaskState<T>\r\n\t{\r\n\t\treturn this.getState();\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.runSynchronously();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._result.error;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst r = this._result;\r\n\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\t(<any>this)._result = null;\r\n\t\t\tr.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Task;"]}