{"version":3,"sources":["System/Text/StringBuilder.ts"],"names":[],"mappings":"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","file":"StringBuilder.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * .NET Reference: http://referencesource.microsoft.com/#mscorlib/system/text/StringBuilder.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../Types\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/string-concatenation-looped\r\n * http://jsperf.com/adding-strings-to-an-array\r\n * http://jsperf.com/string-concatenation-versus-array-operations-with-join\r\n *\r\n * It is clearly inefficient to use a StringBuilder or LinkedList to build a string when you have a small set of string portions.\r\n * StringBuilder will really show it's benefit likely somewhere above 1000 items.\r\n *****************************/\r\n\r\n\r\nexport class StringBuilder implements IDisposable\r\n\t// Adding IDisposable allows for use with System.using();\r\n\t// ... and since this may end up being a large array container, might be a good idea to allow for flexible cleanup.\r\n{\r\n\t//noinspection JSMismatchedCollectionQueryUpdate\r\n\tprivate _partArray:any[];\r\n\tprivate _latest:string|null; // AKA persistentString\r\n\r\n\tconstructor(...initial:any[])\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._latest = null;\r\n\t\t_._partArray = [];\r\n\t\t_.appendThese(initial);\r\n\t}\r\n\r\n\tprivate appendSingle(item:any):void\r\n\t{\r\n\t\tif(item!=null)\r\n\t\t{\r\n\t\t\tconst _ = this;\r\n\t\t\t_._latest = null;\r\n\t\t\tswitch(typeof item)\r\n\t\t\t{\r\n\t\t\t\tcase Type.OBJECT:\r\n\t\t\t\tcase Type.FUNCTION:\r\n\t\t\t\t\titem = item.toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t_._partArray.push(item); // Other primitive types can keep their format since a number or boolean is a smaller footprint than a string.\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tappendThese(items:any[]):StringBuilder\r\n\t{\r\n\t\tconst _ = this;\r\n\t\titems.forEach(s=> _.appendSingle(s));\r\n\t\treturn _;\r\n\t}\r\n\r\n\tappend(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendThese(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLine(...items:any[]):StringBuilder\r\n\t{\r\n\t\tthis.appendLines(items);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tappendLines(items:any[]):StringBuilder\r\n\t{\r\n\t\tconst _ = this;\r\n\t\titems.forEach(\r\n\t\t\ti=>\r\n\t\t\t{\r\n\t\t\t\tif(i!=null)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.appendSingle(i);\r\n\t\t\t\t\t_._partArray.push(\"\\r\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\treturn _;\r\n\t}\r\n\r\n\t/** /// These methods can only efficiently be added if not using a single array.\r\n\t insert(index: number, value: string, count: number = 1): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\r\n\t remove(startIndex:number, length:number): StringBuilder\r\n\t {\r\n\r\n\t}\r\n\t /**/\r\n\r\n\tget isEmpty()\r\n\t{\r\n\t\treturn this._partArray.length===0;\r\n\t}\r\n\r\n\ttoString()\r\n\t{\r\n\t\tlet latest = this._latest;\r\n\t\tif(!latest==null)\r\n\t\t\tthis._latest = latest = this._partArray.join();\r\n\r\n\t\treturn latest;\r\n\t}\r\n\r\n\tjoin(delimiter:string):string\r\n\t{\r\n\t\treturn this._partArray.join(delimiter);\r\n\t}\r\n\r\n\tclear():void\r\n\t{\r\n\t\tthis._partArray.length = 0;\r\n\t\tthis._latest = null;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.clear();\r\n\t}\r\n\r\n}\r\n\r\nexport default StringBuilder;"]}