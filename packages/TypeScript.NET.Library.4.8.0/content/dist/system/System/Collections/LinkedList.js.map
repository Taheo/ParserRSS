{"version":3,"sources":["System/Collections/LinkedList.ts"],"names":[],"mappings":"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","file":"LinkedList.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://msdn.microsoft.com/en-us/library/he2s3bh7%28v=vs.110%29.aspx\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../Compare\";\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {ILinkedListNode, ILinkedNode, INodeWithValue} from \"./ILinkedListNode\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {EqualityComparison, PredicateWithIndex, ActionWithIndex} from \"../FunctionTypes\";\r\nimport {ILinkedList} from \"./ILinkedList\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n/*****************************\r\n * IMPORTANT NOTES ABOUT PERFORMANCE:\r\n * http://jsperf.com/simulating-a-queue\r\n *\r\n * Adding to an array is very fast, but modifying is slow.\r\n * LinkedList wins when modifying contents.\r\n * http://stackoverflow.com/questions/166884/array-versus-linked-list\r\n *****************************/\r\n\r\n/*\r\n * An internal node is used to manage the order without exposing underlying link chain to the consumer.\r\n */\r\nclass InternalNode<T>\r\nimplements ILinkedNode<InternalNode<T>>, INodeWithValue<T>\r\n{\r\n\tconstructor(\r\n\t\tpublic value:T,\r\n\t\tpublic previous?:InternalNode<T>|null,\r\n\t\tpublic next?:InternalNode<T>|null)\r\n\t{\r\n\t}\r\n\r\n\texternal?:ILinkedListNode<T>;\r\n\r\n\tassertDetached():true|never\r\n\t{\r\n\t\tif(this.next || this.previous)\r\n\t\t\tthrow new InvalidOperationException(\r\n\t\t\t\t\"Adding a node that is already placed.\");\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nfunction ensureExternal<T>(\r\n\tnode:InternalNode<T>|null|undefined,\r\n\tlist:LinkedList<T>):ILinkedListNode<T>|null\r\n{\r\n\tif(!node)\r\n\t\treturn null;\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tlet external = node.external;\r\n\tif(!external)\r\n\t\tnode.external = external = new LinkedListNode<T>(list, node);\r\n\r\n\treturn external || null;\r\n}\r\n\r\nfunction getInternal<T>(node:ILinkedListNode<T>, list:LinkedList<T>):InternalNode<T>\r\n{\r\n\tif(!node)\r\n\t\tthrow new ArgumentNullException(\"node\");\r\n\tif(!list)\r\n\t\tthrow new ArgumentNullException(\"list\");\r\n\r\n\tif(node.list!=list)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node does not belong to this list.\");\r\n\r\n\tlet n:InternalNode<T> = (<any>node)._nodeInternal;\r\n\tif(!n)\r\n\t\tthrow new InvalidOperationException(\r\n\t\t\t\"Provided node is not valid.\");\r\n\r\n\treturn n;\r\n}\r\n\r\nfunction detachExternal(node:InternalNode<any>):void\r\n{\r\n\tif(node)\r\n\t{\r\n\t\tconst e:any = node.external;\r\n\t\tif(e)\r\n\t\t{\r\n\t\t\te._list = VOID0;\r\n\t\t\te._nodeInternal = VOID0;\r\n\t\t}\r\n\t\tnode.external = VOID0;\r\n\t}\r\n}\r\n\r\nexport class LinkedList<T>\r\nextends CollectionBase<T> implements ILinkedList<T>\r\n{\r\n\tprivate readonly _listInternal:LinkedNodeList<InternalNode<T>>;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(VOID0, equalityComparer);\r\n\t\tthis._listInternal = new LinkedNodeList<InternalNode<T>>();\r\n\t\tthis._importEntries(source);\r\n\t}\r\n\r\n\tprotected assertVersion(version:number):true|never\r\n\t{\r\n\t\tif(this._listInternal)\r\n\t\t\treturn this._listInternal.assertVersion(version);\r\n\t\telse // In case it's been disposed.\r\n\t\t\treturn super.assertVersion(version);\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst l = this._listInternal;\r\n\t\t(<any>this)._listInternal = null;\r\n\t\tl.dispose();\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li ? li.unsafeCount : 0;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._listInternal.addNode(new InternalNode(entry));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\tconst _      = this,\r\n\t\t      equals = _._equalityComparer,\r\n\t\t      list   = _._listInternal;\r\n\t\tlet removedCount = 0;\r\n\r\n\t\tlist.forEach(node=>\r\n\t\t{\r\n\t\t\tif(node && equals(entry, node.value) && _._removeNodeInternal(node))\r\n\t\t\t\tremovedCount++;\r\n\r\n\t\t\treturn removedCount<max;\r\n\t\t}, true /* override versioning check */);\r\n\r\n\t\treturn removedCount;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst list = this._listInternal;\r\n\t\tlist.forEach(node=>detachExternal(node));\r\n\t\treturn list.clear();\r\n\t}\r\n\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number;\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number;\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>,\r\n\t\tuseCopy:boolean = false):number\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._listInternal.forEach((node, i)=>action(<any>node.value, i));\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\t// #region IEnumerable<T>\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn LinkedNodeList.valueEnumeratorFrom<T>(<any>this._listInternal);\r\n\t}\r\n\r\n\t// #endregion\r\n\r\n\tprivate _findFirst(entry:T):InternalNode<T>|null\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tconst\r\n\t\t\t_      = this,\r\n\t\t\tequals = _._equalityComparer;\r\n\r\n\t\tlet next:any = _._listInternal && _._listInternal.first;\r\n\t\twhile(next)\r\n\t\t{\r\n\t\t\tif(equals(entry, next.value))\r\n\t\t\t\treturn next;\r\n\t\t\tnext = next.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate _findLast(entry:T):InternalNode<T>|null\r\n\t{\r\n\t\t//noinspection UnnecessaryLocalVariableJS\r\n\t\tconst\r\n\t\t\t_      = this,\r\n\t\t\tequals = _._equalityComparer;\r\n\r\n\t\tlet prev:any = _._listInternal && _._listInternal.last;\r\n\t\twhile(prev)\r\n\t\t{\r\n\t\t\tif(equals(entry, prev.value))\r\n\t\t\t\treturn prev;\r\n\t\t\tprev = prev.previous;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tremoveOnce(entry:T):boolean\r\n\t{\r\n\t\treturn this.remove(entry, 1)!==0;\r\n\t}\r\n\r\n\tget first():ILinkedListNode<T>|null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li && ensureExternal(li.first, this);\r\n\t}\r\n\r\n\tget firstValue():T | undefined\r\n\t{\r\n\t\tconst li = this._listInternal, node = li && li.first;\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\tget last():ILinkedListNode<T>|null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn ensureExternal(li.last, this);\r\n\t}\r\n\r\n\tget lastValue():T | undefined\r\n\t{\r\n\t\tconst li = this._listInternal, node = li && li.last;\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\t// get methods are available for convenience but is an n*index operation.\r\n\r\n\r\n\tgetValueAt(index:number):T | undefined\r\n\t{\r\n\t\tconst li = this._listInternal, node = li && li.getNodeAt(index);\r\n\t\treturn node ? node.value : VOID0;\r\n\t}\r\n\r\n\tgetNodeAt(index:number):ILinkedListNode<T> | null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li && ensureExternal(li.getNodeAt(index), this);\r\n\t}\r\n\r\n\tfind(entry:T):ILinkedListNode<T> | null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li && ensureExternal(this._findFirst(entry), this);\r\n\t}\r\n\r\n\tfindLast(entry:T):ILinkedListNode<T> | null\r\n\t{\r\n\t\tconst li = this._listInternal;\r\n\t\treturn li && ensureExternal(this._findLast(entry), this);\r\n\t}\r\n\r\n\taddFirst(entry:T):void\r\n\t{\r\n\t\tthis.assertModifiable();\r\n\t\tthis._listInternal.addNodeBefore(new InternalNode(entry));\r\n\t\tthis._signalModification(true);\r\n\t}\r\n\r\n\taddLast(entry:T):void\r\n\t{\r\n\t\tthis.add(entry);\r\n\t}\r\n\r\n\tprivate _removeNodeInternal(node:InternalNode<T>|null|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(node && _._listInternal.removeNode(node))\r\n\t\t{\r\n\t\t\tdetachExternal(node);\r\n\t\t\t_._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.last);\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(_._listInternal.getNodeAt(index));\r\n\t}\r\n\r\n\t// Returns true if successful and false if not found (already removed).\r\n\tremoveNode(node:ILinkedListNode<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\treturn _._removeNodeInternal(getInternal(node, _));\r\n\t}\r\n\r\n\taddBefore(before:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._listInternal.addNodeBefore(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(before, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\taddAfter(after:ILinkedListNode<T>, entry:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\t\t_._listInternal.addNodeAfter(\r\n\t\t\tnew InternalNode(entry),\r\n\t\t\tgetInternal(after, _)\r\n\t\t);\r\n\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n}\r\n\r\n// Use an internal node class to prevent mucking up the LinkedList.\r\nclass LinkedListNode<T> implements ILinkedListNode<T>, IDisposable\r\n{\r\n\tconstructor(\r\n\t\tprivate _list:LinkedList<T>,\r\n\t\tprivate _nodeInternal:InternalNode<T>)\r\n\t{\r\n\t}\r\n\r\n\tprivate throwIfDetached():void\r\n\t{\r\n\t\tif(!this._list)\r\n\t\t\tthrow new Error(\"This node has been detached from its list and is no longer valid.\");\r\n\t}\r\n\r\n\tget list():LinkedList<T>\r\n\t{\r\n\t\treturn this._list;\r\n\t}\r\n\r\n\tget previous():ILinkedListNode<T>|null\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn ensureExternal(this._nodeInternal.previous, this._list);\r\n\t}\r\n\r\n\tget next():ILinkedListNode<T>|null\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn ensureExternal(this._nodeInternal.next, this._list);\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\treturn this._nodeInternal.value;\r\n\t}\r\n\r\n\tset value(v:T)\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._nodeInternal.value = v;\r\n\t}\r\n\r\n\taddBefore(entry:T):void\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._list.addBefore(this, entry);\r\n\t}\r\n\r\n\taddAfter(entry:T):void\r\n\t{\r\n\t\tthis.throwIfDetached();\r\n\t\tthis._list.addAfter(this, entry);\r\n\t}\r\n\r\n\r\n\tremove():void\r\n\t{\r\n\t\tconst _:any = this;\r\n\t\tconst list = _._list;\r\n\t\tif(list) list.removeNode(this);\r\n\t\t_._list = VOID0;\r\n\t\t_._nodeInternal = VOID0;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.remove();\r\n\t}\r\n\r\n}\r\n\r\nexport default LinkedList;\r\n"]}