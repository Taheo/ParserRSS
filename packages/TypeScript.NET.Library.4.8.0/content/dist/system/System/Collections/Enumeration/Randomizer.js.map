{"version":3,"sources":["System/Collections/Enumeration/Randomizer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;YAQA;;;eAGG;YACH;gBAAmC,8BAAuB;gBAKzD,oBACC,MAA2B,EACV,WAA2B;oBAA3B,4BAAA,EAAA,mBAA2B;oBAF7C,YAIC,iBAAO,SAGP;oBALiB,iBAAW,GAAX,WAAW,CAAgB;oBAG5C,KAAI,CAAC,OAAO,GAAG,oBAAO,CAAC,MAAM,CAAC,CAAC;oBAC/B,KAAI,CAAC,QAAQ,GAAG,KAAI,CAAC,OAAO,CAAC,MAAM,CAAC;;gBACrC,CAAC;gBAES,iCAAY,GAAtB;oBAEC,IAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;oBACxB,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAC,CAAC,CAAC;gBACzB,CAAC;gBAED,6BAAQ,GAAR;oBAEC,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,EAAE,CAAA,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CACpB,CAAC;wBACA,IACC,CAAC,GAAG,IAAI,CAAC,QAAQ,EAAE,iBAAiB;wBACpC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,CAAC,CAAC,EAAE,YAAY;wBAC7C,CAAC,GAAG,IAAI,CAAC,OAAO,EAChB,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EACZ,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;wBAGd,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,qCAAqC;wBACrD,CAAC,CAAC,IAAI,CAAC,GAAQ,IAAI,CAAC,CAAC,4BAA4B;wBAEjD,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,GAAC,EAAE,IAAE,CAAC,CAAC;4BAClC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;wBAEjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;wBACrB,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC;wBACnB,CAAC,CAAC,cAAc,EAAE,CAAC;wBACnB,MAAM,CAAC,IAAI,CAAC;oBACb,CAAC;oBAED,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAED,0BAAK,GAAL;oBAEC,EAAE,CAAA,CAAC,IAAI,CAAC,WAAW,CAAC,CACpB,CAAC;wBACA,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;4BAAC,MAAM,gDAAgD,CAAC;wBACzE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;wBACpC,iBAAM,KAAK,WAAE,CAAC;oBACf,CAAC;oBACD,IAAI;wBACH,MAAM,uEAAuE,CAAC;gBAChF,CAAC;gBAED,4BAAO,GAAP;oBAEC,iBAAM,KAAK,WAAE,CAAC,CAAC,qCAAqC;oBACpD,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC;oBACf,IAAK,CAAC,OAAO,GAAG,IAAI,CAAC;oBAC3B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;oBACpB,EAAE,CAAA,CAAC,CAAC,CAAC;wBAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;gBACpB,CAAC;gBAES,iCAAY,GAAtB;oBAEC,MAAM,CAAC,KAAK,CAAC;gBACd,CAAC;gBAGF,iBAAC;YAAD,CA3EA,AA2EC,CA3EkC,2CAAoB,GA2EtD;;QAAA,CAAC","file":"Randomizer.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport {ForEachEnumerable} from \"./ForEachEnumerable\";\r\nimport {toArray} from \"./Enumerator\";\r\n\r\n/**\r\n * Creates a randomized version of the source.\r\n * Note: An iterator will always require a arrayCopy (buffer) to pull random results one by one.\r\n */\r\nexport class Randomizer<T> extends SimpleEnumerableBase<T>\r\n{\r\n\tprivate readonly _buffer:T[];\r\n\tprivate _pointer:number;\r\n\r\n\tconstructor(\r\n\t\tsource:ForEachEnumerable<T>,\r\n\t\tprivate readonly _allowReset:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._buffer = toArray(source);\r\n\t\tthis._pointer = this._buffer.length;\r\n\t}\r\n\r\n\tprotected _canMoveNext():boolean\r\n\t{\r\n\t\tconst p = this._pointer;\r\n\t\treturn !isNaN(p) && p>0;\r\n\t}\r\n\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._canMoveNext())\r\n\t\t{\r\n\t\t\tconst\r\n\t\t\t\tp = this._pointer, // Where were we?\r\n\t\t\t\ti = Math.floor(Math.random()*p), // Pick one.\r\n\t\t\t\tb = this._buffer,\r\n\t\t\t\tvalue = b[i],\r\n\t\t\t\tlast = p - 1;\r\n\r\n\r\n\t\t\tb[i] = b[last]; // Take the last one and put it here.\r\n\t\t\tb[last] = <any>null; // clear possible reference.\r\n\r\n\t\t\tif(!this._allowReset && last%32==0) // Shrink?\r\n\t\t\t\tb.length = last;\r\n\r\n\t\t\tthis._pointer = last;\r\n\t\t\t_._current = value;\r\n\t\t\t_.incrementIndex();\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tif(this._allowReset)\r\n\t\t{\r\n\t\t\tif(!this._buffer) throw \"Randomizer cannot be reset.  Already disposed.\";\r\n\t\t\tthis._pointer = this._buffer.length;\r\n\t\t\tsuper.reset();\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow \"Reset not allowed.  To allow for reset, specify so when constructing.\";\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.reset(); // Note... don't call this.reset() :|\r\n\t\tlet b = this._buffer;\r\n\t\t(<any>this)._buffer = null;\r\n\t\tthis._pointer = NaN;\r\n\t\tif(b) b.length = 0;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n}"]}