{"version":3,"sources":["System/Collections/Dictionaries/Dictionary.ts"],"names":[],"mappings":"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","file":"Dictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Original: http://linqjs.codeplex.com/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../../Compare\";\r\nimport {Type} from \"../../Types\";\r\nimport {EnumeratorBase} from \"../Enumeration/EnumeratorBase\";\r\nimport {LinkedNodeList} from \"../LinkedNodeList\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {getIdentifier} from \"./getIdentifier\";\r\nimport {IEnumerator} from \"../Enumeration/IEnumerator\";\r\nimport {ILinkedNode} from \"../ILinkedListNode\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport DictionaryBase from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n\r\nexport interface IHashEntry<TKey, TValue>\r\nextends ILinkedNode<IHashEntry<TKey, TValue>>, IKeyValuePair<TKey,TValue>\r\n{\r\n\r\n}\r\n// LinkedList for Dictionary\r\nclass HashEntry<TKey, TValue>\r\nimplements IHashEntry<TKey, TValue>\r\n{\r\n\tconstructor(\r\n\t\tpublic key:TKey,\r\n\t\tpublic value:TValue,\r\n\t\tpublic previous?:IHashEntry<TKey, TValue>|null,\r\n\t\tpublic next?:IHashEntry<TKey, TValue>|null)\r\n\t{\r\n\r\n\t}\r\n}\r\n\r\ntype HashEntryLinkedList<TKey,TValue> = LinkedNodeList<IHashEntry<TKey,IHashEntry<TKey,TValue>>>;\r\n\r\nlet linkedListPool:ObjectPool<LinkedNodeList<any>>;\r\nfunction linkedNodeList():LinkedNodeList<any>;\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):void;\r\n//noinspection JSUnusedLocalSymbols\r\nfunction linkedNodeList(recycle?:LinkedNodeList<any>):LinkedNodeList<any>|void\r\n{\r\n\tif(!linkedListPool)\r\n\t\tlinkedListPool\r\n\t\t\t= new ObjectPool<LinkedNodeList<any>>(20, ()=>new LinkedNodeList<any>(), r=>r.clear());\r\n\tif(!recycle) return linkedListPool.take();\r\n\tlinkedListPool.add(recycle);\r\n}\r\n\r\n\r\n\r\nexport class Dictionary<TKey, TValue> extends DictionaryBase<TKey, TValue>\r\n{\r\n\t// Retains the order...\r\n\tprivate readonly _entries:LinkedNodeList<IHashEntry<TKey, TValue>>;\r\n\tprivate readonly _buckets:IMap<LinkedNodeList<IHashEntry<TKey, IHashEntry<TKey, TValue>>>>;\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _keyGenerator?:Selector<TKey,string|number|symbol>)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._entries = linkedNodeList();\r\n\t\tthis._buckets = {};\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst _ = (<any>this);\r\n\t\t_._entries = null;\r\n\t\t_._buckets = null;\r\n\t\t_._hashGenerator = null;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._entries && this._entries.unsafeCount || 0;\r\n\t}\r\n\r\n\tprivate _getBucket(\r\n\t\thash:string|number|symbol,\r\n\t\tcreateIfMissing?:boolean):HashEntryLinkedList<TKey,TValue>|null\r\n\t{\r\n\t\tif(hash==null || !createIfMissing && !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tif(!Type.isPrimitiveOrSymbol(hash))\r\n\t\t\tconsole.warn(\"Key type not indexable and could cause Dictionary to be extremely slow.\");\r\n\r\n\t\tconst buckets = this._buckets;\r\n\t\tlet bucket = buckets[hash];\r\n\r\n\t\tif(createIfMissing && !bucket)\r\n\t\t\tbuckets[hash]\r\n\t\t\t\t= bucket\r\n\t\t\t\t= linkedNodeList();\r\n\r\n\t\treturn bucket || null;\r\n\t}\r\n\r\n\tprivate _getBucketEntry(\r\n\t\tkey:TKey,\r\n\t\thash?:string|number|symbol,\r\n\t\tbucket?:HashEntryLinkedList<TKey,TValue>|null):IHashEntry<TKey,IHashEntry<TKey,TValue>>|null\r\n\t{\r\n\t\tif(key==null || !this.getCount())\r\n\t\t\treturn null;\r\n\r\n\t\tconst _          = this,\r\n\t\t      comparer   = _._keyGenerator,\r\n\t\t      compareKey = comparer ? comparer(key) : key;\r\n\r\n\t\tif(!bucket) bucket = _._getBucket(hash || getIdentifier(compareKey));\r\n\r\n\t\treturn bucket\r\n\t\t\t&& (comparer\r\n\t\t\t\t? bucket.find(e=>comparer!(e.key)===compareKey)\r\n\t\t\t\t: bucket.find(e=>e.key===compareKey)\r\n\t\t\t);\r\n\t}\r\n\r\n\tprotected _getEntry(key:TKey):IHashEntry<TKey,TValue>|null\r\n\t{\r\n\t\tconst e = this._getBucketEntry(key);\r\n\t\treturn e && e.value;\r\n\t}\r\n\r\n\tgetValue(key:TKey):TValue|undefined\r\n\t{\r\n\t\tconst e = this._getEntry(key);\r\n\t\treturn e ? e.value : VOID0;\r\n\t}\r\n\r\n\tprotected _setValueInternal(key:TKey, value:TValue|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst buckets    = _._buckets,\r\n\t\t      entries    = _._entries,\r\n\t\t      compareKey = _._keyGenerator ? _._keyGenerator(key) : key,\r\n\t\t      hash       = getIdentifier(compareKey);\r\n\t\tlet bucket = _._getBucket(hash);\r\n\t\tconst bucketEntry = bucket && _._getBucketEntry(key, hash, bucket);\r\n\r\n\t\t// Entry exits? Delete or update\r\n\t\tif(bucketEntry)\r\n\t\t{\r\n\t\t\tconst b = <HashEntryLinkedList<TKey,TValue>>bucket;\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tlet x = b.removeNode(bucketEntry),\r\n\t\t\t\t    y = entries.removeNode(bucketEntry.value);\r\n\r\n\t\t\t\tif(x && !b.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete buckets[hash];\r\n\t\t\t\t\tlinkedNodeList(b);\r\n\t\t\t\t\tbucket = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(x!==y) throw \"Entries and buckets are out of sync.\";\r\n\r\n\t\t\t\tif(x) return true;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// We don't expose the internal hash entries so replacing the value is ok.\r\n\t\t\t\tconst old = bucketEntry.value.value;\r\n\t\t\t\tbucketEntry.value.value = value;\r\n\t\t\t\treturn !areEqual(value, old);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse if(value!==VOID0)\r\n\t\t{\r\n\t\t\tif(!bucket) bucket = _._getBucket(hash, true);\r\n\t\t\tif(!bucket) throw new Error(`\"${hash}\" cannot be added to lookup table.`);\r\n\t\t\tlet entry = new HashEntry(key, value);\r\n\t\t\tentries.addNode(entry);\r\n\t\t\tbucket.addNode(new HashEntry(key, entry));\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst buckets = _._buckets;\r\n\r\n\t\t// Ensure reset and clean...\r\n\t\tfor(let key in buckets)\r\n\t\t{\r\n\t\t\tif(buckets.hasOwnProperty(key))\r\n\t\t\t{\r\n\t\t\t\tlet bucket = buckets[key];\r\n\t\t\t\tdelete buckets[key];\r\n\t\t\t\tlinkedNodeList(bucket);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn _._entries.clear();\r\n\t}\r\n\r\n\t/*\r\n\t * Note: super.getEnumerator() works perfectly well,\r\n\t * but enumerating the internal linked node list is much more efficient.\r\n\t */\r\n\tgetEnumerator():IEnumerator<IKeyValuePair<TKey, TValue>>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet ver:number, currentEntry:IHashEntry<TKey, TValue>|null;\r\n\t\treturn new EnumeratorBase<IKeyValuePair<TKey, TValue>>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\tver = _._version;\r\n\t\t\t\tcurrentEntry = _._entries.first;\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\tif(currentEntry)\r\n\t\t\t\t{\r\n\t\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\t\t_.assertVersion(ver);\r\n\t\t\t\t\tconst result = {key: currentEntry.key, value: currentEntry.value};\r\n\t\t\t\t\tcurrentEntry = currentEntry.next || null;\r\n\t\t\t\t\treturn yielder.yieldReturn(result);\r\n\t\t\t\t}\r\n\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tprotected getKeys():TKey[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst result:TKey[] = [];\r\n\t\tlet e:any = _._entries && _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.key);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst result:TValue[] = [];\r\n\t\tlet e:any = _._entries && _._entries.first;\r\n\t\twhile(e)\r\n\t\t{\r\n\t\t\tresult.push(e.value);\r\n\t\t\te = e.next;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n\r\nexport default Dictionary;"]}