{"version":3,"sources":["System/Collections/Array/Sort.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;YAaA,WAAc,SAAS;gBACT,eAAK,GAAG,qBAAS,CAAC;gBAG/B,eACC,MAAgB,EAChB,QAA4C,EAC5C,KAAuC,EACvC,eAAyB;oBADzB,sBAAA,EAAA,yBAAuC;oBACvC,gCAAA,EAAA,qBAAyB;oBAEzB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,+BAAc,CAAC,QAAQ,EAAE,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC;gBACtE,CAAC;gBAPe,eAAK,QAOpB,CAAA;YACF,CAAC,EAZa,SAAS,KAAT,SAAS,QAYtB;;QACD,CAAC","file":"Sort.js","sourcesContent":["import {createComparer} from \"./Sorting/createComparer\";\r\nimport {quickSort} from \"./Sorting/quickSort\";\r\nimport {Order} from \"../Sorting/Order\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\nimport {Primitive} from \"../../Primitive\";\r\n\r\nexport {\r\n\tquickSort,\r\n\tcreateComparer,\r\n\tcreateComparer as default, // Allow for default import.\r\n\tcreateComparer as by // Alias for Sort.by(...) instead of Sort.createComparer\r\n}\r\n\r\nexport module ArraySort {\r\n\texport const quick = quickSort;\r\n\r\n\r\n\texport function using<TSource, TSelect extends Primitive>(\r\n\t\ttarget:TSource[],\r\n\t\tselector:Selector<TSource,TSelect|TSelect[]>,\r\n\t\torder:Order | Order[] = Order.Ascending,\r\n\t\tequivalentToNaN:any = NaN):TSource[]\r\n\t{\r\n\t\treturn target.sort(createComparer(selector, order, equivalentToNaN));\r\n\t}\r\n}\r\n"]}