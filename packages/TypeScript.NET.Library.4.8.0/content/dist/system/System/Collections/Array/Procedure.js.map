{"version":3,"sources":["System/Collections/Array/Procedure.ts"],"names":[],"mappings":"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","file":"Procedure.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\n\r\nexport function sum(source:ArrayLike<number>, ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn 0;\r\n\r\n\tlet result = 0;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tfor(let n of <number[]>source)\r\n\t\t{\r\n\t\t\tif(!isNaN(n)) result += n;\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor(let n of <number[]>source)\r\n\t\t{\r\n\t\t\tif(isNaN(n)) return NaN;\r\n\t\t\tresult += n;\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nexport function average(source:ArrayLike<number>, ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tlet result = 0, count:number;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tcount = 0;\r\n\t\tfor(let n of <number[]>source)\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tresult += n;\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tcount = source.length;\r\n\t\tfor(let n of <number[]>source)\r\n\t\t{\r\n\t\t\tif(isNaN(n)) return NaN;\r\n\t\t\tresult += n;\r\n\t\t}\r\n\t}\r\n\r\n\treturn (!count || isNaN(result)) ? NaN : (result/count);\r\n}\r\n\r\nexport function product(source:ArrayLike<number>, ignoreNaN:boolean = false):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tlet result = 1;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tlet found = false;\r\n\t\tfor(let n of <number[]>source)\r\n\t\t{\r\n\t\t\tif(!isNaN(n)){\r\n\t\t\t\tresult *= n;\r\n\t\t\t\tfound = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!found)\r\n\t\t\treturn NaN;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor(let n of <number[]>source)\r\n\t\t{\r\n\t\t\tif(isNaN(n)) return NaN;\r\n\t\t\tresult *= n;\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Takes the first number and divides it by all following.\r\n * @param source\r\n * @param ignoreNaN Will cause this skip any NaN values.\r\n * @returns {number}\r\n */\r\nexport function quotient(source:ArrayLike<number>, ignoreNaN:boolean = false):number\r\n{\r\n\tconst len = source ? source.length : 0;\r\n\tif(len<2)\r\n\t\treturn NaN;\r\n\r\n\tlet result = source[0];\r\n\r\n\tlet found = false;\r\n\tfor(let i=1;i<len;i++)\r\n\t{\r\n\t\tlet n = source[i];\r\n\t\tif(n===0)\r\n\t\t{\r\n\t\t\treturn NaN;\r\n\t\t}\r\n\t\tif(isNaN(n))\r\n\t\t{\r\n\t\t\tif(!ignoreNaN)\r\n\t\t\t{\r\n\t\t\t\treturn NaN;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tresult /= n;\r\n\t\t\tif(!found) found = true;\r\n\t\t}\r\n\t}\r\n\r\n\treturn found ? result : NaN;\r\n}\r\n\r\n\r\nfunction ifSet(\r\n\tsource:ArrayLike<number>,\r\n\tstart:number,\r\n\tignoreNaN:boolean,\r\n\tpredicate:(n:number, result:number) => boolean):number\r\n{\r\n\tif(!source || !source.length)\r\n\t\treturn NaN;\r\n\r\n\tlet result = start;\r\n\tif(ignoreNaN)\r\n\t{\r\n\t\tlet found = false;\r\n\t\tfor(let n of <number[]>source)\r\n\t\t{\r\n\t\t\tif(!isNaN(n))\r\n\t\t\t{\r\n\t\t\t\tif(predicate(n, result))\r\n\t\t\t\t\tresult = n;\r\n\t\t\t\tif(!found) found = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(!found)\r\n\t\t\treturn NaN;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor(let n of <number[]>source)\r\n\t\t{\r\n\t\t\tif(isNaN(n))\r\n\t\t\t\treturn NaN;\r\n\r\n\t\t\tif(predicate(n, result))\r\n\t\t\t\tresult = n;\r\n\t\t}\r\n\t}\r\n\treturn result;\r\n\r\n}\r\n\r\nexport function min(source:ArrayLike<number>, ignoreNaN:boolean = false):number\r\n{\r\n\treturn ifSet(source, +Infinity, ignoreNaN, (n, result) => n<result);\r\n}\r\n\r\nexport function max(source:ArrayLike<number>, ignoreNaN:boolean = false):number\r\n{\r\n\treturn ifSet(source, -Infinity, ignoreNaN, (n, result) => n>result);\r\n}\r\n"]}