{"version":3,"sources":["System/Integer.ts"],"names":[],"mappings":";;;IAQA,iBAAwB,CAAQ;QAE/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC;;;;;;;;;;;;;YAED,WAAc,OAAO;gBAEP,kBAAU,GAAU,UAAU,CAAC;gBAC/B,iBAAS,GAAU,gBAAgB,CAAC;gBACjD,IAAM,MAAM,GAAoB,QAAQ,CAAC;gBAEzC;;;;;mBAKG;gBACH,iBAAwB,CAAQ;oBAE/B,IAAM,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;oBACrB,EAAE,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACX,MAAM,sBAAsB,CAAC;oBAC9B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,CAAC,IAAI,MAAM,KAAI,CAAC,CAAC,CAAC;wBAC3B,MAAM,0CAA0C,CAAC;oBAClD,MAAM,CAAC,MAAM,CAAC;gBACf,CAAC;gBARe,eAAO,UAQtB,CAAA;gBAGD;;;;mBAIG;gBACH,YAAmB,CAAQ;oBAE1B,MAAM,CAAC,OAAO,CAAC,KAAG,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC9D,CAAC;gBAHe,UAAE,KAGjB,CAAA;gBAED;;;;mBAIG;gBACH,iBAAwB,CAAQ;oBAE/B,MAAM,CAAC,CAAC,KAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACpB,CAAC;gBAHe,eAAO,UAGtB,CAAA;gBAGD;;;;;mBAKG;gBACH,gBAAuB,CAAQ,EAAE,YAAoB;oBAEpD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;oBACd,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC;wBACL,MAAM,IAAI,qCAAiB,CAAC,YAAY,IAAI,GAAG,EAAE,oBAAoB,CAAC,CAAC;oBACxE,MAAM,CAAC,CAAC,CAAC;gBACV,CAAC;gBANe,cAAM,SAMrB,CAAA;gBAED;;;;;mBAKG;gBACH,6BAAoC,CAAQ,EAAE,YAAoB;oBAEjE,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,IAAE,CAAC,CAAC;oBACxC,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC;wBACL,MAAM,IAAI,yDAA2B,CAAC,YAAY,IAAI,GAAG,EAAE,CAAC,EAAE,wDAAwD,CAAC,CAAC;oBACzH,MAAM,CAAC,CAAC,CAAC;gBACV,CAAC;gBANe,2BAAmB,sBAMlC,CAAA;gBAED;;;;;mBAKG;gBACH,wBAA+B,CAAQ,EAAE,YAAoB;oBAE5D,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,GAAC,CAAC,CAAC;oBACvC,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC;wBACL,MAAM,IAAI,yDAA2B,CAAC,YAAY,IAAI,GAAG,EAAE,CAAC,EAAE,4BAA4B,CAAC,CAAC;oBAC7F,MAAM,CAAC,CAAC,CAAC;gBACV,CAAC;gBANe,sBAAc,iBAM7B,CAAA;YAEF,CAAC,EAtFa,OAAO,KAAP,OAAO,QAsFpB;;iCAEc,OAAO;QACtB,CAAC","file":"Integer.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"./Exceptions/ArgumentOutOfRangeException\";\r\nimport {TypeValue} from \"./TypeValue\";\r\n\r\nexport function Integer(n:number):number\r\n{\r\n\treturn Math.floor(n);\r\n}\r\n\r\nexport module Integer\r\n{\r\n\texport const MAX_32_BIT:number = 2147483647;\r\n\texport const MAX_VALUE:number = 9007199254740991;\r\n\tconst NUMBER:TypeValue.Number = \"number\";\r\n\r\n\t/**\r\n\t * Converts any number to its 32bit counterpart.\r\n\t * Throws if conversion is not possible.\r\n\t * @param n\r\n\t * @returns {number}\r\n\t */\r\n\texport function as32Bit(n:number):number\r\n\t{\r\n\t\tconst result = n | 0;\r\n\t\tif(isNaN(n))\r\n\t\t\tthrow \"'n' is not a number.\";\r\n\t\tif (n!== -1 && result=== -1)\r\n\t\t\tthrow \"'n' is too large to be a 32 bit integer.\";\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns true if the value is an integer.\r\n\t * @param n\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn typeof n===NUMBER && isFinite(n) && n===Math.floor(n);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value is within a 32 bit range.\r\n\t * @param n\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function is32Bit(n:number):boolean\r\n\t{\r\n\t\treturn n===(n | 0);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Throws if not an integer.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assert(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = is(n);\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be a integer.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws if less than zero.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assertZeroOrGreater(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = assert(n, argumentName) && n>=0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws if not greater than zero.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assertPositive(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = assert(n, argumentName) && n>0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}