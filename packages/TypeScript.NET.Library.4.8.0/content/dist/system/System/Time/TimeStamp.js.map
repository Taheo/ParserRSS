{"version":3,"sources":["System/Time/TimeStamp.ts"],"names":[],"mappings":";;;;;;;;;;;YAUA;;eAEG;YACH;gBAGC,mBACiB,IAAW,EACX,KAAqB,EACrB,GAAc,EACd,IAAe,EACf,MAAiB,EACjB,MAAiB,EACjB,WAAsB,EACtB,IAAe;oBAG/B,wDAAwD;oBARxC,oBAAA,EAAA,OAAc;oBACd,qBAAA,EAAA,QAAe;oBACf,uBAAA,EAAA,UAAiB;oBACjB,uBAAA,EAAA,UAAiB;oBACjB,4BAAA,EAAA,eAAsB;oBACtB,qBAAA,EAAA,QAAe;oBAPf,SAAI,GAAJ,IAAI,CAAO;oBACX,UAAK,GAAL,KAAK,CAAgB;oBACrB,QAAG,GAAH,GAAG,CAAW;oBACd,SAAI,GAAJ,IAAI,CAAW;oBACf,WAAM,GAAN,MAAM,CAAW;oBACjB,WAAM,GAAN,MAAM,CAAW;oBACjB,gBAAW,GAAX,WAAW,CAAW;oBACtB,SAAI,GAAJ,IAAI,CAAW;oBAK/B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACrB,CAAC;gBAED,4BAAQ,GAAR;oBAEC,IAAM,CAAC,GAAG,IAAI,CAAC;oBACf,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,IAAI,GAAC,uBAAqB,CAAC,CAAC;gBACnH,CAAC;gBAEM,cAAI,GAAX,UAAY,CAAgB;oBAE3B,EAAE,CAAA,CAAC,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,IAAI,YAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;wBACxD,CAAC,GAAe,CAAE,CAAC,QAAQ,EAAE,CAAC;oBAC/B,EAAE,CAAA,CAAC,CAAC,YAAY,IAAI,CAAC,CACrB,CAAC;wBACA,MAAM,CAAC,IAAI,SAAS,CACnB,CAAC,CAAC,WAAW,EAAE,EACf,CAAC,CAAC,QAAQ,EAAE,EACZ,CAAC,CAAC,OAAO,EAAE,EACX,CAAC,CAAC,QAAQ,EAAE,EACZ,CAAC,CAAC,UAAU,EAAE,EACd,CAAC,CAAC,UAAU,EAAE,EACd,CAAC,CAAC,eAAe,EAAE,CACnB,CAAC;oBACH,CAAC;oBACD,IAAI,CACJ,CAAC;wBACA,MAAM,KAAK,CAAC,oBAAoB,CAAC,CAAC;oBACnC,CAAC;gBACF,CAAC;gBACF,gBAAC;YAAD,CA9CA,AA8CC,IAAA;;iCAEc,SAAS;QAAC,CAAC","file":"TimeStamp.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../Types\";\r\nimport {ITimeStamp} from \"./ITimeStamp\";\r\nimport {Ticks} from \"./HowMany\";\r\nimport {IDateTime} from \"./IDateTime\";\r\nimport {Gregorian} from \"./Calendars\";\r\n\r\n/**\r\n * An alternative to Date or DateTime.  Is a model representing the exact date and time.\r\n */\r\nexport class TimeStamp implements ITimeStamp, IDateTime\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic readonly year:number,\r\n\t\tpublic readonly month:Gregorian.Month,\r\n\t\tpublic readonly day:number = 1,\r\n\t\tpublic readonly hour:number = 0,\r\n\t\tpublic readonly minute:number = 0,\r\n\t\tpublic readonly second:number = 0,\r\n\t\tpublic readonly millisecond:number = 0,\r\n\t\tpublic readonly tick:number = 0)\r\n\t{\r\n\r\n\t\t// Add validation or properly carry out of range values?\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick/Ticks.Per.Millisecond);\r\n\t}\r\n\r\n\tstatic from(d:Date|IDateTime):TimeStamp\r\n\t{\r\n\t\tif(!(d instanceof Date) && Type.hasMember(d, 'toJsDate'))\r\n\t\t\td = (<IDateTime>d).toJsDate();\r\n\t\tif(d instanceof Date)\r\n\t\t{\r\n\t\t\treturn new TimeStamp(\r\n\t\t\t\td.getFullYear(),\r\n\t\t\t\td.getMonth(),\r\n\t\t\t\td.getDate(),\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds()\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow Error('Invalid date type.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default TimeStamp;"]}