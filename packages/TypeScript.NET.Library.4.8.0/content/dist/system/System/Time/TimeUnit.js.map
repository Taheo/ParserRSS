{"version":3,"sources":["System/Time/TimeUnit.ts"],"names":[],"mappings":";;;;;;;YAQA,WAAY,QAAQ;gBAEnB,yCAAK,CAAA;gBACL,uDAAY,CAAA;gBACZ,6CAAO,CAAA;gBACP,6CAAO,CAAA;gBACP,yCAAK,CAAA;gBACL,uCAAI,CAAA;YACL,CAAC,EARW,QAAQ,KAAR,QAAQ,QAQnB,CAAC,aAAa;;YAEf,WAAc,QAAQ;gBAGrB,wBACC,KAAY,EACZ,KAAsC;oBAAtC,sBAAA,EAAA,QAAiB,QAAQ,CAAC,YAAY;oBAEtC,8CAA8C;oBAC9C,MAAM,CAAA,CAAC,KAAK,CAAC,CACb,CAAC;wBACA,KAAK,QAAQ,CAAC,IAAI;4BACjB,KAAK,IAAI,YAAa,CAAC;wBACxB,KAAK,QAAQ,CAAC,KAAK;4BAClB,KAAK,IAAI,aAAgB,CAAC;wBAC3B,KAAK,QAAQ,CAAC,OAAO;4BACpB,KAAK,IAAI,eAAkB,CAAC;wBAC7B,KAAK,QAAQ,CAAC,OAAO;4BACpB,KAAK,IAAI,iBAAuB,CAAC;wBAClC,KAAK,QAAQ,CAAC,YAAY;4BACzB,MAAM,CAAC,KAAK,CAAC;wBACd,KAAK,QAAQ,CAAC,KAAK;4BAClB,MAAM,CAAC,KAAK,GAAC,uBAAqB,CAAC;wBACpC;4BACC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;oBACvC,CAAC;gBACF,CAAC;gBAtBe,uBAAc,iBAsB7B,CAAA;gBAED,0BACC,EAAS,EACT,KAAc;oBAEd,MAAM,CAAA,CAAC,KAAK,CAAC,CACb,CAAC;wBACA,KAAK,QAAQ,CAAC,IAAI;4BACjB,MAAM,CAAC,EAAE,GAAC,kBAAoB,CAAC;wBAChC,KAAK,QAAQ,CAAC,KAAK;4BAClB,MAAM,CAAC,EAAE,GAAC,kBAAqB,CAAC;wBACjC,KAAK,QAAQ,CAAC,OAAO;4BACpB,MAAM,CAAC,EAAE,GAAC,kBAAuB,CAAC;wBACnC,KAAK,QAAQ,CAAC,OAAO;4BACpB,MAAM,CAAC,EAAE,GAAC,iBAAuB,CAAC;wBACnC,KAAK,QAAQ,CAAC,YAAY;4BACzB,MAAM,CAAC,EAAE,CAAC;wBACX,KAAK,QAAQ,CAAC,KAAK;4BAClB,MAAM,CAAC,EAAE,GAAC,uBAAqB,CAAC;wBACjC;4BACC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;oBACvC,CAAC;gBACF,CAAC;gBArBe,yBAAgB,mBAqB/B,CAAA;gBAED,cAAqB,QAAsB,EAAE,IAAa;oBAEzD,MAAM,CAAC,QAAQ,IAAI,gBAAgB,CAAC,QAAQ,CAAC,oBAAoB,EAAE,EAAE,IAAI,CAAC,CAAC;gBAC5E,CAAC;gBAHe,aAAI,OAGnB,CAAA;gBAGD,qBAA4B,IAAa;oBAExC,EAAE,CAAA,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,GAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,GAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAG,IAAI,CAAC;wBACtF,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;oBAEtC,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBANe,oBAAW,cAM1B,CAAA;YAEF,CAAC,EAhEa,QAAQ,KAAR,QAAQ,QAgErB;;YAED,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iCAET,QAAQ;QACvB,CAAC","file":"TimeUnit.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Hours, Minutes, Seconds, Milliseconds, Ticks} from \"./HowMany\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\n\r\nexport enum TimeUnit\r\n{\r\n\tTicks,\r\n\tMilliseconds,\r\n\tSeconds,\r\n\tMinutes,\r\n\tHours,\r\n\tDays\r\n} // Earth Days\r\n\r\nexport module TimeUnit\r\n{\r\n\r\n\texport function toMilliseconds(\r\n\t\tvalue:number,\r\n\t\tunits:TimeUnit = TimeUnit.Milliseconds):number\r\n\t{\r\n\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\tvalue *= Hours.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\tvalue *= Minutes.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\tvalue *= Seconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\tvalue *= Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn value;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn value/Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function fromMilliseconds(\r\n\t\tms:number,\r\n\t\tunits:TimeUnit)\r\n\t{\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\treturn ms/Milliseconds.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\treturn ms/Milliseconds.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\treturn ms/Milliseconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\treturn ms/Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn ms;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn ms*Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function from(quantity:ITimeQuantity, unit:TimeUnit):number\r\n\t{\r\n\t\treturn quantity && fromMilliseconds(quantity.getTotalMilliseconds(), unit);\r\n\t}\r\n\r\n\r\n\texport function assertValid(unit:TimeUnit):true|never\r\n\t{\r\n\t\tif(isNaN(unit) || unit>TimeUnit.Days || unit<TimeUnit.Ticks || Math.floor(unit)!==unit)\r\n\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nObject.freeze(TimeUnit);\r\n\r\nexport default TimeUnit;\r\n"]}