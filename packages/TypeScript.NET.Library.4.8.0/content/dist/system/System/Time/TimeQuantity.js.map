{"version":3,"sources":["System/Time/TimeQuantity.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;YAaA;;eAEG;YACH;gBAGC,sBAAsB,SAAoB;oBAApB,0BAAA,EAAA,aAAoB;oBAApB,cAAS,GAAT,SAAS,CAAW;oBAEzC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACpB,CAAC;gBAED,8DAA8D;gBAC9D,2CAAoB,GAApB;oBAEC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;gBACvB,CAAC;gBAMD,sBAAI,mCAAS;oBAJb;;;uBAGG;yBACH;wBAEC,MAAM,CAAC,iBAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC,CAAC;oBAChD,CAAC;;;mBAAA;gBAED;;;;mBAIG;gBACH,6BAAM,GAAN,UAAO,KAAmB;oBAEzB,MAAM,CAAC,kBAAQ,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBAChG,CAAC;gBAED;;;;mBAIG;gBACH,gCAAS,GAAT,UAAU,KAAmB;oBAE5B,MAAM,CAAC,iBAAO,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;gBAC/F,CAAC;gBAIS,kCAAW,GAArB;oBAAA,iBAmBC;oBAjBA,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACtB,EAAE,CAAA,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,CAC1B,CAAC;wBACA,IAAI,CAAC,MAAM,GAAG,WAAI,CAAC,MAAM,CAAC;4BAEzB,IAAM,EAAE,GAAG,KAAI,CAAC,oBAAoB,EAAE,CAAC;4BAEvC,MAAM,CAAmB,MAAM,CAAC,MAAM,CAAC;gCACtC,KAAK,EAAE,EAAE,GAAC,uBAAqB;gCAC/B,YAAY,EAAE,EAAE;gCAChB,OAAO,EAAE,EAAE,GAAC,iBAAuB;gCACnC,OAAO,EAAE,EAAE,GAAC,kBAAuB;gCACnC,KAAK,EAAE,EAAE,GAAC,kBAAqB;gCAC/B,IAAI,EAAE,EAAE,GAAC,kBAAoB;6BAC7B,CAAC,CAAC;wBACJ,CAAC,CAAC,CAAC;oBACJ,CAAC;gBACF,CAAC;gBAMD,sBAAI,+BAAK;oBAJT;;;uBAGG;yBACH;wBAEC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;oBAC1B,CAAC;;;mBAAA;gBAED;;;;mBAIG;gBACH,+BAAQ,GAAR,UAAS,KAAc;oBAEtB,MAAM,CAAC,mBAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,KAAK,CAAC,CAAC;gBACtE,CAAC;gBACF,mBAAC;YAAD,CApFA,AAoFC,IAAA;;iCAEc,YAAY;QAAC,CAAC","file":"TimeQuantity.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual, compare} from \"../Compare\";\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {Milliseconds, Ticks} from \"./HowMany\";\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport {IComparable} from \"../IComparable\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport {ITimeMeasurement} from \"./ITimeMeasurement\";\r\nimport {Lazy} from \"../Lazy\";\r\n\r\n/**\r\n * This class provides a simple means for storing and calculating time quantities.\r\n */\r\nexport class TimeQuantity implements IEquatable<ITimeQuantity>, IComparable<ITimeQuantity>, ITimeQuantity\r\n{\r\n\r\n\tconstructor(protected _quantity:number = 0)\r\n\t{\r\n\t\tthis._resetTotal();\r\n\t}\r\n\r\n\t// Provides an overridable mechanism for extending this class.\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\t/**\r\n\t * +1, 0, or -1 depending on the time direction.\r\n\t * @returns {number}\r\n\t */\r\n\tget direction():number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance and return true if the amount of time is the same.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:ITimeQuantity):boolean\r\n\t{\r\n\t\treturn areEqual(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance.\r\n\t * @param other\r\n\t * @returns {CompareResult}\r\n\t */\r\n\tcompareTo(other:ITimeQuantity):number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\tprotected _total:Lazy<ITimeMeasurement>;\r\n\r\n\tprotected _resetTotal():void\r\n\t{\r\n\t\tconst t = this._total;\r\n\t\tif(!t || t.isValueCreated)\r\n\t\t{\r\n\t\t\tthis._total = Lazy.create(() =>\r\n\t\t\t{\r\n\t\t\t\tconst ms = this.getTotalMilliseconds();\r\n\r\n\t\t\t\treturn <ITimeMeasurement>Object.freeze({\r\n\t\t\t\t\tticks: ms*Ticks.Per.Millisecond,\r\n\t\t\t\t\tmilliseconds: ms,\r\n\t\t\t\t\tseconds: ms/Milliseconds.Per.Second,\r\n\t\t\t\t\tminutes: ms/Milliseconds.Per.Minute,\r\n\t\t\t\t\thours: ms/Milliseconds.Per.Hour,\r\n\t\t\t\t\tdays: ms/Milliseconds.Per.Day,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an object with all units exposed as totals.\r\n\t * @returns {ITimeMeasurement}\r\n\t */\r\n\tget total():ITimeMeasurement\r\n\t{\r\n\t\treturn this._total.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the total amount of time measured in the requested TimeUnit.\r\n\t * @param units\r\n\t * @returns {number}\r\n\t */\r\n\tgetTotal(units:TimeUnit):number\r\n\t{\r\n\t\treturn TimeUnit.fromMilliseconds(this.getTotalMilliseconds(), units);\r\n\t}\r\n}\r\n\r\nexport default TimeQuantity;"]}