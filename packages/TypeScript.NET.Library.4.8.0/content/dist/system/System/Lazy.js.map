{"version":3,"sources":["System/Lazy.ts"],"names":[],"mappings":"AAAA;;;GAGG;;;;;;;;;;;;;;8BAHH;;;eAGG;YAMH,oCAAoC;YAC9B,SAAS,GAAG,iBAAe,CAAC;YAGlC,0EAA0E;YAC1E;gBAA6B,wBAAe;gBAG3C,cAAY,YAAoB,EAAE,cAA8B,EAAE,UAA0B;oBAA1D,+BAAA,EAAA,sBAA8B;oBAAE,2BAAA,EAAA,kBAA0B;oBAA5F,YAEC,kBAAM,YAAY,EAAE,cAAc,EAAE,UAAU,CAAC,SAG/C;oBAFA,KAAI,CAAC,qBAAqB,GAAG,MAAM,CAAC;oBACpC,KAAI,CAAC,eAAe,GAAG,KAAK,CAAC;;gBAC9B,CAAC;gBAED,sBAAI,gCAAc;yBAAlB;wBAEC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;oBAC/B,CAAC;;;mBAAA;gBAED,sBAAI,uBAAK;yBAAT;wBAEC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACxB,CAAC;;;mBAAA;gBAED,qBAAM,GAAN,UAAO,KAAa;oBAEnB,MAAM,CAAC,IAAI,IAAE,KAAK,CAAC;gBACpB,CAAC;gBAED,0BAAW,GAAX,UAAY,KAAa;oBAExB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,KAAG,KAAK,CAAC,KAAK,CAAC;gBACvD,CAAC;gBAEM,WAAM,GAAb,UAAiB,YAAoB,EAAE,cAA8B,EAAE,UAA0B;oBAA1D,+BAAA,EAAA,sBAA8B;oBAAE,2BAAA,EAAA,kBAA0B;oBAEhG,MAAM,CAAC,IAAI,IAAI,CAAI,YAAY,EAAE,cAAc,EAAE,UAAU,CAAC,CAAC;gBAC9D,CAAC;gBAEF,WAAC;YAAD,CAnCA,AAmCC,CAnC4B,2BAAY,GAmCxC;;YAED;gBAAuC,kCAAO;gBAE7C,wBAAY,YAAoB,EAAE,cAA8B;oBAA9B,+BAAA,EAAA,sBAA8B;oBAAhE,YAEC,kBAAM,YAAY,EAAE,cAAc,EAAE,IAAI,CAAC,SAEzC;oBADA,KAAI,CAAC,qBAAqB,GAAG,gBAAgB,CAAC;;gBAC/C,CAAC;gBAEM,qBAAM,GAAb,UAAiB,YAAoB,EAAE,cAA8B;oBAA9B,+BAAA,EAAA,sBAA8B;oBAEpE,MAAM,CAAC,IAAI,cAAc,CAAI,YAAY,EAAE,cAAc,CAAC,CAAC;gBAC5D,CAAC;gBACF,qBAAC;YAAD,CAZA,AAYC,CAZsC,IAAI,GAY1C;;iCAEc,IAAI;QAAC,CAAC","file":"Lazy.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ILazy} from \"./ILazy\";\r\nimport {Func} from \"./FunctionTypes\";\r\nimport {ResolverBase} from \"./ResolverBase\";\r\nimport __extendsImport from \"../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n// We need a non-resettable lazy to ensure it can be passed safely around.\r\nexport class Lazy<T> extends ResolverBase<T> implements ILazy<T>\r\n{\r\n\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false, allowReset:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, allowReset);\r\n\t\tthis._disposableObjectName = 'Lazy';\r\n\t\tthis._isValueCreated = false;\r\n\t}\r\n\r\n\tget isValueCreated():boolean\r\n\t{\r\n\t\treturn !!this._isValueCreated;\r\n\t}\r\n\r\n\tget value():T\r\n\t{\r\n\t\treturn this.getValue();\r\n\t}\r\n\r\n\tequals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this==other;\r\n\t}\r\n\r\n\tvalueEquals(other:Lazy<T>):boolean\r\n\t{\r\n\t\treturn this.equals(other) || this.value===other.value;\r\n\t}\r\n\r\n\tstatic create<T>(valueFactory:Func<T>, trapExceptions:boolean = false, allowReset:boolean = false)\r\n\t{\r\n\t\treturn new Lazy<T>(valueFactory, trapExceptions, allowReset);\r\n\t}\r\n\r\n}\r\n\r\nexport class ResettableLazy<T> extends Lazy<T>\r\n{\r\n\tconstructor(valueFactory:Func<T>, trapExceptions:boolean = false)\r\n\t{\r\n\t\tsuper(valueFactory, trapExceptions, true);\r\n\t\tthis._disposableObjectName = 'ResettableLazy';\r\n\t}\r\n\r\n\tstatic create<T>(valueFactory:Func<T>, trapExceptions:boolean = false)\r\n\t{\r\n\t\treturn new ResettableLazy<T>(valueFactory, trapExceptions);\r\n\t}\r\n}\r\n\r\nexport default Lazy;"]}