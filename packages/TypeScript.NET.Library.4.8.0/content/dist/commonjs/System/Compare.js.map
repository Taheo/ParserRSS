{"version":3,"sources":["System/Compare.ts"],"names":[],"mappings":"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","file":"Compare.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"./Types\";\r\nimport {Primitive} from \"./Primitive\";\r\nimport {IComparable} from \"./IComparable\";\r\nimport {CompareResult} from \"./CompareResult\";\r\nimport isTrueNaN = Type.isTrueNaN;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\n/**\r\n * Used for special comparison including NaN.\r\n * @param a\r\n * @param b\r\n * @param strict\r\n * @returns {boolean|any}\r\n */\r\nexport function areEqual(a:any, b:any, strict:boolean = true):boolean\r\n{\r\n\treturn a===b\r\n\t\t|| !strict && a==b\r\n\t\t|| isTrueNaN(a) && isTrueNaN(b);\r\n}\r\n\r\nconst COMPARE_TO = \"compareTo\";\r\n\r\n/**\r\n * Compares two comparable objects or primitives.\r\n * @param a\r\n * @param b\r\n */\r\nexport function compare<T>(a:IComparable<T>, b:IComparable<T>):number;\r\nexport function compare<T extends Primitive>(a:T, b:T, strict?:boolean):CompareResult;\r\nexport function compare(a:any, b:any, strict:boolean = true):CompareResult\r\n{\r\n\r\n\tif(areEqual(a, b, strict))\r\n\t\treturn CompareResult.Equal;\r\n\r\n\tif(a && Type.hasMember(a, COMPARE_TO))\r\n\t\treturn a.compareTo(b); // If a has compareTo, use it.\r\n\telse if(b && Type.hasMember(b, COMPARE_TO))\r\n\t\treturn -b.compareTo(a); // a doesn't have compareTo? check if b does and invert.\r\n\r\n\t// Allow for special inequality..\r\n\r\n\tif(a>b || strict && (a===0 && b==0 || a===null && b===VOID0))\r\n\t\treturn CompareResult.Greater;\r\n\r\n\tif(b>a || strict && (b===0 && a==0 || b===null && a===VOID0))\r\n\t\treturn CompareResult.Less;\r\n\r\n\treturn NaN;\r\n}\r\n\r\n/**\r\n * Determines if two primitives are equal or if two objects have the same key/value combinations.\r\n * @param a\r\n * @param b\r\n * @param nullEquivalency If true, null/undefined will be equivalent to an empty object {}.\r\n * @param extraDepth\r\n * @returns {boolean}\r\n */\r\nexport function areEquivalent(\r\n\ta:any, b:any, nullEquivalency:boolean = true,\r\n\textraDepth:number = 0):boolean\r\n{\r\n\r\n\t// Take a step by step approach to ensure efficiency.\r\n\tif(areEqual(a, b, true)) return true;\r\n\r\n\tif(a==null || b==null)\r\n\t{\r\n\t\tif(!nullEquivalency) return false;\r\n\r\n\t\tif(Type.isObject(a))\r\n\t\t{\r\n\t\t\treturn !Object.keys(a).length;\r\n\t\t}\r\n\r\n\t\tif(Type.isObject(b))\r\n\t\t{\r\n\t\t\treturn !Object.keys(b).length;\r\n\t\t}\r\n\r\n\t\treturn a==null && b==null;\r\n\t}\r\n\r\n\tif(Type.isObject(a) && Type.isObject(b))\r\n\t{\r\n\r\n\t\tconst aKeys = Object.keys(a), bKeys = Object.keys(b), len = aKeys.length;\r\n\t\tif(len!=bKeys.length)\r\n\t\t\treturn false;\r\n\r\n\t\taKeys.sort();\r\n\t\tbKeys.sort();\r\n\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tlet key = aKeys[i];\r\n\t\t\tif(key!==bKeys[i] || !areEqual(a[key], b[key], true)) return false;\r\n\t\t}\r\n\r\n\t\t// Doesn't track circular references but allows for controlling the amount of recursion.\r\n\t\tif(extraDepth>0)\r\n\t\t{\r\n\r\n\t\t\tfor(let key of aKeys)\r\n\t\t\t{\r\n\t\t\t\tif(!areEquivalent(a[key], b[key], nullEquivalency, extraDepth - 1)) return false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n"]}