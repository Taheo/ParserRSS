{"version":3,"sources":["System/Collections/Enumeration/IndexEnumerator.ts"],"names":[],"mappings":";;AAAA;;;GAGG;AACH,mDAAgD;AAChD,4CAA+C;AAC/C,oCAAoC;AACpC,IAAM,SAAS,GAAG,iBAAe,CAAC;AAUlC;IAAwC,mCAAiB;IAGxD,yBACC,aAA4C;QAD7C,iBA2DC;QAvDA,IAAI,MAA+B,CAAC;QACpC,QAAA,kBACC;YAEC,MAAM,GAAG,aAAa,EAAE,CAAC;YACzB,EAAE,CAAA,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAC3B,CAAC;gBACA,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;gBAC1B,EAAE,CAAA,CAAC,GAAG,GAAC,CAAC,CAAC;oBACR,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBAEnD,EAAE,CAAA,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oBACjB,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;gBAE9C,EAAE,CAAA,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,KAAG,CAAC,CAAC;oBACzB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;gBAC5D,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC7B,EAAE,CAAA,CAAC,CAAC,OAAO,CAAC;oBACX,OAAO,GAAG,CAAC,CAAC;gBACb,IAAI,CAAC,EAAE,CAAA,CAAC,OAAO,IAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACpC,MAAM,IAAI,KAAK,CAAC,yCAAyC,GAAG,OAAO,GAAG,gBAAgB,CAAC,CAAC;gBACzF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;gBAEzB,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;gBACvB,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC;oBACR,IAAI,GAAG,CAAC,CAAC;gBACV,IAAI,CAAC,EAAE,CAAA,CAAC,IAAI,IAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBAC9B,MAAM,IAAI,KAAK,CAAC,sCAAsC,GAAG,IAAI,GAAG,gBAAgB,CAAC,CAAC;gBACnF,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;YACpB,CAAC;QACF,CAAC,EAED,UAAC,OAAO;YAEP,IAAI,GAAG,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;YACxD,EAAE,CAAA,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;gBACrB,MAAM,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YAC7B,IAAM,OAAO,GAAW,MAAM,CAAC,OAAO,CAAC;YACvC,EAAE,CAAA,CAAC,MAAM,CAAC,OAAO,IAAE,IAAI,CAAC;gBAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,mEAAmE;YAChH,EAAE,CAAA,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC;gBAAC,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,mEAAmE;YACrG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;YAC9C,MAAM,CAAC,CAAC,OAAO,GAAC,GAAG,IAAI,OAAO,IAAE,CAAC,CAAC;kBAC/B,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;kBAC3C,OAAO,CAAC,UAAU,EAAE,CAAC;QACzB,CAAC,EAED;YAEC,EAAE,CAAA,CAAC,MAAM,CAAC,CACV,CAAC;gBACA,MAAM,CAAC,MAAM,GAAQ,IAAI,CAAC;YAC3B,CAAC;QACF,CAAC,CACD,SAAC;QACF,KAAI,CAAC,UAAU,GAAG,KAAK,CAAC;;IACzB,CAAC;IACF,sBAAC;AAAD,CA/DA,AA+DC,CA/DuC,+BAAc,GA+DrD;AA/DY,0CAAe;AAiE5B,kBAAe,eAAe,CAAC","file":"IndexEnumerator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {EnumeratorBase} from \"./EnumeratorBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport interface IndexEnumeratorSource<T> {\r\n\tsource:{ [index:number]:T };\r\n\tlength:number;\r\n\tstep?:number\r\n\r\n\tpointer?:number;\r\n}\r\n\r\nexport class IndexEnumerator<T> extends EnumeratorBase<T>\r\n{\r\n\r\n\tconstructor(\r\n\t\tsourceFactory:() => IndexEnumeratorSource<T>)\r\n\t{\r\n\r\n\t\tlet source:IndexEnumeratorSource<T>;\r\n\t\tsuper(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = sourceFactory();\r\n\t\t\t\tif(source && source.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst len = source.length;\r\n\t\t\t\t\tif(len<0) // Null is allowed but will exit immediately.\r\n\t\t\t\t\t\tthrow new Error(\"length must be zero or greater\");\r\n\r\n\t\t\t\t\tif(!isFinite(len))\r\n\t\t\t\t\t\tthrow new Error(\"length must finite number\");\r\n\r\n\t\t\t\t\tif(len && source.step===0)\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (0).\");\r\n\t\t\t\t\tlet pointer = source.pointer;\r\n\t\t\t\t\tif(!pointer)\r\n\t\t\t\t\t\tpointer = 0;\r\n\t\t\t\t\telse if(pointer!=Math.floor(pointer))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator pointer value (\" + pointer + \") has decimal.\");\r\n\t\t\t\t\tsource.pointer = pointer;\r\n\r\n\t\t\t\t\tlet step = source.step;\r\n\t\t\t\t\tif(!step)\r\n\t\t\t\t\t\tstep = 1;\r\n\t\t\t\t\telse if(step!=Math.floor(step))\r\n\t\t\t\t\t\tthrow new Error(\"Invalid IndexEnumerator step value (\" + step + \") has decimal.\");\r\n\t\t\t\t\tsource.step = step;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tlet len = (source && source.source) ? source.length : 0;\r\n\t\t\t\tif(!len || isNaN(len))\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\tconst current = <number>source.pointer;\r\n\t\t\t\tif(source.pointer==null) source.pointer = 0; // should never happen but is in place to negate compiler warnings.\r\n\t\t\t\tif(!source.step) source.step = 1; // should never happen but is in place to negate compiler warnings.\r\n\t\t\t\tsource.pointer = source.pointer + source.step;\r\n\t\t\t\treturn (current<len && current>=0)\r\n\t\t\t\t\t? yielder.yieldReturn(source.source[current])\r\n\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t},\r\n\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif(source)\r\n\t\t\t\t{\r\n\t\t\t\t\tsource.source = <any>null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t\tthis._isEndless = false;\r\n\t}\r\n}\r\n\r\nexport default IndexEnumerator;"]}