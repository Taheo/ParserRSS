{"version":3,"sources":["System/Collections/Array/initialize.ts"],"names":[],"mappings":";;AAAA;;;GAGG;AACH,yCAAsC;AACtC;;;;;GAKG;AACH,oBAA8B,MAAa;IAE1C,iBAAO,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IACjC,0GAA0G;IAC1G,IAAI,KAAS,CAAC;IACd,EAAE,CAAA,CAAC,MAAM,GAAC,KAAK,CAAC;QACf,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;IAC3B,IAAI,CACJ,CAAC;QACA,KAAK,GAAG,EAAE,CAAC;QACX,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACd,CAAC;AAbD,gCAaC","file":"initialize.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Integer} from \"../../Integer\";\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\tInteger.assert(length, 'length');\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tlet array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}"]}