{"version":3,"sources":["System/Collections/Dictionaries/StringKeyDictionary.ts"],"names":[],"mappings":"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","file":"StringKeyDictionary.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../../Compare\";\r\nimport {IStringKeyDictionary, IMap} from \"./IDictionary\";\r\nimport {IKeyValuePair} from \"../../KeyValuePair\";\r\nimport {DictionaryBase} from \"./DictionaryBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport class StringKeyDictionary<TValue>\r\nextends DictionaryBase<string, TValue> implements IStringKeyDictionary<TValue>\r\n{\r\n\r\n\tprotected _onDispose() {\r\n\t\tsuper._onDispose();\r\n\t\t(<any>this)._map = null;\r\n\t}\r\n\r\n\tprivate _count:number = 0;\r\n\tprivate readonly _map:IMap<TValue> = {};\r\n\r\n\tprotected _getEntry(key:string):IKeyValuePair<string,TValue>|null\r\n\t{\r\n\t\treturn !this.containsKey(key)\r\n\t\t\t? null : {\r\n\t\t\tkey: key,\r\n\t\t\tvalue: this.getAssuredValue(key)\r\n\t\t}\r\n\t}\r\n\r\n\tcontainsKey(key:string):boolean\r\n\t{\r\n\t\treturn key!=null\r\n\t\t\t&& this._count!=0\r\n\t\t\t&& this._map[key]!==VOID0;\r\n\t}\r\n\r\n\tcontainsValue(value:TValue):boolean\r\n\t{\r\n\t\tif(!this._count) return false;\r\n\t\tconst map = this._map;\r\n\t\tfor(let key in map)\r\n\t\t{\r\n\t\t\tif(map.hasOwnProperty(key) && areEqual(map[key], value))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tgetValue(key:string):TValue|undefined\r\n\t{\r\n\t\treturn key==null || !this._count\r\n\t\t\t? VOID0\r\n\t\t\t: this._map[key];\r\n\t}\r\n\r\n\r\n\tprotected _setValueInternal(key:string, value:TValue|undefined):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst map = _._map, old = map[key];\r\n\t\tif(old!==value)\r\n\t\t{\r\n\r\n\t\t\tif(value===VOID0)\r\n\t\t\t{\r\n\t\t\t\tif((key) in (map))\r\n\t\t\t\t{\r\n\t\t\t\t\tdelete map[key];\r\n\t\t\t\t\t_._count--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!map.hasOwnProperty(key))\r\n\t\t\t\t\t_._count++;\r\n\t\t\t\tmap[key] = value;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Returns true if any value is updated...\r\n\timportMap(values:IMap<TValue>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.handleUpdate(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tlet changed:boolean = false;\r\n\t\t\t\tfor(let key in values)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(values.hasOwnProperty(key) && _.setValue(key, values[key]))\r\n\t\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t\treturn changed;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\ttoMap(selector?:(key:string, value:TValue) => TValue):IMap<TValue>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst result:IMap<TValue> = {};\r\n\t\tif(_._count) for(let key in _._map)\r\n\t\t{\r\n\t\t\tif(_._map.hasOwnProperty(key)) // This simply satisfies inspection.\r\n\t\t\t{\r\n\t\t\t\tlet value = _._map[key];\r\n\t\t\t\tif(selector)\r\n\t\t\t\t\tvalue = selector(key, value);\r\n\t\t\t\tif(value!==VOID0)\r\n\t\t\t\t\tresult[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getKeys():string[]\r\n\t{\r\n\t\treturn Object.keys(this._map);\r\n\t}\r\n\r\n\tprotected getValues():TValue[]\r\n\t{\r\n\t\tif(!this._count) return [];\r\n\t\tconst result:any[] = Object.keys(this._map);\r\n\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t{\r\n\t\t\tresult[i] = this._map[result[i]];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default StringKeyDictionary;\r\n"]}