{"version":3,"sources":["System/TypeValidator.ts"],"names":[],"mappings":"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","file":"TypeValidator.js","sourcesContent":["/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n */\r\n/**\r\n * A descriptor is simply a JSON tree that either has an actual value or a type that identifies what the expect type should be at that leaf in the tree.\r\n *\r\n * var descriptor = {\r\n *      a : Object,\r\n *      b : String,\r\n *      c : {\r\n *          d : true ,\r\n *          e : Array,\r\n *          f : []\r\n *      },\r\n *      g : \"literal\"\r\n * }\r\n */\r\nimport {TypeInfo, Type} from \"./Types\";\r\nimport {areEqual} from \"./Compare\";\r\nimport __extendsImport from \"../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\nexport class TypeInfoHelper extends TypeInfo\r\n{\r\n\r\n\tprivate _value:any;\r\n\r\n\tconstructor(value:any)\r\n\t{\r\n\t\tsuper(value, self=>self._value = value);\r\n\t}\r\n\r\n\tcontains<TDescriptor>(descriptor:any):this is TDescriptor\r\n\t{\r\n\r\n\t\tlet value = this._value;\r\n\r\n\t\tif(value===descriptor)\r\n\t\t\treturn true;\r\n\r\n\t\tswitch(descriptor)\r\n\t\t{\r\n\t\t\tcase Function:\r\n\t\t\t\treturn this.isFunction;\r\n\t\t\tcase Object:\r\n\t\t\t\treturn this.isObject;\r\n\t\t\tcase Array:\r\n\t\t\t\treturn this.isArray;\r\n\t\t\tcase String:\r\n\t\t\t\treturn this.isString;\r\n\t\t\tcase Number:\r\n\t\t\t\treturn this.isNumber;\r\n\t\t\tcase Boolean:\r\n\t\t\t\treturn this.isBoolean;\r\n\t\t}\r\n\r\n\t\tif(this.type!= typeof descriptor || this.isPrimitive && !areEqual(value, descriptor))\r\n\t\t\treturn false;\r\n\r\n\t\t// Check array contents and confirm intersections.\r\n\t\tif(this.isArray && Type.isArrayLike(descriptor))\r\n\t\t{\r\n\t\t\tlet max = Math.min(descriptor.length, value.length);\r\n\r\n\t\t\tfor(let i = 0; i<max; i++)\r\n\t\t\t{\r\n\t\t\t\tif(areInvalid(value[i], descriptor[i]))\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(this.isObject)\r\n\t\t{\r\n\t\t\tlet targetKeys = Object.keys(value);\r\n\t\t\tlet dKeys = Object.keys(descriptor);\r\n\r\n\t\t\t// Quick check...\r\n\t\t\tif(dKeys.length>targetKeys.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t// Quick check #2...\r\n\t\t\tfor(let key of dKeys)\r\n\t\t\t{\r\n\t\t\t\tif(targetKeys.indexOf(key)== -1)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Final pass with recursive...\r\n\t\t\tfor(let key of dKeys)\r\n\t\t\t{\r\n\t\t\t\tif(areInvalid(value[key], descriptor[key]))\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nfunction areInvalid(v:any, d:any)\r\n{\r\n\tif(!areEqual(v, d))\r\n\t{\r\n\t\tlet memberType = new TypeInfoHelper(v);\r\n\t\tif(!memberType.contains(d))\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nexport class TypeValidator<T>\r\n{\r\n\tconstructor(private readonly _typeDescriptor:any)\r\n\t{\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\tisSubsetOf(o:any):o is T\r\n\t{\r\n\t\treturn (new TypeInfoHelper(o))\r\n\t\t\t.contains(this._typeDescriptor);\r\n\t}\r\n}\r\n\r\nexport default TypeValidator;\r\n\r\n"]}