{"version":3,"sources":["System/Utility/clone.js","System/Utility/clone.ts"],"names":["define","require","exports","Types_1","copy_1","clone","source","depth","Type","isObject","isArrayLike","result","copy","len","length","i","k","Object","defineProperty","value"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,WAAY,6BAA8B,SAAUC,EAASC,EAASC,EAASC,GACzG,YCQJ,SAAAC,GAA8BC,EAAwCC,GAErE,GAFqE,SAAAA,IAAAA,EAAA,GAElEA,EAAM,EACR,MAAOD,EAGR,KAAIH,EAAAK,KAAKC,SAASH,GACjB,MAAOA,EAER,IAAGH,EAAAK,KAAKE,YAAYJ,GACpB,CAEC,GAAMK,GAASP,EAAAQ,KAAKN,EACpB,IAAGC,EAAM,EAGR,IAAI,GADEM,GAAMP,EAAOQ,OACXC,EAAI,EAAGA,EAAEF,EAAKE,IAErBJ,EAAOI,GAAKV,EAAMM,EAAOI,GAAIR,EAAQ,EAGvC,OAAOI,GAIP,GAAMA,KACN,IAAGJ,EAAM,EAAG,IAAI,GAAIS,KAAUV,GAG7BK,EAAOK,GAAKX,EAAYC,EAAQU,GAAIT,EAAQ,EAE7C,OAAOI,GDtCLM,OAAOC,eAAehB,EAAS,cAAgBiB,OAAO,ICO1DjB,EAAAA,WAAAG","file":"clone.js","sourcesContent":["define([\"require\", \"exports\", \"../Types\", \"../Collections/Array/copy\"], function (require, exports, Types_1, copy_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function clone(source, depth) {\n        if (depth === void 0) { depth = 0; }\n        if (depth < 0)\n            return source;\n        // return primitives as is.\n        if (!Types_1.Type.isObject(source))\n            return source;\n        if (Types_1.Type.isArrayLike(source)) {\n            // Make a copy first just in case there's some weird references.\n            var result = copy_1.copy(source);\n            if (depth > 0) {\n                var len = source.length;\n                for (var i = 0; i < len; i++) {\n                    result[i] = clone(result[i], depth - 1);\n                }\n            }\n            return result;\n        }\n        else {\n            var result = {};\n            if (depth > 0)\n                for (var k in source) {\n                    //noinspection JSUnfilteredForInLoop\n                    result[k] = clone(source[k], depth - 1);\n                }\n            return result;\n        }\n    }\n    exports.default = clone;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../Types\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {JsonMap, JsonArray} from \"../../JSON\";\r\nimport {copy} from \"../Collections/Array/copy\";\r\n\r\nexport default function clone(source:Primitive | JsonMap | JsonArray, depth:number = 0):any\r\n{\r\n\tif(depth<0)\r\n\t\treturn source;\r\n\r\n\t// return primitives as is.\r\n\tif(!Type.isObject(source))\r\n\t\treturn source;\r\n\r\n\tif(Type.isArrayLike(source))\r\n\t{\r\n\t\t// Make a copy first just in case there's some weird references.\r\n\t\tconst result = copy(source);\r\n\t\tif(depth>0)\r\n\t\t{\r\n\t\t\tconst len = source.length;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = clone(result[i], depth - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tconst result:any = {};\r\n\t\tif(depth>0) for(let k in <any>source)\r\n\t\t{\r\n\t\t\t//noinspection JSUnfilteredForInLoop\r\n\t\t\tresult[k] = clone((<any>source)[k], depth - 1);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n}\r\n"]}