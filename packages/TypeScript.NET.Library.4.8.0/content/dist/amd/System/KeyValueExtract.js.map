{"version":3,"sources":["System/KeyValueExtract.js","System/KeyValueExtract.ts"],"names":["define","require","exports","ArgumentException_1","ArgumentNullException_1","Types_1","isKeyValuePair","kvp","hasOwnProperty","KEY","VALUE","assertKey","key","name","ITEM","assertNotUndefined","DOT","ArgumentNullException","assertTuple","tuple","length","ArgumentException","value","VOID0","CANNOT_BE_UNDEFINED","extractKeyValue","item","to","Type","isArrayLike","ITEM_1","INVALID_KVP_MESSAGE","ITEM_VALUE","Object","defineProperty"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,iCAAkC,qCAAsC,WAAY,SAAUC,EAASC,EAASC,EAAqBC,EAAyBC,GACxL,YCmBJ,SAAAC,GAA4CC,GAE3C,MAAOA,IAAOA,EAAIC,eAAeC,IAAQF,EAAIC,eAAeE,GAG7D,QAAAC,GAAgCC,EAAUC,GAGzC,GAHyC,SAAAA,IAAAA,EAAAC,GAEzCC,EAAmBH,EAAKC,EAAOG,EAAMP,GAC5B,OAANG,EACF,KAAM,IAAIR,GAAAa,sBAAsBJ,EAAOG,EAAMP,EAE9C,OAAOG,GAIR,QAAAM,GAA4BC,EAAsBN,GAEjD,GAFiD,SAAAA,IAAAA,EAAAC,GAEhC,GAAdK,EAAMC,OACR,KAAM,IAAIjB,GAAAkB,kBAAkBR,EAAM,2CAEnCF,GAAUQ,EAAM,GAAIN,GAIrB,QAAAE,GAAsCO,EAAST,GAE9C,GAAGS,IAAQC,EACV,KAAM,IAAIpB,GAAAkB,kBAAkBR,EAAMW,EAEnC,OAAOF,GAIR,QAAAG,GACCC,EACAC,GAIA,GAAIf,GAAUU,CACd,IAAGjB,EAAAuB,KAAKC,YAAYH,GAEnBR,EAAYQ,GACZd,EAAMc,EAAK,GACXJ,EAAQP,EAAmBW,EAAK,GAAII,OAEhC,CAAA,IAAGxB,EAA4BoB,GAOnC,KAAM,IAAIvB,GAAAkB,kBAAkBP,EAAMiB,EALlCnB,GAAMD,EAAUe,EAAKd,KACrBU,EAAQP,EAAmBW,EAAKJ,MAAOU,GAOxC,MAAOL,GAAGf,EAAKU,GD1EZW,OAAOC,eAAehC,EAAS,cAAgBoB,OAAO,GCO1D,IACCC,GAAmC,OACnCP,EAA6B,IAC7BP,EAA6B,MAC7BC,EAA6B,QAC7BI,EAA6B,OAC7BgB,EAA6BhB,EAAO,MACpCkB,EAA6BlB,EAAOE,EAAMN,EAC1CqB,EAA6B,8DAC7BP,EAA6B,yBAE9BtB,GAAAI,eAAAA,EAKAJ,EAAAS,UAAAA,EAUAT,EAAAgB,YAAAA,EASAhB,EAAAa,mBAAAA,EASAb,EAAAuB,gBAAAA,EA0BAvB,EAAAA,WAAeuB","file":"KeyValueExtract.js","sourcesContent":["define([\"require\", \"exports\", \"./Exceptions/ArgumentException\", \"./Exceptions/ArgumentNullException\", \"./Types\"], function (require, exports, ArgumentException_1, ArgumentNullException_1, Types_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var VOID0 = void 0, DOT = '.', KEY = 'key', VALUE = 'value', ITEM = 'item', ITEM_1 = ITEM + '[1]', ITEM_VALUE = ITEM + DOT + VALUE, INVALID_KVP_MESSAGE = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.', CANNOT_BE_UNDEFINED = 'Cannot equal undefined.';\n    function isKeyValuePair(kvp) {\n        return kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\n    }\n    exports.isKeyValuePair = isKeyValuePair;\n    function assertKey(key, name) {\n        if (name === void 0) { name = ITEM; }\n        assertNotUndefined(key, name + DOT + KEY);\n        if (key === null)\n            throw new ArgumentNullException_1.ArgumentNullException(name + DOT + KEY);\n        return key;\n    }\n    exports.assertKey = assertKey;\n    function assertTuple(tuple, name) {\n        if (name === void 0) { name = ITEM; }\n        if (tuple.length != 2)\n            throw new ArgumentException_1.ArgumentException(name, 'KeyValuePair tuples must be of length 2.');\n        assertKey(tuple[0], name);\n    }\n    exports.assertTuple = assertTuple;\n    function assertNotUndefined(value, name) {\n        if (value === VOID0)\n            throw new ArgumentException_1.ArgumentException(name, CANNOT_BE_UNDEFINED);\n        return value;\n    }\n    exports.assertNotUndefined = assertNotUndefined;\n    function extractKeyValue(item, to) {\n        var key, value;\n        if (Types_1.Type.isArrayLike(item)) {\n            assertTuple(item);\n            key = item[0];\n            value = assertNotUndefined(item[1], ITEM_1);\n        }\n        else if (isKeyValuePair(item)) {\n            key = assertKey(item.key);\n            value = assertNotUndefined(item.value, ITEM_VALUE);\n        }\n        else {\n            throw new ArgumentException_1.ArgumentException(ITEM, INVALID_KVP_MESSAGE);\n        }\n        return to(key, value);\n    }\n    exports.extractKeyValue = extractKeyValue;\n    exports.default = extractKeyValue;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"./Exceptions/ArgumentNullException\";\r\nimport {KeyValuePair, IKeyValuePair} from \"./KeyValuePair\";\r\nimport {Type} from \"./Types\";\r\n\r\nconst\r\n\tVOID0:undefined                  = void 0,\r\n\tDOT:string                 = '.',\r\n\tKEY:string                 = 'key',\r\n\tVALUE:string               = 'value',\r\n\tITEM:string                = 'item',\r\n\tITEM_1:string              = ITEM + '[1]',\r\n\tITEM_VALUE:string          = ITEM + DOT + VALUE,\r\n\tINVALID_KVP_MESSAGE:string = 'Invalid type.  Must be a KeyValuePair or Tuple of length 2.',\r\n\tCANNOT_BE_UNDEFINED:string = 'Cannot equal undefined.';\r\n\r\nexport function isKeyValuePair<TKey,TValue>(kvp:any):kvp is IKeyValuePair<TKey,TValue>\r\n{\r\n\treturn kvp && kvp.hasOwnProperty(KEY) && kvp.hasOwnProperty(VALUE);\r\n}\r\n\r\nexport function assertKey<TKey>(key:TKey, name:string = ITEM):TKey|never\r\n{\r\n\tassertNotUndefined(key, name + DOT + KEY);\r\n\tif(key===null)\r\n\t\tthrow new ArgumentNullException(name + DOT + KEY);\r\n\r\n\treturn key;\r\n}\r\n\r\n\r\nexport function assertTuple(tuple:ArrayLike<any>, name:string = ITEM):void|never\r\n{\r\n\tif(tuple.length!=2)\r\n\t\tthrow new ArgumentException(name, 'KeyValuePair tuples must be of length 2.');\r\n\r\n\tassertKey(tuple[0], name);\r\n}\r\n\r\n\r\nexport function assertNotUndefined<T>(value:T, name:string):T|never\r\n{\r\n\tif(value===VOID0)\r\n\t\tthrow new ArgumentException(name, CANNOT_BE_UNDEFINED);\r\n\r\n\treturn value;\r\n}\r\n\r\n\r\nexport function extractKeyValue<TKey, TValue, TResult>(\r\n\titem:KeyValuePair<TKey, TValue>,\r\n\tto:(key:TKey, value:TValue)=>TResult):TResult\r\n{\r\n\r\n\r\n\tlet key:TKey, value:TValue;\r\n\tif(Type.isArrayLike(item))\r\n\t{\r\n\t\tassertTuple(item);\r\n\t\tkey = item[0];\r\n\t\tvalue = assertNotUndefined(item[1], ITEM_1);\r\n\t}\r\n\telse if(isKeyValuePair<TKey,TValue>(item))\r\n\t{\r\n\t\tkey = assertKey(item.key);\r\n\t\tvalue = assertNotUndefined(item.value, ITEM_VALUE);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tthrow new ArgumentException(ITEM, INVALID_KVP_MESSAGE);\r\n\t}\r\n\r\n\treturn to(key, value);\r\n}\r\n\r\nexport default extractKeyValue;"]}