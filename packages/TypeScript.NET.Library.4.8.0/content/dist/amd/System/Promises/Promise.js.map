{"version":3,"sources":["System/Promises/Promise.js","System/Promises/Promise.ts"],"names":["define","require","exports","Types_1","deferImmediate_1","DisposableBase_1","InvalidOperationException_1","ArgumentException_1","ArgumentNullException_1","ObjectPool_1","Set_1","defer_1","ObjectDisposedException_1","extends_1","isPromise","value","hasMemberOfType","THEN","FUNCTION","resolve","resolver","promiseFactory","nextValue","Promise","wrap","handleResolution","p","v","ex","reject","handleResolutionMethods","targetFulfill","targetReject","handleDispatch","onFulfilled","onRejected","PromiseBase","thenThis","then","handleSyncIfPossible","thenSynchronous","newODE","ObjectDisposedException","Object","defineProperty","__extends","VOID0","NULL","PROMISE","PROMISE_STATE","TARGET","PromiseState","_super","_state","_result","_error","_this","call","this","_disposableObjectName","prototype","_onDispose","getState","get","enumerable","configurable","State","Pending","Fulfilled","Rejected","getResult","throwIfDisposed","getError","DisposableBase","result","error","thenAllowFatal","done","defer","delayFromNow","milliseconds","e","delayAfterResolve","isSettled","catchAllowFatal","fin","finallyAllowFatal","finallyThis","synchronous","f","deferImmediate","Resolvable","apply","arguments","state","Error","Resolved","PromiseWrapper","_target","ArgumentNullException","ArgumentException","t","forceSynchronous","resolveUsing","_waiting","push","pools","PromiseCallbacks","init","_resolvedCalled","InvalidOperationException","rejectHandler","reason","console","warn","fulfillHandler","_emitDisposalRejection","d","wasDisposed","_rejectInternal","_resolveInternal","r","o","_i","o_1","length","c","promise","recycle","o_2","throwIfSettled","ArrayPromise","map","transform","reduce","reduction","initialValue","fulfilled","PROMISE_COLLECTION","PromiseCollection","source","_source","slice","all","race","waitAll","pipe","previous","current","i","array","getPool","pool","ObjectPool","factory","take","add","group","first","rest","concat","promises","every","len","remaining","Set","cleanup","dispose","checkIfShouldResolve","count","onFulfill","remove","onReject","_loop_1","onResolved","_loop_2","filter","onResolve","promises_1","using","resolveAll","j","target","createFrom","freeze"],"mappings":"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","file":"Promise.js","sourcesContent":["define([\"require\", \"exports\", \"../Types\", \"../Threading/deferImmediate\", \"../Disposable/DisposableBase\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentException\", \"../Exceptions/ArgumentNullException\", \"../Disposable/ObjectPool\", \"../Collections/Set\", \"../Threading/defer\", \"../Disposable/ObjectDisposedException\", \"../../extends\"], function (require, exports, Types_1, deferImmediate_1, DisposableBase_1, InvalidOperationException_1, ArgumentException_1, ArgumentNullException_1, ObjectPool_1, Set_1, defer_1, ObjectDisposedException_1, extends_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    //noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var VOID0 = void 0, NULL = null, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\n    function isPromise(value) {\n        return Types_1.default.hasMemberOfType(value, THEN, Types_1.default.FUNCTION);\n    }\n    function resolve(value, resolver, promiseFactory) {\n        var nextValue = resolver\n            ? resolver(value)\n            : value;\n        return nextValue && isPromise(nextValue)\n            ? Promise.wrap(nextValue)\n            : promiseFactory(nextValue);\n    }\n    function handleResolution(p, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (p)\n                p.resolve(v);\n            return null;\n        }\n        catch (ex) {\n            if (p)\n                p.reject(ex);\n            return ex;\n        }\n    }\n    function handleResolutionMethods(targetFulfill, targetReject, value, resolver) {\n        try {\n            var v = resolver ? resolver(value) : value;\n            if (targetFulfill)\n                targetFulfill(v);\n        }\n        catch (ex) {\n            if (targetReject)\n                targetReject(ex);\n        }\n    }\n    function handleDispatch(p, onFulfilled, onRejected) {\n        if (p instanceof PromiseBase)\n            p.thenThis(onFulfilled, onRejected);\n        else\n            p.then(onFulfilled, onRejected);\n    }\n    function handleSyncIfPossible(p, onFulfilled, onRejected) {\n        if (p instanceof PromiseBase)\n            return p.thenSynchronous(onFulfilled, onRejected);\n        else\n            return p.then(onFulfilled, onRejected);\n    }\n    function newODE() {\n        return new ObjectDisposedException_1.ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\n    }\n    var PromiseState = (function (_super) {\n        __extends(PromiseState, _super);\n        function PromiseState(_state, _result, _error) {\n            var _this = _super.call(this) || this;\n            _this._state = _state;\n            _this._result = _result;\n            _this._error = _error;\n            _this._disposableObjectName = PROMISE_STATE;\n            return _this;\n        }\n        PromiseState.prototype._onDispose = function () {\n            this._state = VOID0;\n            this._result = VOID0;\n            this._error = VOID0;\n        };\n        PromiseState.prototype.getState = function () {\n            return this._state;\n        };\n        Object.defineProperty(PromiseState.prototype, \"state\", {\n            get: function () {\n                return this._state;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isPending\", {\n            get: function () {\n                return this.getState() === Promise.State.Pending;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isSettled\", {\n            get: function () {\n                return this.getState() != Promise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isFulfilled\", {\n            get: function () {\n                return this.getState() === Promise.State.Fulfilled;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PromiseState.prototype, \"isRejected\", {\n            get: function () {\n                return this.getState() === Promise.State.Rejected;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /*\n         * Providing overrides allows for special defer or lazy sub classes.\n         */\n        PromiseState.prototype.getResult = function () {\n            return this._result;\n        };\n        Object.defineProperty(PromiseState.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        PromiseState.prototype.getError = function () {\n            return this._error;\n        };\n        Object.defineProperty(PromiseState.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this.getError();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return PromiseState;\n    }(DisposableBase_1.DisposableBase));\n    exports.PromiseState = PromiseState;\n    var PromiseBase = (function (_super) {\n        __extends(PromiseBase, _super);\n        function PromiseBase() {\n            var _this = _super.call(this, Promise.State.Pending) || this;\n            _this._disposableObjectName = PROMISE;\n            return _this;\n        }\n        /**\n         * Standard .then method that defers execution until resolved.\n         * @param onFulfilled\n         * @param onRejected\n         * @returns {Promise}\n         */\n        PromiseBase.prototype.then = function (onFulfilled, onRejected) {\n            var _this = this;\n            this.throwIfDisposed();\n            return new Promise(function (resolve, reject) {\n                _this.thenThis(function (result) {\n                    return handleResolutionMethods(resolve, reject, result, onFulfilled);\n                }, function (error) {\n                    return onRejected\n                        ? handleResolutionMethods(resolve, reject, error, onRejected)\n                        : reject(error);\n                });\n            });\n        };\n        /**\n         * Same as .then but doesn't trap errors.  Exceptions may end up being fatal.\n         * @param onFulfilled\n         * @param onRejected\n         * @returns {Promise}\n         */\n        PromiseBase.prototype.thenAllowFatal = function (onFulfilled, onRejected) {\n            var _this = this;\n            this.throwIfDisposed();\n            return new Promise(function (resolve, reject) {\n                _this.thenThis(function (result) {\n                    return resolve((onFulfilled ? onFulfilled(result) : result));\n                }, function (error) {\n                    return reject(onRejected ? onRejected(error) : error);\n                });\n            });\n        };\n        /**\n         * .done is provided as a non-standard means that maps to similar functionality in other promise libraries.\n         * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\n         * @param onFulfilled\n         * @param onRejected\n         */\n        PromiseBase.prototype.done = function (onFulfilled, onRejected) {\n            var _this = this;\n            defer_1.defer(function () {\n                return _this.thenThis(onFulfilled, onRejected);\n            });\n        };\n        /**\n         * Will yield for a number of milliseconds from the time called before continuing.\n         * @param milliseconds\n         * @returns A promise that yields to the current execution and executes after a delay.\n         */\n        PromiseBase.prototype.delayFromNow = function (milliseconds) {\n            var _this = this;\n            if (milliseconds === void 0) { milliseconds = 0; }\n            this.throwIfDisposed();\n            return new Promise(function (resolve, reject) {\n                defer_1.defer(function () {\n                    _this.thenThis(function (v) { return resolve(v); }, function (e) { return reject(e); });\n                }, milliseconds);\n            }, true // Since the resolve/reject is deferred.\n            );\n        };\n        /**\n         * Will yield for a number of milliseconds from after this promise resolves.\n         * If the promise is already resolved, the delay will start from now.\n         * @param milliseconds\n         * @returns A promise that yields to the current execution and executes after a delay.\n         */\n        PromiseBase.prototype.delayAfterResolve = function (milliseconds) {\n            var _this = this;\n            if (milliseconds === void 0) { milliseconds = 0; }\n            this.throwIfDisposed();\n            if (this.isSettled)\n                return this.delayFromNow(milliseconds);\n            return new Promise(function (resolve, reject) {\n                _this.thenThis(function (v) { return defer_1.defer(function () { return resolve(v); }, milliseconds); }, function (e) { return defer_1.defer(function () { return reject(e); }, milliseconds); });\n            }, true // Since the resolve/reject is deferred.\n            );\n        };\n        /**\n         * Shortcut for trapping a rejection.\n         * @param onRejected\n         * @returns {PromiseBase<TResult>}\n         */\n        PromiseBase.prototype['catch'] = function (onRejected) {\n            return this.then(VOID0, onRejected);\n        };\n        /**\n         * Shortcut for trapping a rejection but will allow exceptions to propagate within the onRejected handler.\n         * @param onRejected\n         * @returns {PromiseBase<TResult>}\n         */\n        PromiseBase.prototype.catchAllowFatal = function (onRejected) {\n            return this.thenAllowFatal(VOID0, onRejected);\n        };\n        /**\n         * Shortcut to for handling either resolve or reject.\n         * @param fin\n         * @returns {PromiseBase<TResult>}\n         */\n        PromiseBase.prototype['finally'] = function (fin) {\n            return this.then(fin, fin);\n        };\n        /**\n         * Shortcut to for handling either resolve or reject but will allow exceptions to propagate within the handler.\n         * @param fin\n         * @returns {PromiseBase<TResult>}\n         */\n        PromiseBase.prototype.finallyAllowFatal = function (fin) {\n            return this.thenAllowFatal(fin, fin);\n        };\n        /**\n         * Shortcut to for handling either resolve or reject.  Returns the current promise instead.\n         * You may not need an additional promise result, and this will not create a new one.\n         * @param fin\n         * @param synchronous\n         * @returns {PromiseBase}\n         */\n        PromiseBase.prototype.finallyThis = function (fin, synchronous) {\n            this.throwIfDisposed();\n            var f = synchronous ? fin : function () { return deferImmediate_1.deferImmediate(fin); };\n            this.thenThis(f, f);\n            return this;\n        };\n        return PromiseBase;\n    }(PromiseState));\n    exports.PromiseBase = PromiseBase;\n    var Resolvable = (function (_super) {\n        __extends(Resolvable, _super);\n        function Resolvable() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Resolvable.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            try {\n                switch (this.state) {\n                    case Promise.State.Fulfilled:\n                        return onFulfilled\n                            ? resolve(this._result, onFulfilled, Promise.resolve)\n                            : this; // Provided for catch cases.\n                    case Promise.State.Rejected:\n                        return onRejected\n                            ? resolve(this._error, onRejected, Promise.resolve)\n                            : this;\n                }\n            }\n            catch (ex) {\n                return new Rejected(ex);\n            }\n            throw new Error(\"Invalid state for a resolved promise.\");\n        };\n        Resolvable.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            switch (this.state) {\n                case Promise.State.Fulfilled:\n                    if (onFulfilled)\n                        onFulfilled(this._result);\n                    break;\n                case Promise.State.Rejected:\n                    if (onRejected)\n                        onRejected(this._error);\n                    break;\n            }\n            return this;\n        };\n        return Resolvable;\n    }(PromiseBase));\n    exports.Resolvable = Resolvable;\n    /**\n     * The simplest usable version of a promise which returns synchronously the resolved state provided.\n     */\n    var Resolved = (function (_super) {\n        __extends(Resolved, _super);\n        function Resolved(state, result, error) {\n            var _this = _super.call(this) || this;\n            _this._result = result;\n            _this._error = error;\n            _this._state = state;\n            return _this;\n        }\n        return Resolved;\n    }(Resolvable));\n    exports.Resolved = Resolved;\n    /**\n     * A fulfilled Resolved<T>.  Provided for readability.\n     */\n    var Fulfilled = (function (_super) {\n        __extends(Fulfilled, _super);\n        function Fulfilled(value) {\n            return _super.call(this, Promise.State.Fulfilled, value) || this;\n        }\n        return Fulfilled;\n    }(Resolved));\n    exports.Fulfilled = Fulfilled;\n    /**\n     * A rejected Resolved<T>.  Provided for readability.\n     */\n    var Rejected = (function (_super) {\n        __extends(Rejected, _super);\n        function Rejected(error) {\n            return _super.call(this, Promise.State.Rejected, VOID0, error) || this;\n        }\n        return Rejected;\n    }(Resolved));\n    exports.Rejected = Rejected;\n    /**\n     * Provided as a means for extending the interface of other PromiseLike<T> objects.\n     */\n    var PromiseWrapper = (function (_super) {\n        __extends(PromiseWrapper, _super);\n        function PromiseWrapper(_target) {\n            var _this = _super.call(this) || this;\n            _this._target = _target;\n            if (!_target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            if (!isPromise(_target))\n                throw new ArgumentException_1.ArgumentException(TARGET, \"Must be a promise-like object.\");\n            _target.then(function (v) {\n                _this._state = Promise.State.Fulfilled;\n                _this._result = v;\n                _this._error = VOID0;\n                _this._target = VOID0;\n            }, function (e) {\n                _this._state = Promise.State.Rejected;\n                _this._error = e;\n                _this._target = VOID0;\n            });\n            return _this;\n        }\n        PromiseWrapper.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n            return new Promise(function (resolve, reject) {\n                handleDispatch(t, function (result) { return handleResolutionMethods(resolve, reject, result, onFulfilled); }, function (error) { return onRejected\n                    ? handleResolutionMethods(resolve, null, error, onRejected)\n                    : reject(error); });\n            }, true);\n        };\n        PromiseWrapper.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            var t = this._target;\n            if (!t)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            handleDispatch(t, onFulfilled, onRejected);\n            return this;\n        };\n        PromiseWrapper.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._target = VOID0;\n        };\n        return PromiseWrapper;\n    }(Resolvable));\n    /**\n     * This promise class that facilitates pending resolution.\n     */\n    var Promise = (function (_super) {\n        __extends(Promise, _super);\n        /*\n         * A note about deferring:\n         * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\n         * This eliminates the extra defer that will occur internally.\n         * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\n         *\n         * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\n         * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\n         */\n        function Promise(resolver, forceSynchronous) {\n            if (forceSynchronous === void 0) { forceSynchronous = false; }\n            var _this = _super.call(this) || this;\n            if (resolver)\n                _this.resolveUsing(resolver, forceSynchronous);\n            return _this;\n        }\n        Promise.prototype.thenSynchronous = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            // Already fulfilled?\n            if (this._state)\n                return _super.prototype.thenSynchronous.call(this, onFulfilled, onRejected);\n            var p = new Promise();\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\n            return p;\n        };\n        Promise.prototype.thenThis = function (onFulfilled, onRejected) {\n            this.throwIfDisposed();\n            // Already fulfilled?\n            if (this._state)\n                return _super.prototype.thenThis.call(this, onFulfilled, onRejected);\n            (this._waiting || (this._waiting = []))\n                .push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\n            return this;\n        };\n        Promise.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._resolvedCalled = VOID0;\n        };\n        Promise.prototype.resolveUsing = function (resolver, forceSynchronous) {\n            var _this = this;\n            if (forceSynchronous === void 0) { forceSynchronous = false; }\n            if (!resolver)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolver\");\n            if (this._resolvedCalled)\n                throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n            if (this.state)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\n            this._resolvedCalled = true;\n            var state = 0;\n            var rejectHandler = function (reason) {\n                if (state) {\n                    // Someone else's promise handling down stream could double call this. :\\\n                    console.warn(state == -1\n                        ? \"Rejection called multiple times\"\n                        : \"Rejection called after fulfilled.\");\n                }\n                else {\n                    state = -1;\n                    _this._resolvedCalled = false;\n                    _this.reject(reason);\n                }\n            };\n            var fulfillHandler = function (v) {\n                if (state) {\n                    // Someone else's promise handling down stream could double call this. :\\\n                    console.warn(state == 1\n                        ? \"Fulfill called multiple times\"\n                        : \"Fulfill called after rejection.\");\n                }\n                else {\n                    state = 1;\n                    _this._resolvedCalled = false;\n                    _this.resolve(v);\n                }\n            };\n            // There are some performance edge cases where there caller is not blocking upstream and does not need to defer.\n            if (forceSynchronous)\n                resolver(fulfillHandler, rejectHandler);\n            else\n                deferImmediate_1.deferImmediate(function () { return resolver(fulfillHandler, rejectHandler); });\n        };\n        Promise.prototype._emitDisposalRejection = function (p) {\n            var d = p.wasDisposed;\n            if (d)\n                this._rejectInternal(newODE());\n            return d;\n        };\n        Promise.prototype._resolveInternal = function (result) {\n            var _this = this;\n            if (this.wasDisposed)\n                return;\n            // Note: Avoid recursion if possible.\n            // Check ahead of time for resolution and resolve appropriately\n            while (result instanceof PromiseBase) {\n                var r = result;\n                if (this._emitDisposalRejection(r))\n                    return;\n                switch (r.state) {\n                    case Promise.State.Pending:\n                        r.thenSynchronous(function (v) { return _this._resolveInternal(v); }, function (e) { return _this._rejectInternal(e); });\n                        return;\n                    case Promise.State.Rejected:\n                        this._rejectInternal(r.error);\n                        return;\n                    case Promise.State.Fulfilled:\n                        result = r.result;\n                        break;\n                }\n            }\n            if (isPromise(result)) {\n                result.then(function (v) { return _this._resolveInternal(v); }, function (e) { return _this._rejectInternal(e); });\n            }\n            else {\n                this._state = Promise.State.Fulfilled;\n                this._result = result;\n                this._error = VOID0;\n                var o = this._waiting;\n                if (o) {\n                    this._waiting = VOID0;\n                    for (var _i = 0, o_1 = o; _i < o_1.length; _i++) {\n                        var c = o_1[_i];\n                        var onFulfilled = c.onFulfilled, promise = c.promise;\n                        pools.PromiseCallbacks.recycle(c);\n                        //let ex =\n                        handleResolution(promise, result, onFulfilled);\n                        //if(!p && ex) console.error(\"Unhandled exception in onFulfilled:\",ex);\n                    }\n                    o.length = 0;\n                }\n            }\n        };\n        Promise.prototype._rejectInternal = function (error) {\n            if (this.wasDisposed)\n                return;\n            this._state = Promise.State.Rejected;\n            this._error = error;\n            var o = this._waiting;\n            if (o) {\n                this._waiting = null; // null = finished. undefined = hasn't started.\n                for (var _i = 0, o_2 = o; _i < o_2.length; _i++) {\n                    var c = o_2[_i];\n                    var onRejected = c.onRejected, promise = c.promise;\n                    pools.PromiseCallbacks.recycle(c);\n                    if (onRejected) {\n                        //let ex =\n                        handleResolution(promise, error, onRejected);\n                        //if(!p && ex) console.error(\"Unhandled exception in onRejected:\",ex);\n                    }\n                    else if (promise)\n                        promise.reject(error);\n                }\n                o.length = 0;\n            }\n        };\n        Promise.prototype.resolve = function (result, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (result == this)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot resolve a promise as itself.\");\n            if (this._state) {\n                // Same value? Ignore...\n                if (!throwIfSettled || this._state == Promise.State.Fulfilled && this._result === result)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._resolveInternal(result);\n        };\n        Promise.prototype.reject = function (error, throwIfSettled) {\n            if (throwIfSettled === void 0) { throwIfSettled = false; }\n            this.throwIfDisposed();\n            if (this._state) {\n                // Same value? Ignore...\n                if (!throwIfSettled || this._state == Promise.State.Rejected && this._error === error)\n                    return;\n                throw new InvalidOperationException_1.InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\n            }\n            if (this._resolvedCalled) {\n                if (throwIfSettled)\n                    throw new InvalidOperationException_1.InvalidOperationException(\".resolve() already called.\");\n                return;\n            }\n            this._rejectInternal(error);\n        };\n        return Promise;\n    }(Resolvable));\n    exports.Promise = Promise;\n    /**\n     * By providing an ArrayPromise we expose useful methods/shortcuts for dealing with array results.\n     */\n    var ArrayPromise = (function (_super) {\n        __extends(ArrayPromise, _super);\n        function ArrayPromise() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * Simplifies the use of a map function on an array of results when the source is assured to be an array.\n         * @param transform\n         * @returns {PromiseBase<Array<any>>}\n         */\n        ArrayPromise.prototype.map = function (transform) {\n            var _this = this;\n            this.throwIfDisposed();\n            return new ArrayPromise(function (resolve) {\n                _this.thenThis(function (result) { return resolve(result.map(transform)); });\n            }, true);\n        };\n        /**\n         * Simplifies the use of a reduce function on an array of results when the source is assured to be an array.\n         * @param reduction\n         * @param initialValue\n         * @returns {PromiseBase<any>}\n         */\n        ArrayPromise.prototype.reduce = function (reduction, initialValue) {\n            return this\n                .thenSynchronous(function (result) { return result.reduce(reduction, initialValue); });\n        };\n        ArrayPromise.fulfilled = function (value) {\n            return new ArrayPromise(function (resolve) { return value; }, true);\n        };\n        return ArrayPromise;\n    }(Promise));\n    exports.ArrayPromise = ArrayPromise;\n    var PROMISE_COLLECTION = \"PromiseCollection\";\n    /**\n     * A Promise collection exposes useful methods for handling a collection of promises and their results.\n     */\n    var PromiseCollection = (function (_super) {\n        __extends(PromiseCollection, _super);\n        function PromiseCollection(source) {\n            var _this = _super.call(this) || this;\n            _this._disposableObjectName = PROMISE_COLLECTION;\n            _this._source = source && source.slice() || [];\n            return _this;\n        }\n        PromiseCollection.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source.length = 0;\n            this._source = null;\n        };\n        Object.defineProperty(PromiseCollection.prototype, \"promises\", {\n            /**\n             * Returns a copy of the source promises.\n             * @returns {PromiseLike<PromiseLike<any>>[]}\n             */\n            get: function () {\n                this.throwIfDisposed();\n                return this._source.slice();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\n         * @returns {PromiseBase<any>}\n         */\n        PromiseCollection.prototype.all = function () {\n            this.throwIfDisposed();\n            return Promise.all(this._source);\n        };\n        /**\n         * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n         * or rejected.\n         * @returns {PromiseBase<any>} A new Promise.\n         */\n        PromiseCollection.prototype.race = function () {\n            this.throwIfDisposed();\n            return Promise.race(this._source);\n        };\n        /**\n         * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\n         * Unlike .all this method waits for all rejections as well as fulfillment.\n         * @returns {PromiseBase<PromiseLike<any>[]>}\n         */\n        PromiseCollection.prototype.waitAll = function () {\n            this.throwIfDisposed();\n            return Promise.waitAll(this._source);\n        };\n        /**\n         * Waits for all the values to resolve and then applies a transform.\n         * @param transform\n         * @returns {PromiseBase<Array<any>>}\n         */\n        PromiseCollection.prototype.map = function (transform) {\n            var _this = this;\n            this.throwIfDisposed();\n            return new ArrayPromise(function (resolve) {\n                _this.all()\n                    .thenThis(function (result) { return resolve(result.map(transform)); });\n            }, true);\n        };\n        /**\n         * Applies a transform to each promise and defers the result.\n         * Unlike map, this doesn't wait for all promises to resolve, ultimately improving the async nature of the request.\n         * @param transform\n         * @returns {PromiseCollection<U>}\n         */\n        PromiseCollection.prototype.pipe = function (transform) {\n            this.throwIfDisposed();\n            return new PromiseCollection(this._source.map(function (p) { return handleSyncIfPossible(p, transform); }));\n        };\n        /**\n         * Behaves like array reduce.\n         * Creates the promise chain necessary to produce the desired result.\n         * @param reduction\n         * @param initialValue\n         * @returns {PromiseBase<PromiseLike<any>>}\n         */\n        PromiseCollection.prototype.reduce = function (reduction, initialValue) {\n            this.throwIfDisposed();\n            return Promise.wrap(this._source\n                .reduce(function (previous, current, i, array) {\n                return handleSyncIfPossible(previous, function (p) { return handleSyncIfPossible(current, function (c) { return reduction(p, c, i, array); }); });\n            }, isPromise(initialValue)\n                ? initialValue\n                : new Fulfilled(initialValue)));\n        };\n        return PromiseCollection;\n    }(DisposableBase_1.DisposableBase));\n    exports.PromiseCollection = PromiseCollection;\n    var pools;\n    (function (pools) {\n        // export module pending\n        // {\n        //\n        //\n        // \tvar pool:ObjectPool<Promise<any>>;\n        //\n        // \tfunction getPool()\n        // \t{\n        // \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\n        // \t}\n        //\n        // \tfunction factory():Promise<any>\n        // \t{\n        // \t\treturn new Promise();\n        // \t}\n        //\n        // \texport function get():Promise<any>\n        // \t{\n        // \t\tvar p:any = getPool().take();\n        // \t\tp.__wasDisposed = false;\n        // \t\tp._state = Promise.State.Pending;\n        // \t\treturn p;\n        // \t}\n        //\n        // \texport function recycle<T>(c:Promise<T>):void\n        // \t{\n        // \t\tif(c) getPool().add(c);\n        // \t}\n        //\n        // }\n        //\n        // export function recycle<T>(c:PromiseBase<T>):void\n        // {\n        // \tif(!c) return;\n        // \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\n        // \telse c.dispose();\n        // }\n        var PromiseCallbacks;\n        (function (PromiseCallbacks) {\n            var pool;\n            //noinspection JSUnusedLocalSymbols\n            function getPool() {\n                return pool\n                    || (pool = new ObjectPool_1.ObjectPool(40, factory, function (c) {\n                        c.onFulfilled = NULL;\n                        c.onRejected = NULL;\n                        c.promise = NULL;\n                    }));\n            }\n            function factory() {\n                return {\n                    onFulfilled: NULL,\n                    onRejected: NULL,\n                    promise: NULL\n                };\n            }\n            function init(onFulfilled, onRejected, promise) {\n                var c = getPool().take();\n                c.onFulfilled = onFulfilled;\n                c.onRejected = onRejected;\n                c.promise = promise;\n                return c;\n            }\n            PromiseCallbacks.init = init;\n            function recycle(c) {\n                getPool().add(c);\n            }\n            PromiseCallbacks.recycle = recycle;\n        })(PromiseCallbacks = pools.PromiseCallbacks || (pools.PromiseCallbacks = {}));\n    })(pools || (pools = {}));\n    (function (Promise) {\n        /**\n         * The state of a promise.\n         * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\n         * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\n         */\n        var State;\n        (function (State) {\n            State[State[\"Pending\"] = 0] = \"Pending\";\n            State[State[\"Fulfilled\"] = 1] = \"Fulfilled\";\n            State[State[\"Rejected\"] = -1] = \"Rejected\";\n        })(State = Promise.State || (Promise.State = {}));\n        Object.freeze(State);\n        function factory(e) {\n            return new Promise(e);\n        }\n        Promise.factory = factory;\n        function group(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            return new PromiseCollection(((first) instanceof (Array) ? first : [first])\n                .concat(rest));\n        }\n        Promise.group = group;\n        function all(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            var promises = ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy!\n            if (!promises.length || promises.every(function (v) { return !v; }))\n                return new ArrayPromise(function (r) { return r(promises); }, true); // it's a new empty, reuse it. :|\n            // Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\n            return new ArrayPromise(function (resolve, reject) {\n                var result = [];\n                var len = promises.length;\n                result.length = len;\n                // Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\n                var remaining = new Set_1.Set(promises.map(function (v, i) { return i; })); // get all the indexes...\n                var cleanup = function () {\n                    reject = VOID0;\n                    resolve = VOID0;\n                    promises.length = 0;\n                    promises = VOID0;\n                    remaining.dispose();\n                    remaining = VOID0;\n                };\n                var checkIfShouldResolve = function () {\n                    var r = resolve;\n                    if (r && !remaining.count) {\n                        cleanup();\n                        r(result);\n                    }\n                };\n                var onFulfill = function (v, i) {\n                    if (resolve) {\n                        result[i] = v;\n                        remaining.remove(i);\n                        checkIfShouldResolve();\n                    }\n                };\n                var onReject = function (e) {\n                    var r = reject;\n                    if (r) {\n                        cleanup();\n                        r(e);\n                    }\n                };\n                var _loop_1 = function (i) {\n                    var p = promises[i];\n                    if (p)\n                        p.then(function (v) { return onFulfill(v, i); }, onReject);\n                    else\n                        remaining.remove(i);\n                    checkIfShouldResolve();\n                };\n                for (var i = 0; remaining && i < len; i++) {\n                    _loop_1(i);\n                }\n            });\n        }\n        Promise.all = all;\n        function waitAll(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"promises\");\n            var promises = ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy!\n            if (!promises.length || promises.every(function (v) { return !v; }))\n                return new ArrayPromise(function (r) { return r(promises); }, true); // it's a new empty, reuse it. :|\n            // Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\n            return new ArrayPromise(function (resolve, reject) {\n                var len = promises.length;\n                // Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\n                var remaining = new Set_1.Set(promises.map(function (v, i) { return i; })); // get all the indexes...\n                var cleanup = function () {\n                    reject = NULL;\n                    resolve = NULL;\n                    remaining.dispose();\n                    remaining = NULL;\n                };\n                var checkIfShouldResolve = function () {\n                    var r = resolve;\n                    if (r && !remaining.count) {\n                        cleanup();\n                        r(promises);\n                    }\n                };\n                var onResolved = function (i) {\n                    if (remaining) {\n                        remaining.remove(i);\n                        checkIfShouldResolve();\n                    }\n                };\n                var _loop_2 = function (i) {\n                    var p = promises[i];\n                    if (p)\n                        p.then(function (v) { return onResolved(i); }, function (e) { return onResolved(i); });\n                    else\n                        onResolved(i);\n                };\n                for (var i = 0; remaining && i < len; i++) {\n                    _loop_2(i);\n                }\n            });\n        }\n        Promise.waitAll = waitAll;\n        function race(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            var promises = first && ((first) instanceof (Array) ? first : [first]).concat(rest); // yay a copy?\n            if (!promises || !promises.length || !(promises = promises.filter(function (v) { return v != null; })).length)\n                throw new ArgumentException_1.ArgumentException(\"Nothing to wait for.\");\n            var len = promises.length;\n            // Only one?  Nothing to race.\n            if (len == 1)\n                return wrap(promises[0]);\n            // Look for already resolved promises and the first one wins.\n            for (var i = 0; i < len; i++) {\n                var p = promises[i];\n                if (p instanceof PromiseBase && p.isSettled)\n                    return p;\n            }\n            return new Promise(function (resolve, reject) {\n                var cleanup = function () {\n                    reject = NULL;\n                    resolve = NULL;\n                    promises.length = 0;\n                    promises = NULL;\n                };\n                var onResolve = function (r, v) {\n                    if (r) {\n                        cleanup();\n                        r(v);\n                    }\n                };\n                var onFulfill = function (v) { return onResolve(resolve, v); };\n                var onReject = function (e) { return onResolve(reject, e); };\n                for (var _i = 0, promises_1 = promises; _i < promises_1.length; _i++) {\n                    var p = promises_1[_i];\n                    if (!resolve)\n                        break;\n                    p.then(onFulfill, onReject);\n                }\n            });\n        }\n        Promise.race = race;\n        function resolve(value) {\n            return isPromise(value) ? wrap(value) : new Fulfilled(value);\n        }\n        Promise.resolve = resolve;\n        /**\n         * Syntactic shortcut for avoiding 'new'.\n         * @param resolver\n         * @param forceSynchronous\n         * @returns {Promise}\n         */\n        function using(resolver, forceSynchronous) {\n            if (forceSynchronous === void 0) { forceSynchronous = false; }\n            return new Promise(resolver, forceSynchronous);\n        }\n        Promise.using = using;\n        function resolveAll(first) {\n            var rest = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                rest[_i - 1] = arguments[_i];\n            }\n            if (!first && !rest.length)\n                throw new ArgumentNullException_1.ArgumentNullException(\"resolutions\");\n            return new PromiseCollection(((first) instanceof (Array) ? first : [first])\n                .concat(rest)\n                .map(function (v) { return resolve(v); }));\n        }\n        Promise.resolveAll = resolveAll;\n        /**\n         * Creates a PromiseCollection containing promises that will resolve on the next tick using the transform function.\n         * This utility function does not chain promises together to create the result,\n         * it only uses one promise per transform.\n         * @param source\n         * @param transform\n         * @returns {PromiseCollection<T>}\n         */\n        function map(source, transform) {\n            return new PromiseCollection(source.map(function (d) { return new Promise(function (r, j) {\n                try {\n                    r(transform(d));\n                }\n                catch (ex) {\n                    j(ex);\n                }\n            }); }));\n        }\n        Promise.map = map;\n        /**\n         * Creates a new rejected promise for the provided reason.\n         * @param reason The reason the promise was rejected.\n         * @returns A new rejected Promise.\n         */\n        function reject(reason) {\n            return new Rejected(reason);\n        }\n        Promise.reject = reject;\n        /**\n         * Takes any Promise-Like object and ensures an extended version of it from this module.\n         * @param target The Promise-Like object\n         * @returns A new target that simply extends the target.\n         */\n        function wrap(target) {\n            if (!target)\n                throw new ArgumentNullException_1.ArgumentNullException(TARGET);\n            return isPromise(target)\n                ? (target instanceof PromiseBase ? target : new PromiseWrapper(target))\n                : new Fulfilled(target);\n        }\n        Promise.wrap = wrap;\n        /**\n         * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\n         * @param then\n         * @returns {PromiseWrapper<T>}\n         */\n        function createFrom(then) {\n            if (!then)\n                throw new ArgumentNullException_1.ArgumentNullException(THEN);\n            return new PromiseWrapper({ then: then });\n        }\n        Promise.createFrom = createFrom;\n    })(Promise = exports.Promise || (exports.Promise = {}));\n    exports.Promise = Promise;\n    exports.default = Promise;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n * Although most of the following code is written from scratch, it is\r\n * heavily influenced by Q (https://github.com/kriskowal/q) and uses some of Q's spec.\r\n */\r\n/*\r\n * Resources:\r\n * https://promisesaplus.com/\r\n * https://github.com/kriskowal/q\r\n */\r\nimport Type from \"../Types\";\r\nimport {deferImmediate} from \"../Threading/deferImmediate\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ObjectPool} from \"../Disposable/ObjectPool\";\r\nimport {Set} from \"../Collections/Set\";\r\nimport {defer} from \"../Threading/defer\";\r\nimport {ObjectDisposedException} from \"../Disposable/ObjectDisposedException\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Closure} from \"../FunctionTypes\";\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:any = void 0, NULL:any = null, PROMISE = \"Promise\", PROMISE_STATE = PROMISE + \"State\", THEN = \"then\", TARGET = \"target\";\r\n\r\nfunction isPromise<T>(value:any):value is PromiseLike<T>\r\n{\r\n\treturn Type.hasMemberOfType(value, THEN, Type.FUNCTION);\r\n}\r\n\r\nfunction resolve<T>(\r\n\tvalue:Promise.Resolution<T>, resolver:(v:Promise.Resolution<T>)=>any,\r\n\tpromiseFactory:(v:any)=>PromiseBase<any>):PromiseBase<any>\r\n{\r\n\tlet nextValue = resolver\r\n\t\t? resolver(value)\r\n\t\t: value;\r\n\r\n\treturn nextValue && isPromise(nextValue)\r\n\t\t? Promise.wrap(nextValue)\r\n\t\t: promiseFactory(nextValue);\r\n}\r\n\r\nfunction handleResolution(\r\n\tp:Promise<any>|null|undefined,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):any\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(p) p.resolve(v);\r\n\t\treturn null;\r\n\t}\r\n\tcatch(ex)\r\n\t{\r\n\t\tif(p) p.reject(ex);\r\n\t\treturn ex;\r\n\t}\r\n}\r\n\r\nfunction handleResolutionMethods(\r\n\ttargetFulfill:Promise.Fulfill<any,any>|null|undefined,\r\n\ttargetReject:Promise.Reject<any>|null|undefined,\r\n\tvalue:Promise.Resolution<any>,\r\n\tresolver?:(v:Promise.Resolution<any>)=>any):void\r\n{\r\n\ttry\r\n\t{\r\n\t\tlet v = resolver ? resolver(value) : value;\r\n\t\tif(targetFulfill) targetFulfill(v);\r\n\t}\r\n\tcatch(ex)\r\n\t{ if(targetReject) targetReject(ex); }\r\n}\r\n\r\nfunction handleDispatch<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):void\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\tp.thenThis(onFulfilled, onRejected);\r\n\telse\r\n\t\tp.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nfunction handleSyncIfPossible<T,TResult>(\r\n\tp:PromiseLike<T>,\r\n\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\tonRejected?:Promise.Reject<TResult>):PromiseLike<TResult>\r\n{\r\n\tif(p instanceof PromiseBase)\r\n\t\treturn p.thenSynchronous(onFulfilled, onRejected);\r\n\telse\r\n\t\treturn p.then(<any>onFulfilled, onRejected);\r\n}\r\n\r\nfunction newODE()\r\n{\r\n\treturn new ObjectDisposedException(\"Promise\", \"An underlying promise-result was disposed.\");\r\n}\r\n\r\nexport class PromiseState<T>\r\nextends DisposableBase\r\n{\r\n\r\n\tconstructor(\r\n\t\tprotected _state:Promise.State,\r\n\t\tprotected _result?:T,\r\n\t\tprotected _error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_STATE;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis._state = VOID0;\r\n\t\tthis._result = VOID0;\r\n\t\tthis._error = VOID0;\r\n\t}\r\n\r\n\tprotected getState():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget state():Promise.State\r\n\t{\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tget isPending():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Pending;\r\n\t}\r\n\r\n\tget isSettled():boolean\r\n\t{\r\n\t\treturn this.getState()!=Promise.State.Pending; // Will also include undefined==0 aka disposed!=resolved.\r\n\t}\r\n\r\n\tget isFulfilled():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Fulfilled;\r\n\t}\r\n\r\n\tget isRejected():boolean\r\n\t{\r\n\t\treturn this.getState()===Promise.State.Rejected;\r\n\t}\r\n\r\n\t/*\r\n\t * Providing overrides allows for special defer or lazy sub classes.\r\n\t */\r\n\tprotected getResult():T|undefined\r\n\t{\r\n\t\treturn this._result;\r\n\t}\r\n\r\n\tget result():T|undefined\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tprotected getError():any\r\n\t{\r\n\t\treturn this._error;\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this.getError();\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class PromiseBase<T>\r\nextends PromiseState<T> implements PromiseLike<T>\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper(Promise.State.Pending);\r\n\t\tthis._disposableObjectName = PROMISE;\r\n\t}\r\n\r\n\t/**\r\n\t * Calls the respective handlers once the promise is resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>;\r\n\r\n\t/**\r\n\t * Same as 'thenSynchronous' but does not return the result.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tabstract thenThis(\r\n\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\tonRejected?:Promise.Reject<any>):this;\r\n\r\n\tabstract thenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):this;\r\n\r\n\r\n\t/**\r\n\t * Standard .then method that defers execution until resolved.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {Promise}\r\n\t */\r\n\tthen<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tthis.thenThis(\r\n\t\t\t\tresult =>\r\n\t\t\t\t\thandleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror =>\r\n\t\t\t\t\tonRejected\r\n\t\t\t\t\t\t? handleResolutionMethods(resolve, reject, error, onRejected)\r\n\t\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Same as .then but doesn't trap errors.  Exceptions may end up being fatal.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t * @returns {Promise}\r\n\t */\r\n\tthenAllowFatal<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tthis.thenThis(\r\n\t\t\t\tresult =>\r\n\t\t\t\t\tresolve(<any>(onFulfilled ? onFulfilled(result) : result)),\r\n\t\t\t\terror =>\r\n\t\t\t\t\treject(onRejected ? onRejected(error) : error)\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * .done is provided as a non-standard means that maps to similar functionality in other promise libraries.\r\n\t * As stated by promisejs.org: 'then' is to 'done' as 'map' is to 'forEach'.\r\n\t * @param onFulfilled\r\n\t * @param onRejected\r\n\t */\r\n\tdone(\r\n\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\tonRejected?:Promise.Reject<any>):void\r\n\t{\r\n\t\tdefer(() =>\r\n\t\t\tthis.thenThis(onFulfilled, onRejected));\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from the time called before continuing.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayFromNow(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject) =>\r\n\t\t\t{\r\n\t\t\t\tdefer(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.thenThis(\r\n\t\t\t\t\t\tv => resolve(v),\r\n\t\t\t\t\t\te => reject(e));\r\n\t\t\t\t}, milliseconds)\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Will yield for a number of milliseconds from after this promise resolves.\r\n\t * If the promise is already resolved, the delay will start from now.\r\n\t * @param milliseconds\r\n\t * @returns A promise that yields to the current execution and executes after a delay.\r\n\t */\r\n\tdelayAfterResolve(milliseconds:number = 0):PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tif(this.isSettled) return this.delayFromNow(milliseconds);\r\n\r\n\t\treturn new Promise<T>(\r\n\t\t\t(resolve, reject) =>\r\n\t\t\t{\r\n\t\t\t\tthis.thenThis(\r\n\t\t\t\t\tv => defer(() => resolve(v), milliseconds),\r\n\t\t\t\t\te => defer(() => reject(e), milliseconds))\r\n\t\t\t},\r\n\t\t\ttrue // Since the resolve/reject is deferred.\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for trapping a rejection.\r\n\t * @param onRejected\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\t'catch'<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.then(VOID0, onRejected)\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut for trapping a rejection but will allow exceptions to propagate within the onRejected handler.\r\n\t * @param onRejected\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\tcatchAllowFatal<TResult>(onRejected:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.thenAllowFatal(VOID0, onRejected)\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject.\r\n\t * @param fin\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\t'finally'<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.then(fin, fin);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject but will allow exceptions to propagate within the handler.\r\n\t * @param fin\r\n\t * @returns {PromiseBase<TResult>}\r\n\t */\r\n\tfinallyAllowFatal<TResult>(fin:()=>Promise.Resolution<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\treturn this.thenAllowFatal(fin, fin);\r\n\t}\r\n\r\n\t/**\r\n\t * Shortcut to for handling either resolve or reject.  Returns the current promise instead.\r\n\t * You may not need an additional promise result, and this will not create a new one.\r\n\t * @param fin\r\n\t * @param synchronous\r\n\t * @returns {PromiseBase}\r\n\t */\r\n\tfinallyThis(fin:Closure, synchronous?:boolean):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tconst f:Closure = synchronous ? fin : () => deferImmediate(fin);\r\n\t\tthis.thenThis(f, f);\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nexport abstract class Resolvable<T> extends PromiseBase<T>\r\n{\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(this.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\treturn onFulfilled\r\n\t\t\t\t\t\t? resolve(this._result, onFulfilled, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this; // Provided for catch cases.\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\treturn onRejected\r\n\t\t\t\t\t\t? resolve(this._error, onRejected, Promise.resolve)\r\n\t\t\t\t\t\t: <any>this;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn new Rejected<any>(ex);\r\n\t\t}\r\n\r\n\t\tthrow new Error(\"Invalid state for a resolved promise.\");\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tswitch(this.state)\r\n\t\t{\r\n\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\tif(onFulfilled) onFulfilled(this._result);\r\n\t\t\t\tbreak;\r\n\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\tif(onRejected) onRejected(this._error);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The simplest usable version of a promise which returns synchronously the resolved state provided.\r\n */\r\nexport abstract class Resolved<T> extends Resolvable<T>\r\n{\r\n\tconstructor(state:Promise.State, result:T, error?:any)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._result = result;\r\n\t\tthis._error = error;\r\n\t\tthis._state = state;\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * A fulfilled Resolved<T>.  Provided for readability.\r\n */\r\nexport class Fulfilled<T> extends Resolved<T>\r\n{\r\n\tconstructor(value:T)\r\n\t{\r\n\t\tsuper(Promise.State.Fulfilled, value);\r\n\t}\r\n}\r\n\r\n/**\r\n * A rejected Resolved<T>.  Provided for readability.\r\n */\r\nexport class Rejected<T> extends Resolved<T>\r\n{\r\n\tconstructor(error:any)\r\n\t{\r\n\t\tsuper(Promise.State.Rejected, VOID0, error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Provided as a means for extending the interface of other PromiseLike<T> objects.\r\n */\r\nclass PromiseWrapper<T> extends Resolvable<T>\r\n{\r\n\tconstructor(private _target:PromiseLike<T>)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(!_target)\r\n\t\t\tthrow new ArgumentNullException(TARGET);\r\n\r\n\t\tif(!isPromise(_target))\r\n\t\t\tthrow new ArgumentException(TARGET, \"Must be a promise-like object.\");\r\n\r\n\t\t_target.then(\r\n\t\t\t(v:T) =>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Fulfilled;\r\n\t\t\t\tthis._result = v;\r\n\t\t\t\tthis._error = VOID0;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t},\r\n\t\t\te =>\r\n\t\t\t{\r\n\t\t\t\tthis._state = Promise.State.Rejected;\r\n\t\t\t\tthis._error = e;\r\n\t\t\t\tthis._target = VOID0;\r\n\t\t\t})\r\n\t}\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tlet t = this._target;\r\n\t\tif(!t) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\treturn new Promise<TResult>((resolve, reject) =>\r\n\t\t{\r\n\t\t\thandleDispatch(t,\r\n\t\t\t\tresult => handleResolutionMethods(resolve, reject, result, onFulfilled),\r\n\t\t\t\terror => onRejected\r\n\t\t\t\t\t? handleResolutionMethods(resolve, null, error, onRejected)\r\n\t\t\t\t\t: reject(error)\r\n\t\t\t);\r\n\t\t}, true);\r\n\t}\r\n\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\tlet t = this._target;\r\n\t\tif(!t) return <any>super.thenThis(onFulfilled, onRejected);\r\n\t\thandleDispatch(t, onFulfilled, onRejected);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._target = VOID0;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * This promise class that facilitates pending resolution.\r\n */\r\nexport class Promise<T> extends Resolvable<T>\r\n{\r\n\r\n\tprivate _waiting:IPromiseCallbacks<any>[]|null|undefined;\r\n\r\n\t/*\r\n\t * A note about deferring:\r\n\t * The caller can set resolveImmediate to true if they intend to initialize code that will end up being deferred itself.\r\n\t * This eliminates the extra defer that will occur internally.\r\n\t * But for the most part, resolveImmediate = false (the default) will ensure the constructor will not block.\r\n\t *\r\n\t * resolveUsing allows for the same ability but does not defer by default: allowing the caller to take on the work load.\r\n\t * If calling resolve or reject and a deferred response is desired, then use deferImmediate with a closure to do so.\r\n\t */\r\n\r\n\tconstructor(\r\n\t\tresolver?:Promise.Executor<T>, forceSynchronous:boolean = false)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(resolver) this.resolveUsing(resolver, forceSynchronous);\r\n\t}\r\n\r\n\r\n\tthenSynchronous<TResult>(\r\n\t\tonFulfilled:Promise.Fulfill<T,TResult>,\r\n\t\tonRejected?:Promise.Reject<TResult>):PromiseBase<TResult>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state) return super.thenSynchronous(onFulfilled, onRejected);\r\n\r\n\t\tconst p = new Promise<TResult>();\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected, p));\r\n\t\treturn p;\r\n\t}\r\n\r\n\tthenThis(\r\n\t\tonFulfilled:(v?:T)=>any,\r\n\t\tonRejected?:(v?:any)=>any):this\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\r\n\t\t// Already fulfilled?\r\n\t\tif(this._state)\r\n\t\t\treturn <any>super.thenThis(onFulfilled, onRejected);\r\n\r\n\t\t(this._waiting || (this._waiting = []))\r\n\t\t\t.push(pools.PromiseCallbacks.init(onFulfilled, onRejected));\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._resolvedCalled = VOID0;\r\n\t}\r\n\r\n\t// Protects against double calling.\r\n\tprotected _resolvedCalled:boolean;\r\n\r\n\tresolveUsing(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false):void\r\n\t{\r\n\t\tif(!resolver)\r\n\t\t\tthrow new ArgumentNullException(\"resolver\");\r\n\t\tif(this._resolvedCalled)\r\n\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\tif(this.state)\r\n\t\t\tthrow new InvalidOperationException(\"Already resolved: \" + Promise.State[this.state]);\r\n\r\n\t\tthis._resolvedCalled = true;\r\n\r\n\t\tlet state = 0;\r\n\t\tconst rejectHandler = (reason:any) =>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state== -1\r\n\t\t\t\t\t? \"Rejection called multiple times\"\r\n\t\t\t\t\t: \"Rejection called after fulfilled.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = -1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.reject(reason);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst fulfillHandler = (v:any) =>\r\n\t\t{\r\n\t\t\tif(state)\r\n\t\t\t{\r\n\t\t\t\t// Someone else's promise handling down stream could double call this. :\\\r\n\t\t\t\tconsole.warn(state==1\r\n\t\t\t\t\t? \"Fulfill called multiple times\"\r\n\t\t\t\t\t: \"Fulfill called after rejection.\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tstate = 1;\r\n\t\t\t\tthis._resolvedCalled = false;\r\n\t\t\t\tthis.resolve(v);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// There are some performance edge cases where there caller is not blocking upstream and does not need to defer.\r\n\t\tif(forceSynchronous)\r\n\t\t\tresolver(fulfillHandler, rejectHandler);\r\n\t\telse\r\n\t\t\tdeferImmediate(() => resolver(fulfillHandler, rejectHandler));\r\n\r\n\t}\r\n\r\n\r\n\tprivate _emitDisposalRejection(p:PromiseBase<any>):boolean\r\n\t{\r\n\t\tconst d = p.wasDisposed;\r\n\t\tif(d) this._rejectInternal(newODE());\r\n\t\treturn d;\r\n\t}\r\n\r\n\tprivate _resolveInternal(result?:T|PromiseLike<T>):void\r\n\t{\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\t// Note: Avoid recursion if possible.\r\n\r\n\t\t// Check ahead of time for resolution and resolve appropriately\r\n\t\twhile(result instanceof PromiseBase)\r\n\t\t{\r\n\t\t\tlet r:PromiseBase<T> = <any>result;\r\n\t\t\tif(this._emitDisposalRejection(r)) return;\r\n\t\t\tswitch(r.state)\r\n\t\t\t{\r\n\t\t\t\tcase Promise.State.Pending:\r\n\t\t\t\t\tr.thenSynchronous(\r\n\t\t\t\t\t\tv => this._resolveInternal(v),\r\n\t\t\t\t\t\te => this._rejectInternal(e)\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Rejected:\r\n\t\t\t\t\tthis._rejectInternal(r.error);\r\n\t\t\t\t\treturn;\r\n\t\t\t\tcase Promise.State.Fulfilled:\r\n\t\t\t\t\tresult = r.result;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(isPromise(result))\r\n\t\t{\r\n\t\t\tresult.then(\r\n\t\t\t\tv => this._resolveInternal(v),\r\n\t\t\t\te => this._rejectInternal(e)\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._state = Promise.State.Fulfilled;\r\n\r\n\t\t\tthis._result = result;\r\n\t\t\tthis._error = VOID0;\r\n\t\t\tconst o = this._waiting;\r\n\t\t\tif(o)\r\n\t\t\t{\r\n\t\t\t\tthis._waiting = VOID0;\r\n\t\t\t\tfor(let c of o)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet {onFulfilled, promise} = c;\r\n\t\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\t\t//let ex =\r\n\t\t\t\t\thandleResolution(<any>promise, result, onFulfilled);\r\n\t\t\t\t\t//if(!p && ex) console.error(\"Unhandled exception in onFulfilled:\",ex);\r\n\t\t\t\t}\r\n\t\t\t\to.length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _rejectInternal(error:any):void\r\n\t{\r\n\r\n\t\tif(this.wasDisposed) return;\r\n\r\n\t\tthis._state = Promise.State.Rejected;\r\n\r\n\t\tthis._error = error;\r\n\t\tconst o = this._waiting;\r\n\t\tif(o)\r\n\t\t{\r\n\t\t\tthis._waiting = null; // null = finished. undefined = hasn't started.\r\n\t\t\tfor(let c of o)\r\n\t\t\t{\r\n\t\t\t\tlet {onRejected, promise} = c;\r\n\t\t\t\tpools.PromiseCallbacks.recycle(c);\r\n\t\t\t\tif(onRejected)\r\n\t\t\t\t{\r\n\t\t\t\t\t//let ex =\r\n\t\t\t\t\thandleResolution(promise, error, onRejected);\r\n\t\t\t\t\t//if(!p && ex) console.error(\"Unhandled exception in onRejected:\",ex);\r\n\t\t\t\t}\r\n\t\t\t\telse if(promise) promise.reject(error);\r\n\t\t\t}\r\n\t\t\to.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tresolve(result?:T | PromiseLike<T>, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(<any>result==this)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot resolve a promise as itself.\");\r\n\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Fulfilled && this._result===result) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the fulfilled state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._resolveInternal(result);\r\n\t}\r\n\r\n\r\n\treject(error:any, throwIfSettled:boolean = false):void\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tif(this._state)\r\n\t\t{\r\n\t\t\t// Same value? Ignore...\r\n\t\t\tif(!throwIfSettled || this._state==Promise.State.Rejected && this._error===error) return;\r\n\t\t\tthrow new InvalidOperationException(\"Changing the rejected state/value of a promise is not supported.\");\r\n\t\t}\r\n\r\n\t\tif(this._resolvedCalled)\r\n\t\t{\r\n\t\t\tif(throwIfSettled)\r\n\t\t\t\tthrow new InvalidOperationException(\".resolve() already called.\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._rejectInternal(error);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * By providing an ArrayPromise we expose useful methods/shortcuts for dealing with array results.\r\n */\r\nexport class ArrayPromise<T> extends Promise<T[]>\r\n{\r\n\r\n\t/**\r\n\t * Simplifies the use of a map function on an array of results when the source is assured to be an array.\r\n\t * @param transform\r\n\t * @returns {PromiseBase<Array<any>>}\r\n\t */\r\n\tmap<U>(transform:(value:T)=>U):ArrayPromise<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new ArrayPromise<U>(resolve =>\r\n\t\t{\r\n\t\t\tthis.thenThis((result:T[]) => resolve(result.map(transform)));\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Simplifies the use of a reduce function on an array of results when the source is assured to be an array.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t * @returns {PromiseBase<any>}\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:T[]) => U,\r\n\t\tinitialValue?:U):PromiseBase<U>\r\n\t{\r\n\r\n\t\treturn this\r\n\t\t\t.thenSynchronous((result:T[]) => result.reduce(reduction, initialValue));\r\n\t}\r\n\r\n\tstatic fulfilled<T>(value:T[]):ArrayPromise<T>\r\n\t{\r\n\t\treturn new ArrayPromise<T>(resolve => value, true);\r\n\t}\r\n}\r\n\r\nconst PROMISE_COLLECTION = \"PromiseCollection\";\r\n/**\r\n * A Promise collection exposes useful methods for handling a collection of promises and their results.\r\n */\r\nexport class PromiseCollection<T> extends DisposableBase\r\n{\r\n\tprivate _source:PromiseLike<T>[];\r\n\r\n\tconstructor(source:PromiseLike<T>[]|null|undefined)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = PROMISE_COLLECTION;\r\n\t\tthis._source = source && source.slice() || [];\r\n\t}\r\n\r\n\tprotected _onDispose()\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._source.length = 0;\r\n\t\t(<any>this)._source = null;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a copy of the source promises.\r\n\t * @returns {PromiseLike<PromiseLike<any>>[]}\r\n\t */\r\n\tget promises():PromiseLike<T>[]\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._source.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t * @returns {PromiseBase<any>}\r\n\t */\r\n\tall():ArrayPromise<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn Promise.all(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @returns {PromiseBase<any>} A new Promise.\r\n\t */\r\n\trace():PromiseBase<T>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn Promise.race(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t * @returns {PromiseBase<PromiseLike<any>[]>}\r\n\t */\r\n\twaitAll():ArrayPromise<PromiseLike<T>>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn Promise.waitAll(this._source);\r\n\t}\r\n\r\n\t/**\r\n\t * Waits for all the values to resolve and then applies a transform.\r\n\t * @param transform\r\n\t * @returns {PromiseBase<Array<any>>}\r\n\t */\r\n\tmap<U>(transform:(value:T)=>U):ArrayPromise<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new ArrayPromise<U>(resolve =>\r\n\t\t{\r\n\t\t\tthis.all()\r\n\t\t\t\t.thenThis((result:T[]) => resolve(result.map(transform)));\r\n\t\t}, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a transform to each promise and defers the result.\r\n\t * Unlike map, this doesn't wait for all promises to resolve, ultimately improving the async nature of the request.\r\n\t * @param transform\r\n\t * @returns {PromiseCollection<U>}\r\n\t */\r\n\r\n\tpipe<U>(transform:(value:T)=>U|PromiseLike<U>):PromiseCollection<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn new PromiseCollection<U>(this._source.map(p => handleSyncIfPossible(p, transform)));\r\n\t}\r\n\r\n\t/**\r\n\t * Behaves like array reduce.\r\n\t * Creates the promise chain necessary to produce the desired result.\r\n\t * @param reduction\r\n\t * @param initialValue\r\n\t * @returns {PromiseBase<PromiseLike<any>>}\r\n\t */\r\n\treduce<U>(\r\n\t\treduction:(previousValue:U, currentValue:T, i?:number, array?:PromiseLike<T>[]) => U,\r\n\t\tinitialValue?:U|PromiseLike<U>):PromiseBase<U>\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn Promise.wrap(this._source\r\n\t\t\t.reduce(\r\n\t\t\t\t(\r\n\t\t\t\t\tprevious:PromiseLike<U>,\r\n\t\t\t\t\tcurrent:PromiseLike<T>,\r\n\t\t\t\t\ti:number,\r\n\t\t\t\t\tarray:PromiseLike<T>[]) =>\r\n\t\t\t\t\thandleSyncIfPossible(previous,\r\n\t\t\t\t\t\t(p:U) => handleSyncIfPossible(current, (c:T) => reduction(p, c, i, array))),\r\n\r\n\t\t\t\tisPromise(initialValue)\r\n\t\t\t\t\t? initialValue\r\n\t\t\t\t\t: new Fulfilled(initialValue)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule pools\r\n{\r\n\r\n\t// export module pending\r\n\t// {\r\n\t//\r\n\t//\r\n\t// \tvar pool:ObjectPool<Promise<any>>;\r\n\t//\r\n\t// \tfunction getPool()\r\n\t// \t{\r\n\t// \t\treturn pool || (pool = new ObjectPool<Promise<any>>(40, factory, c=>c.dispose()));\r\n\t// \t}\r\n\t//\r\n\t// \tfunction factory():Promise<any>\r\n\t// \t{\r\n\t// \t\treturn new Promise();\r\n\t// \t}\r\n\t//\r\n\t// \texport function get():Promise<any>\r\n\t// \t{\r\n\t// \t\tvar p:any = getPool().take();\r\n\t// \t\tp.__wasDisposed = false;\r\n\t// \t\tp._state = Promise.State.Pending;\r\n\t// \t\treturn p;\r\n\t// \t}\r\n\t//\r\n\t// \texport function recycle<T>(c:Promise<T>):void\r\n\t// \t{\r\n\t// \t\tif(c) getPool().add(c);\r\n\t// \t}\r\n\t//\r\n\t// }\r\n\t//\r\n\t// export function recycle<T>(c:PromiseBase<T>):void\r\n\t// {\r\n\t// \tif(!c) return;\r\n\t// \tif(c instanceof Promise && c.constructor==Promise) pending.recycle(c);\r\n\t// \telse c.dispose();\r\n\t// }\r\n\r\n\r\n\texport module PromiseCallbacks\r\n\t{\r\n\r\n\t\tlet pool:ObjectPool<IPromiseCallbacks<any>>;\r\n\r\n\t\t//noinspection JSUnusedLocalSymbols\r\n\t\tfunction getPool()\r\n\t\t{\r\n\t\t\treturn pool\r\n\t\t\t\t|| (pool = new ObjectPool<IPromiseCallbacks<any>>(40, factory, c =>\r\n\t\t\t\t{\r\n\t\t\t\t\tc.onFulfilled = NULL;\r\n\t\t\t\t\tc.onRejected = NULL;\r\n\t\t\t\t\tc.promise = NULL;\r\n\t\t\t\t}));\r\n\t\t}\r\n\r\n\t\tfunction factory():IPromiseCallbacks<any>\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tonFulfilled: NULL,\r\n\t\t\t\tonRejected: NULL,\r\n\t\t\t\tpromise: NULL\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\texport function init<T>(\r\n\t\t\tonFulfilled:Promise.Fulfill<T,any>,\r\n\t\t\tonRejected?:Promise.Reject<any>,\r\n\t\t\tpromise?:Promise<any>):IPromiseCallbacks<T>\r\n\t\t{\r\n\r\n\t\t\tconst c = getPool().take();\r\n\t\t\tc.onFulfilled = onFulfilled;\r\n\t\t\tc.onRejected = onRejected;\r\n\t\t\tc.promise = promise;\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\texport function recycle<T>(c:IPromiseCallbacks<T>):void\r\n\t\t{\r\n\t\t\tgetPool().add(c);\r\n\t\t}\r\n\t}\r\n\r\n\r\n}\r\n\r\n\r\nexport module Promise\r\n{\r\n\r\n\t/**\r\n\t * The state of a promise.\r\n\t * https://github.com/domenic/promises-unwrapping/blob/master/docs/states-and-fates.md\r\n\t * If a promise is disposed the value will be undefined which will also evaluate (promise.state)==false.\r\n\t */\r\n\texport enum State {\r\n\t\tPending   = 0,\r\n\t\tFulfilled = 1,\r\n\t\tRejected  = -1\r\n\t}\r\n\tObject.freeze(State);\r\n\r\n\texport type Resolution<TResult> = TResult | PromiseLike<TResult>;\r\n\r\n\texport interface Fulfill<T, TResult>\r\n\t{\r\n\t\t(value:T):Resolution<TResult>\r\n\t}\r\n\r\n\texport interface Reject<TResult>\r\n\t{\r\n\t\t(reason:any):TResult | PromiseLike<TResult>;\r\n\t}\r\n\r\n\texport interface Then<T,TResult>\r\n\t{\r\n\t\t(onfulfilled?:Fulfill<T,TResult>, onrejected?:Reject<TResult>):PromiseLike<TResult>;\r\n\t\t(onfulfilled?:Fulfill<T,TResult>, onrejected?:Reject<void>):PromiseLike<TResult>;\r\n\t}\r\n\r\n\texport interface Executor<T>\r\n\t{\r\n\t\t(\r\n\t\t\tresolve:(value?:T | PromiseLike<T>) => void,\r\n\t\t\treject:(reason?:any) => void):void;\r\n\t}\r\n\r\n\t//noinspection JSUnusedGlobalSymbols\r\n\texport interface Factory\r\n\t{\r\n\t\t<T>(executor:Executor<T>):PromiseLike<T>;\r\n\t}\r\n\r\n\texport function factory<T>(e:Executor<T>):Promise<T>\r\n\t{\r\n\t\treturn new Promise(e);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a set of promises and returns a PromiseCollection.\r\n\t * @param promises\r\n\t */\r\n\texport function group<T>(promises:PromiseLike<T>[]):PromiseCollection<T>\r\n\texport function group<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):PromiseCollection<T>\r\n\texport function group(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseCollection<any>\r\n\t{\r\n\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\treturn new PromiseCollection(\r\n\t\t\t((first)instanceof(Array) ? first : [first])\r\n\t\t\t\t.concat(rest)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise, or is rejected with the same rejection reason as the first promise to be rejected.\r\n\t */\r\n\texport function all<T>(promises:PromiseLike<T>[]):ArrayPromise<T>\r\n\texport function all<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):ArrayPromise<T>\r\n\texport function all(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):ArrayPromise<any>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tlet promises = ((first)instanceof(Array) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v => !v)) return new ArrayPromise<any>(\r\n\t\t\tr => r(promises), true); // it's a new empty, reuse it. :|\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new ArrayPromise<any>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet result:any[] = [];\r\n\t\t\tlet len = promises.length;\r\n\t\t\tresult.length = len;\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i) => i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = VOID0;\r\n\t\t\t\tresolve = VOID0;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = VOID0;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = VOID0;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = () =>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any, i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(resolve)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = v;\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onReject = (e?:any) =>\r\n\t\t\t{\r\n\t\t\t\tlet r = reject;\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(e);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v => onFulfill(v, i), onReject);\r\n\t\t\t\telse remaining.remove(i);\r\n\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a promise that is fulfilled with array of provided promises when all provided promises have resolved (fulfill or reject).\r\n\t * Unlike .all this method waits for all rejections as well as fulfillment.\r\n\t */\r\n\texport function waitAll<T>(promises:PromiseLike<T>[]):ArrayPromise<PromiseLike<T>>\r\n\texport function waitAll<T>(\r\n\t\tpromise:PromiseLike<T>,\r\n\t\t...rest:PromiseLike<T>[]):ArrayPromise<PromiseLike<T>>\r\n\texport function waitAll(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):ArrayPromise<PromiseLike<any>>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"promises\");\r\n\t\tconst promises = ((first)instanceof(Array) ? first : [first]).concat(rest); // yay a copy!\r\n\t\tif(!promises.length || promises.every(v => !v)) return new ArrayPromise<any>(\r\n\t\t\tr => r(promises), true); // it's a new empty, reuse it. :|\r\n\r\n\r\n\t\t// Eliminate deferred and take the parent since all .then calls happen on next cycle anyway.\r\n\t\treturn new ArrayPromise<any>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet len = promises.length;\r\n\r\n\t\t\t// Using a set instead of -- a number is more reliable if just in case one of the provided promises resolves twice.\r\n\t\t\tlet remaining = new Set(promises.map((v, i) => i)); // get all the indexes...\r\n\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = NULL;\r\n\t\t\t\tresolve = NULL;\r\n\t\t\t\tremaining.dispose();\r\n\t\t\t\tremaining = NULL;\r\n\t\t\t};\r\n\r\n\t\t\tlet checkIfShouldResolve = () =>\r\n\t\t\t{\r\n\t\t\t\tlet r = resolve;\r\n\t\t\t\tif(r && !remaining.count)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(promises);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolved = (i:number) =>\r\n\t\t\t{\r\n\t\t\t\tif(remaining)\r\n\t\t\t\t{\r\n\t\t\t\t\tremaining.remove(i);\r\n\t\t\t\t\tcheckIfShouldResolve();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tfor(let i = 0; remaining && i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet p = promises[i];\r\n\t\t\t\tif(p) p.then(v => onResolved(i), e => onResolved(i));\r\n\t\t\t\telse onResolved(i);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\r\n\t * or rejected.\r\n\t * @param promises An array of Promises.\r\n\t * @returns A new Promise.\r\n\t */\r\n\texport function race<T>(promises:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race<T>(promise:PromiseLike<T>, ...rest:PromiseLike<T>[]):PromiseBase<T>\r\n\texport function race(\r\n\t\tfirst:PromiseLike<any>|PromiseLike<any>[],\r\n\t\t...rest:PromiseLike<any>[]):PromiseBase<any>\r\n\t{\r\n\t\tlet promises = first && ((first)instanceof(Array) ? first : [first]).concat(rest); // yay a copy?\r\n\t\tif(!promises || !promises.length || !(promises = promises.filter(v => v!=null)).length)\r\n\t\t\tthrow new ArgumentException(\"Nothing to wait for.\");\r\n\r\n\t\tconst len = promises.length;\r\n\r\n\t\t// Only one?  Nothing to race.\r\n\t\tif(len==1) return wrap(promises[0]);\r\n\r\n\t\t// Look for already resolved promises and the first one wins.\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tconst p:any = promises[i];\r\n\t\t\tif(p instanceof PromiseBase && p.isSettled) return p;\r\n\t\t}\r\n\r\n\t\treturn new Promise((resolve, reject) =>\r\n\t\t{\r\n\t\t\tlet cleanup = () =>\r\n\t\t\t{\r\n\t\t\t\treject = NULL;\r\n\t\t\t\tresolve = NULL;\r\n\t\t\t\tpromises.length = 0;\r\n\t\t\t\tpromises = NULL;\r\n\t\t\t};\r\n\r\n\t\t\tlet onResolve = (r:(x:any)=>void, v:any) =>\r\n\t\t\t{\r\n\t\t\t\tif(r)\r\n\t\t\t\t{\r\n\t\t\t\t\tcleanup();\r\n\t\t\t\t\tr(v);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tlet onFulfill = (v:any) => onResolve(resolve, v);\r\n\t\t\tlet onReject = (e?:any) => onResolve(reject, e);\r\n\r\n\t\t\tfor(let p of promises)\r\n\t\t\t{\r\n\t\t\t\tif(!resolve) break;\r\n\t\t\t\tp.then(onFulfill, onReject);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<T>;\r\n\r\n\t/**\r\n\t * Creates a new resolved promise .\r\n\t * @returns A resolved promise.\r\n\t */\r\n\texport function resolve():PromiseBase<void>\r\n\r\n\t/**\r\n\t * Creates a new resolved promise for the provided value.\r\n\t * @param value A value or promise.\r\n\t * @returns A promise whose internal state matches the provided promise.\r\n\t */\r\n\texport function resolve<T>(value:T | PromiseLike<T>):PromiseBase<T>;\r\n\texport function resolve(value?:any):PromiseBase<any>\r\n\t{\r\n\r\n\t\treturn isPromise(value) ? wrap(value) : new Fulfilled(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Syntactic shortcut for avoiding 'new'.\r\n\t * @param resolver\r\n\t * @param forceSynchronous\r\n\t * @returns {Promise}\r\n\t */\r\n\texport function using<T>(\r\n\t\tresolver:Promise.Executor<T>,\r\n\t\tforceSynchronous:boolean = false):PromiseBase<T>\r\n\t{\r\n\t\treturn new Promise<T>(resolver, forceSynchronous);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes a set of values or promises and returns a PromiseCollection.\r\n\t * Similar to 'group' but calls resolve on each entry.\r\n\t * @param resolutions\r\n\t */\r\n\texport function resolveAll<T>(resolutions:Array<T | PromiseLike<T>>):PromiseCollection<T>;\r\n\texport function resolveAll<T>(\r\n\t\tpromise:T | PromiseLike<T>,\r\n\t\t...rest:Array<T | PromiseLike<T>>):PromiseCollection<T>\r\n\texport function resolveAll(\r\n\t\tfirst:any | PromiseLike<any>|Array<any | PromiseLike<any>>,\r\n\t\t...rest:Array<any | PromiseLike<any>>):PromiseCollection<any>\r\n\t{\r\n\t\tif(!first && !rest.length) throw new ArgumentNullException(\"resolutions\");\r\n\t\treturn new PromiseCollection(\r\n\t\t\t((first)instanceof(Array) ? first : [first])\r\n\t\t\t\t.concat(rest)\r\n\t\t\t\t.map((v:any) => resolve(v)));\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a PromiseCollection containing promises that will resolve on the next tick using the transform function.\r\n\t * This utility function does not chain promises together to create the result,\r\n\t * it only uses one promise per transform.\r\n\t * @param source\r\n\t * @param transform\r\n\t * @returns {PromiseCollection<T>}\r\n\t */\r\n\texport function map<T,U>(source:T[], transform:(value:T)=>U):PromiseCollection<U>\r\n\t{\r\n\t\treturn new PromiseCollection<U>(\r\n\t\t\tsource.map(d => new Promise<U>((r, j) =>\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tr(transform(d));\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tj(ex);\r\n\t\t\t\t}\r\n\t\t\t}))\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new rejected promise for the provided reason.\r\n\t * @param reason The reason the promise was rejected.\r\n\t * @returns A new rejected Promise.\r\n\t */\r\n\texport function reject<T>(reason:T):PromiseBase<T>\r\n\t{\r\n\t\treturn new Rejected<T>(reason);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes any Promise-Like object and ensures an extended version of it from this module.\r\n\t * @param target The Promise-Like object\r\n\t * @returns A new target that simply extends the target.\r\n\t */\r\n\texport function wrap<T>(target:T|PromiseLike<T>):PromiseBase<T>\r\n\t{\r\n\t\tif(!target) throw new ArgumentNullException(TARGET);\r\n\t\treturn isPromise(target)\r\n\t\t\t? (target instanceof PromiseBase ? target : new PromiseWrapper(target))\r\n\t\t\t: new Fulfilled<T>(target);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that acts like a 'then' method (aka then-able) can be extended by providing a function that takes an onFulfill and onReject.\r\n\t * @param then\r\n\t * @returns {PromiseWrapper<T>}\r\n\t */\r\n\texport function createFrom<T>(then:Then<T,any>):PromiseBase<T>\r\n\t{\r\n\t\tif(!then) throw new ArgumentNullException(THEN);\r\n\t\treturn new PromiseWrapper<T>({then: then});\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface IPromiseCallbacks<T>\r\n{\r\n\tonFulfilled:Promise.Fulfill<T,any>;\r\n\tonRejected?:Promise.Reject<any>;\r\n\tpromise?:Promise<any>;\r\n}\r\n\r\nexport default Promise;"]}