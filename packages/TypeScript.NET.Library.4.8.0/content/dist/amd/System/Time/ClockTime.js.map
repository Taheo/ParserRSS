{"version":3,"sources":["System/Time/ClockTime.js","System/Time/ClockTime.ts"],"names":["define","require","exports","TimeQuantity_1","extends_1","pluralize","value","label","Math","abs","Object","defineProperty","__extends","ClockTime","_super","args","_i","arguments","length","_this","call","this","millisecondsFromTime","ms","getTotalMilliseconds","msi","floor","tick","days","hour","minute","second","millisecond","freeze","from","hours","minutes","seconds","milliseconds","prototype","toString","_","a","push","splice","join","replace","TimeQuantity"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,iBAAkB,iBAAkB,SAAUC,EAASC,EAASC,EAAgBC,GAC1G,YCgHJ,SAAAC,GAAmBC,EAAcC,GAKhC,MAHqB,KAAlBC,KAAKC,IAAIH,KACXC,GAAS,KAEHA,EDpHJG,OAAOC,eAAeT,EAAS,cAAgBI,OAAO,GCQ1D,IAAMM,GAAYR,EAAAA,WAGlBS,EAAA,SAAAC,GAYC,QAAAD,KDhBW,ICgBC,GAAAE,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,EAAZ,IAAAG,GAECL,EAAAM,KAAAC,KACCN,EAAKG,OAAO,EACTL,EAAUS,qBACZP,EAAK,IAAM,EACXA,EAAK,IAAM,EACXA,EAAKG,OAAO,GAAKH,EAAK,IAAM,EAC5BA,EAAKG,OAAO,GAAKH,EAAK,IAAM,GAEzBA,EAAKG,OAAO,GAAKH,EAAK,IAAM,IAChCM,KAEKE,EAAKf,KAAKC,IAAIU,EAAKK,wBACrBC,EAAMjB,KAAKkB,MAAMH,EDXX,OCaVJ,GAAKQ,KAAkB,KAAVJ,EAAKE,GAElBN,EAAKS,KAAQH,EAAI,MAAwB,EACzCA,GAAiB,MAAVN,EAAKS,KAEZT,EAAKU,KAAQJ,EAAI,KAAyB,EAC1CA,GAAiB,KAAVN,EAAKU,KAEZV,EAAKW,OAAUL,EAAI,IAA2B,EAC9CA,GAAmB,IAAZN,EAAKW,OAEZX,EAAKY,OAAUN,EAAI,IAA2B,EAC9CA,GAAmB,IAAZN,EAAKY,OAEZZ,EAAKa,YAAcP,EAEnBf,OAAOuB,OAAOd,GD7BGA,ECiFnB,MAhG+BP,GAAAC,EAAAC,GAiDvBD,EAAAqB,KAAP,SAAYC,EAAcC,EAAgBC,EAAoBC,GAE7D,MAFyC,UAAAD,IAAAA,EAAA,GAAoB,SAAAC,IAAAA,EAAA,GAEtD,GAAIzB,GAAUsB,EAAOC,EAASC,EAASC,IAGxCzB,EAAAS,qBAAP,SACCa,EACAC,EACAC,EACAC,GADA,SAAAD,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,EAEA,IAAIhC,GAAQ6B,CAOZ,OANA7B,IAAS,GACTA,GAAS8B,EACT9B,GAAS,GACTA,GAAS+B,EACT/B,GAAS,IACTA,GAASgC,GAIVzB,EAAA0B,UAAAC,SAAA,WAKC,GAAMC,GAAIpB,KACJqB,IAiBN,OAfGD,GAAEb,MACJc,EAAEC,KAAKtC,EAAUoC,EAAEb,KAAM,QAEvBa,EAAEZ,MACJa,EAAEC,KAAKtC,EAAUoC,EAAEZ,KAAM,SAEvBY,EAAEX,QACJY,EAAEC,KAAKtC,EAAUoC,EAAEX,OAAQ,WAEzBW,EAAEV,QACJW,EAAEC,KAAKtC,EAAUoC,EAAEV,OAAQ,WAEzBW,EAAExB,OAAO,GACXwB,EAAEE,OAAOF,EAAExB,OAAS,EAAG,EAAG,OAEpBwB,EAAEG,KAAK,MAAMC,QAAQ,UAAW,UAGzCjC,GAhG+BV,EAAA4C,aAAlB7C,GAAAW,UAAAA,EA4GbX,EAAAA,WAAeW","file":"ClockTime.js","sourcesContent":["define([\"require\", \"exports\", \"./TimeQuantity\", \"../../extends\"], function (require, exports, TimeQuantity_1, extends_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var ClockTime = (function (_super) {\n        __extends(ClockTime, _super);\n        function ClockTime() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var _this = _super.call(this, args.length > 1\n                ? ClockTime.millisecondsFromTime(args[0] || 0, args[1] || 0, args.length > 2 && args[2] || 0, args.length > 3 && args[3] || 0)\n                : (args.length > 0 && args[0] || 0)) || this;\n            var ms = Math.abs(_this.getTotalMilliseconds());\n            var msi = Math.floor(ms);\n            _this.tick = (ms - msi) * 10000 /* Millisecond */;\n            _this.days = (msi / 86400000 /* Day */) | 0;\n            msi -= _this.days * 86400000 /* Day */;\n            _this.hour = (msi / 3600000 /* Hour */) | 0;\n            msi -= _this.hour * 3600000 /* Hour */;\n            _this.minute = (msi / 60000 /* Minute */) | 0;\n            msi -= _this.minute * 60000 /* Minute */;\n            _this.second = (msi / 1000 /* Second */) | 0;\n            msi -= _this.second * 1000 /* Second */;\n            _this.millisecond = msi;\n            Object.freeze(_this);\n            return _this;\n        }\n        // Static version for relative consistency.  Constructor does allow this format.\n        ClockTime.from = function (hours, minutes, seconds, milliseconds) {\n            if (seconds === void 0) { seconds = 0; }\n            if (milliseconds === void 0) { milliseconds = 0; }\n            return new ClockTime(hours, minutes, seconds, milliseconds);\n        };\n        ClockTime.millisecondsFromTime = function (hours, minutes, seconds, milliseconds) {\n            if (seconds === void 0) { seconds = 0; }\n            if (milliseconds === void 0) { milliseconds = 0; }\n            var value = hours;\n            value *= 60 /* Hour */;\n            value += minutes;\n            value *= 60 /* Minute */;\n            value += seconds;\n            value *= 1000 /* Second */;\n            value += milliseconds;\n            return value;\n        };\n        ClockTime.prototype.toString = function () {\n            /* INSERT CUSTOM FORMATTING CODE HERE */\n            var _ = this;\n            var a = [];\n            if (_.days)\n                a.push(pluralize(_.days, \"day\"));\n            if (_.hour)\n                a.push(pluralize(_.hour, \"hour\"));\n            if (_.minute)\n                a.push(pluralize(_.minute, \"minute\"));\n            if (_.second)\n                a.push(pluralize(_.second, \"second\"));\n            if (a.length > 1)\n                a.splice(a.length - 1, 0, \"and\");\n            return a.join(\", \").replace(\", and, \", \" and \");\n        };\n        return ClockTime;\n    }(TimeQuantity_1.TimeQuantity));\n    exports.ClockTime = ClockTime;\n    // Temporary until the full TimeSpanFormat is available.\n    function pluralize(value, label) {\n        if (Math.abs(value) !== 1)\n            label += \"s\";\n        return label;\n    }\n    exports.default = ClockTime;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {IClockTime} from \"./ITimeStamp\";\r\nimport {Minutes, Seconds, Milliseconds, Ticks} from \"./HowMany\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\nexport class ClockTime extends TimeQuantity implements IClockTime\r\n{\r\n\r\n\treadonly days:number;\r\n\treadonly hour:number;\r\n\treadonly minute:number;\r\n\treadonly second:number;\r\n\treadonly millisecond:number;\r\n\treadonly tick:number;\r\n\r\n\tconstructor(milliseconds:number);\r\n\tconstructor(hours:number, minutes:number, seconds?:number, milliseconds?:number);\r\n\tconstructor(...args:number[])\r\n\t{\r\n\t\tsuper(\r\n\t\t\targs.length>1\r\n\t\t\t\t? ClockTime.millisecondsFromTime(\r\n\t\t\t\targs[0] || 0,\r\n\t\t\t\targs[1] || 0,\r\n\t\t\t\targs.length>2 && args[2] || 0,\r\n\t\t\t\targs.length>3 && args[3] || 0\r\n\t\t\t)\r\n\t\t\t\t: (args.length>0 && args[0] || 0)\r\n\t\t);\r\n\r\n\t\tconst ms = Math.abs(this.getTotalMilliseconds());\r\n\t\tlet msi = Math.floor(ms);\r\n\r\n\t\tthis.tick = (ms - msi)*Ticks.Per.Millisecond;\r\n\r\n\t\tthis.days = (msi/Milliseconds.Per.Day) | 0;\r\n\t\tmsi -= this.days*Milliseconds.Per.Day;\r\n\r\n\t\tthis.hour = (msi/Milliseconds.Per.Hour) | 0;\r\n\t\tmsi -= this.hour*Milliseconds.Per.Hour;\r\n\r\n\t\tthis.minute = (msi/Milliseconds.Per.Minute) | 0;\r\n\t\tmsi -= this.minute*Milliseconds.Per.Minute;\r\n\r\n\t\tthis.second = (msi/Milliseconds.Per.Second) | 0;\r\n\t\tmsi -= this.second*Milliseconds.Per.Second;\r\n\r\n\t\tthis.millisecond = msi;\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\r\n\t// Static version for relative consistency.  Constructor does allow this format.\r\n\tstatic from(hours:number, minutes:number, seconds:number = 0, milliseconds:number = 0):ClockTime\r\n\t{\r\n\t\treturn new ClockTime(hours, minutes, seconds, milliseconds);\r\n\t}\r\n\r\n\tstatic millisecondsFromTime(\r\n\t\thours:number,\r\n\t\tminutes:number,\r\n\t\tseconds:number = 0,\r\n\t\tmilliseconds:number = 0):number\r\n\t{\r\n\t\tlet value = hours;\r\n\t\tvalue *= Minutes.Per.Hour;\r\n\t\tvalue += minutes;\r\n\t\tvalue *= Seconds.Per.Minute;\r\n\t\tvalue += seconds;\r\n\t\tvalue *= Milliseconds.Per.Second;\r\n\t\tvalue += milliseconds;\r\n\t\treturn value;\r\n\t}\r\n\r\n\ttoString(/*format?:string, formatProvider?:IFormatProvider*/):string\r\n\t{\r\n\t\t/* INSERT CUSTOM FORMATTING CODE HERE */\r\n\r\n\r\n\t\tconst _ = this;\r\n\t\tconst a:string[] = [];\r\n\r\n\t\tif(_.days)\r\n\t\t\ta.push(pluralize(_.days, \"day\"));\r\n\r\n\t\tif(_.hour)\r\n\t\t\ta.push(pluralize(_.hour, \"hour\"));\r\n\r\n\t\tif(_.minute)\r\n\t\t\ta.push(pluralize(_.minute, \"minute\"));\r\n\r\n\t\tif(_.second)\r\n\t\t\ta.push(pluralize(_.second, \"second\"));\r\n\r\n\t\tif(a.length>1)\r\n\t\t\ta.splice(a.length - 1, 0, \"and\");\r\n\r\n\t\treturn a.join(\", \").replace(\", and, \", \" and \");\r\n\t}\r\n\r\n}\r\n\r\n\r\n// Temporary until the full TimeSpanFormat is available.\r\nfunction pluralize(value:number, label:string):string\r\n{\r\n\tif(Math.abs(value)!==1)\r\n\t\tlabel += \"s\";\r\n\r\n\treturn label;\r\n}\r\n\r\nexport default ClockTime;"]}