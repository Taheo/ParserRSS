{"version":3,"sources":["System/Collections/Enumeration/EnumeratorBase.js","System/Collections/Enumeration/EnumeratorBase.ts"],"names":["define","require","exports","Types_1","DisposableBase_1","ObjectPool_1","IteratorResult_1","extends_1","yielder","recycle","yielderPool","ObjectPool","Yielder","y","yieldBreak","add","take","Object","defineProperty","value","__extends","VOID0","this","_current","_index","NaN","prototype","get","enumerable","configurable","yieldReturn","isNaN","dispose","NAME","EnumeratorBase","_super","_initializer","_tryGetNext","disposer","isEndless","_this","call","_disposableObjectName","reset","Type","isBoolean","_isEndless","isFunction","_disposer","_yielder","current","index","_","throwIfDisposed","_state","_assertBadState","tryGetCurrent","out","moveNext","initializer","e","tryMoveNext","nextValue","next","IteratorResult","Done","end","_ensureDisposeState","state","wasDisposed","_onDispose","DisposableBase"],"mappings":"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","file":"EnumeratorBase.js","sourcesContent":["define([\"require\", \"exports\", \"../../Types\", \"../../Disposable/DisposableBase\", \"../../Disposable/ObjectPool\", \"./IteratorResult\", \"../../../extends\"], function (require, exports, Types_1, DisposableBase_1, ObjectPool_1, IteratorResult_1, extends_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var yielderPool;\n    //noinspection JSUnusedLocalSymbols\n    function yielder(recycle) {\n        if (!yielderPool)\n            yielderPool\n                = new ObjectPool_1.ObjectPool(40, function () { return new Yielder(); }, function (y) { return y.yieldBreak(); });\n        if (!recycle)\n            return yielderPool.take();\n        yielderPool.add(recycle);\n    }\n    var Yielder = (function () {\n        function Yielder() {\n            this._current = VOID0;\n            this._index = NaN;\n        }\n        Object.defineProperty(Yielder.prototype, \"current\", {\n            get: function () { return this._current; } // this class is not entirely local/private.  Still needs protection.\n            ,\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Yielder.prototype, \"index\", {\n            get: function () { return this._index; },\n            enumerable: true,\n            configurable: true\n        });\n        Yielder.prototype.yieldReturn = function (value) {\n            this._current = value;\n            if (isNaN(this._index))\n                this._index = 0;\n            else\n                this._index++;\n            return true;\n        };\n        Yielder.prototype.yieldBreak = function () {\n            this._current = VOID0;\n            this._index = NaN;\n            return false;\n        };\n        Yielder.prototype.dispose = function () {\n            this.yieldBreak();\n        };\n        return Yielder;\n    }());\n    var NAME = \"EnumeratorBase\";\n    // \"Enumerator\" is conflict JScript's \"Enumerator\"\n    // Naming this class EnumeratorBase to avoid collision with IE.\n    var EnumeratorBase = (function (_super) {\n        __extends(EnumeratorBase, _super);\n        function EnumeratorBase(_initializer, _tryGetNext, disposer, isEndless) {\n            var _this = _super.call(this) || this;\n            _this._initializer = _initializer;\n            _this._tryGetNext = _tryGetNext;\n            _this._disposableObjectName = NAME;\n            _this.reset();\n            if (Types_1.Type.isBoolean(isEndless))\n                _this._isEndless = isEndless;\n            else if (Types_1.Type.isBoolean(disposer))\n                _this._isEndless = disposer;\n            if (Types_1.Type.isFunction(disposer))\n                _this._disposer = disposer;\n            return _this;\n        }\n        Object.defineProperty(EnumeratorBase.prototype, \"current\", {\n            get: function () {\n                var y = this._yielder;\n                return y && y.current;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EnumeratorBase.prototype, \"index\", {\n            get: function () {\n                var y = this._yielder;\n                return y ? y.index : NaN;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(EnumeratorBase.prototype, \"isEndless\", {\n            /*\n             * Provides a mechanism to indicate if this enumerable never ends.\n             * If set to true, some operations that expect a finite result may throw.\n             * Explicit false means it has an end.\n             * Implicit void means unknown.\n             */\n            get: function () {\n                return this._isEndless;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Added for compatibility but only works if the enumerator is active.\n         */\n        EnumeratorBase.prototype.reset = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var y = _._yielder;\n            _._yielder = null;\n            _._state = 0 /* Before */;\n            if (y)\n                yielder(y); // recycle until actually needed.\n        };\n        EnumeratorBase.prototype._assertBadState = function () {\n            var _ = this;\n            switch (_._state) {\n                case 3 /* Faulted */:\n                    _.throwIfDisposed(\"This enumerator caused a fault and was disposed.\");\n                    break;\n                case 5 /* Disposed */:\n                    _.throwIfDisposed(\"This enumerator was manually disposed.\");\n                    break;\n            }\n        };\n        /**\n         * Passes the current value to the out callback if the enumerator is active.\n         * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\n         */\n        EnumeratorBase.prototype.tryGetCurrent = function (out) {\n            this._assertBadState();\n            if (this._state === 1 /* Active */) {\n                out(this.current);\n                return true;\n            }\n            return false;\n        };\n        Object.defineProperty(EnumeratorBase.prototype, \"canMoveNext\", {\n            get: function () {\n                return this._state < 2 /* Completed */;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Safely moves to the next entry and returns true if there is one.\n         * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\n         */\n        EnumeratorBase.prototype.moveNext = function () {\n            var _ = this;\n            _._assertBadState();\n            try {\n                switch (_._state) {\n                    case 0 /* Before */:\n                        _._yielder = _._yielder || yielder();\n                        _._state = 1 /* Active */;\n                        var initializer = _._initializer;\n                        if (initializer)\n                            initializer();\n                    // fall through\n                    case 1 /* Active */:\n                        if (_._tryGetNext(_._yielder)) {\n                            return true;\n                        }\n                        else {\n                            this.dispose();\n                            _._state = 2 /* Completed */;\n                            return false;\n                        }\n                    default:\n                        return false;\n                }\n            }\n            catch (e) {\n                this.dispose();\n                _._state = 3 /* Faulted */;\n                throw e;\n            }\n        };\n        /**\n         * Moves to the next entry and emits the value through the out callback.\n         * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\n         */\n        EnumeratorBase.prototype.tryMoveNext = function (out) {\n            if (this.moveNext()) {\n                out(this.current);\n                return true;\n            }\n            return false;\n        };\n        EnumeratorBase.prototype.nextValue = function () {\n            return this.moveNext()\n                ? this.current\n                : VOID0;\n        };\n        /**\n         * Exposed for compatibility with generators.\n         */\n        EnumeratorBase.prototype.next = function () {\n            return this.moveNext()\n                ? new IteratorResult_1.IteratorResult(this.current, this.index)\n                : IteratorResult_1.IteratorResult.Done;\n        };\n        EnumeratorBase.prototype.end = function () {\n            this._ensureDisposeState(4 /* Interrupted */);\n        };\n        EnumeratorBase.prototype['return'] = function (value) {\n            var _ = this;\n            _._assertBadState();\n            try {\n                return value === VOID0 || _._state === 2 /* Completed */ || _._state === 4 /* Interrupted */\n                    ? IteratorResult_1.IteratorResult.Done\n                    : new IteratorResult_1.IteratorResult(value, VOID0, true);\n            }\n            finally {\n                _.end();\n            }\n        };\n        EnumeratorBase.prototype._ensureDisposeState = function (state) {\n            var _ = this;\n            if (!_.wasDisposed) {\n                _.dispose();\n                _._state = state;\n            }\n        };\n        EnumeratorBase.prototype._onDispose = function () {\n            var _ = this;\n            _._isEndless = false;\n            var disposer = _._disposer;\n            _._initializer = null;\n            _._disposer = null;\n            var y = _._yielder;\n            _._yielder = null;\n            this._state = 5 /* Disposed */;\n            if (y)\n                yielder(y);\n            if (disposer)\n                disposer();\n        };\n        return EnumeratorBase;\n    }(DisposableBase_1.DisposableBase));\n    exports.EnumeratorBase = EnumeratorBase;\n    exports.default = EnumeratorBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Type} from \"../../Types\";\r\nimport {DisposableBase} from \"../../Disposable/DisposableBase\";\r\nimport {ObjectPool} from \"../../Disposable/ObjectPool\";\r\nimport {IDisposable} from \"../../Disposable/IDisposable\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IYield} from \"./IYield\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport __extendsImport from \"../../../extends\";\r\nimport {Closure, Action} from \"../../FunctionTypes\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nlet yielderPool:ObjectPool<Yielder<any>>;\r\nfunction yielder():Yielder<any>;\r\nfunction yielder(recycle?:Yielder<any>):void;\r\n//noinspection JSUnusedLocalSymbols\r\nfunction yielder(recycle?:Yielder<any>):Yielder<any>|void\r\n{\r\n\tif(!yielderPool)\r\n\t\tyielderPool\r\n\t\t\t= new ObjectPool<Yielder<any>>(40, ()=>new Yielder<any>(), y=>y.yieldBreak());\r\n\tif(!recycle) return yielderPool.take();\r\n\tyielderPool.add(recycle);\r\n}\r\n\r\nclass Yielder<T> implements IYield<T>, IDisposable\r\n{\r\n\tprivate _current:T|undefined = VOID0;\r\n\tprivate _index:number = NaN;\r\n\r\n\tget current():T|undefined { return this._current; } // this class is not entirely local/private.  Still needs protection.\r\n\r\n\tget index():number { return this._index; }\r\n\r\n\tyieldReturn(value:T):boolean\r\n\t{\r\n\t\tthis._current = value;\r\n\t\tif(isNaN(this._index))\r\n\t\t\tthis._index = 0;\r\n\t\telse\r\n\t\t\tthis._index++;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tyieldBreak():boolean\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = NaN;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.yieldBreak();\r\n\t}\r\n}\r\n\r\n// IEnumerator State\r\nconst enum EnumeratorState { Before, Active, Completed, Faulted, Interrupted, Disposed }\r\n\r\nconst NAME = \"EnumeratorBase\";\r\n\r\n// \"Enumerator\" is conflict JScript's \"Enumerator\"\r\n// Naming this class EnumeratorBase to avoid collision with IE.\r\nexport class EnumeratorBase<T> extends DisposableBase implements IEnumerator<T>\r\n{\r\n\r\n\tprivate _yielder:Yielder<T>;\r\n\tprivate _state:EnumeratorState;\r\n\tprivate _disposer:()=>void;\r\n\r\n\tget current():T|undefined\r\n\t{\r\n\t\tconst y = this._yielder;\r\n\t\treturn y && y.current;\r\n\t}\r\n\r\n\tget index():number\r\n\t{\r\n\t\tconst y = this._yielder;\r\n\t\treturn y ? y.index : NaN;\r\n\t}\r\n\r\n\tconstructor(\r\n\t\tinitializer:Closure|null,\r\n\t\ttryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tisEndless?:boolean);\r\n\tconstructor(\r\n\t\tinitializer:Closure|null,\r\n\t\ttryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tdisposer?:Closure|null,\r\n\t\tisEndless?:boolean);\r\n\tconstructor(\r\n\t\tprivate _initializer:Closure,\r\n\t\tprivate _tryGetNext:(yielder:IYield<T>) => boolean,\r\n\t\tdisposer?:Closure|boolean|null,\r\n\t\tisEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._disposableObjectName = NAME;\r\n\t\tthis.reset();\r\n\t\tif(Type.isBoolean(isEndless))\r\n\t\t\tthis._isEndless = isEndless;\r\n\t\telse if(Type.isBoolean(disposer))\r\n\t\t\tthis._isEndless = disposer;\r\n\r\n\t\tif(Type.isFunction(disposer))\r\n\t\t\tthis._disposer = disposer;\r\n\t}\r\n\r\n\tprotected _isEndless:boolean;\r\n\t/*\r\n\t * Provides a mechanism to indicate if this enumerable never ends.\r\n\t * If set to true, some operations that expect a finite result may throw.\r\n\t * Explicit false means it has an end.\r\n\t * Implicit void means unknown.\r\n\t */\r\n\tget isEndless():boolean|undefined\r\n\t{\r\n\t\treturn this._isEndless;\r\n\t}\r\n\r\n\t/**\r\n\t * Added for compatibility but only works if the enumerator is active.\r\n\t */\r\n\treset():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst y = _._yielder;\r\n\t\t_._yielder = <any>null;\r\n\r\n\t\t_._state = EnumeratorState.Before;\r\n\r\n\t\tif(y) yielder(y); // recycle until actually needed.\r\n\t}\r\n\r\n\tprivate _assertBadState() {\r\n\t\tconst _ = this;\r\n\t\tswitch(_._state)\r\n\t\t{\r\n\t\t\tcase EnumeratorState.Faulted:\r\n\t\t\t\t_.throwIfDisposed(\"This enumerator caused a fault and was disposed.\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase EnumeratorState.Disposed:\r\n\t\t\t\t_.throwIfDisposed(\"This enumerator was manually disposed.\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Passes the current value to the out callback if the enumerator is active.\r\n\t * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\r\n\t */\r\n\ttryGetCurrent(out:Action<T>):boolean {\r\n\t\tthis._assertBadState();\r\n\t\tif(this._state===EnumeratorState.Active) {\r\n\t\t\tout(<T>this.current);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tget canMoveNext():boolean {\r\n\t\treturn this._state < EnumeratorState.Completed;\r\n\t}\r\n\r\n\t/**\r\n\t * Safely moves to the next entry and returns true if there is one.\r\n\t * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\r\n\t */\r\n\tmoveNext():boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\r\n\t\t_._assertBadState();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tswitch(_._state)\r\n\t\t\t{\r\n\t\t\t\tcase EnumeratorState.Before:\r\n\t\t\t\t\t_._yielder = _._yielder || yielder();\r\n\t\t\t\t\t_._state = EnumeratorState.Active;\r\n\t\t\t\t\tconst initializer = _._initializer;\r\n\t\t\t\t\tif(initializer)\r\n\t\t\t\t\t\tinitializer();\r\n\t\t\t\t// fall through\r\n\t\t\t\tcase EnumeratorState.Active:\r\n\t\t\t\t\tif(_._tryGetNext(_._yielder))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.dispose();\r\n\t\t\t\t\t\t_._state = EnumeratorState.Completed;\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(e)\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t\t_._state = EnumeratorState.Faulted;\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Moves to the next entry and emits the value through the out callback.\r\n\t * Note: Will throw ObjectDisposedException if this has faulted or manually disposed.\r\n\t */\r\n\ttryMoveNext(out:Action<T>):boolean {\r\n\t\tif(this.moveNext()) {\r\n\t\t\tout(<T>this.current);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tnextValue():T|undefined\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? this.current\r\n\t\t\t: VOID0;\r\n\t}\r\n\r\n\t/**\r\n\t * Exposed for compatibility with generators.\r\n\t */\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this.current, this.index)\r\n\t\t\t: IteratorResult.Done\r\n\t}\r\n\r\n\tend():void {\r\n\t\tthis._ensureDisposeState(EnumeratorState.Interrupted);\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._assertBadState();\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value===VOID0 || _._state===EnumeratorState.Completed || _._state===EnumeratorState.Interrupted\r\n\t\t\t\t? IteratorResult.Done\r\n\t\t\t\t: new IteratorResult(value, VOID0, true);\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t_.end();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _ensureDisposeState(state:EnumeratorState):void {\r\n\t\tconst _ = this;\r\n\t\tif(!_.wasDisposed) {\r\n\t\t\t_.dispose();\r\n\t\t\t_._state = state;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._isEndless = false;\r\n\t\tconst disposer = _._disposer;\r\n\r\n\t\t_._initializer = <any>null;\r\n\t\t_._disposer = <any>null;\r\n\r\n\r\n\t\tconst y = _._yielder;\r\n\t\t_._yielder = <any>null;\r\n\t\tthis._state = EnumeratorState.Disposed;\r\n\r\n\t\tif(y) yielder(y);\r\n\r\n\t\tif(disposer)\r\n\t\t\tdisposer();\r\n\t}\r\n\r\n}\r\n\r\nexport default EnumeratorBase;\r\n"]}