{"version":3,"sources":["System/Collections/Enumeration/SimpleEnumerableBase.js","System/Collections/Enumeration/SimpleEnumerableBase.ts"],"names":["define","require","exports","IteratorResult_1","Object","defineProperty","value","VOID0","SimpleEnumerableBase","this","reset","prototype","get","_current","enumerable","configurable","_canMoveNext","tryMoveNext","out","moveNext","incrementIndex","i","_index","isNaN","nextValue","next","IteratorResult","Done","end","dispose","NaN","getIsEndless"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,oBAAqB,SAAUC,EAASC,EAASC,GAC3E,YACAC,QAAOC,eAAeH,EAAS,cAAgBI,OAAO,GCO1D,IAAMC,GAAkB,OAExBC,EAAA,WAMC,QAAAA,KAECC,KAAKC,QAqFP,MAlFCN,QAAAC,eAAIG,EAAAG,UAAA,WDbOC,ICaX,WAEC,MAAOH,MAAKI,UDZFC,YAAY,EACZC,cAAc,ICgBzBX,OAAAC,eAAIG,EAAAG,UAAA,eDbOC,ICaX,WACC,MAAOH,MAAKO,gBDXFF,YAAY,EACZC,cAAc,ICezBP,EAAAG,UAAAM,YAAA,SAAYC,GACX,QAAGT,KAAKU,aACPD,EAAOT,KAAKI,WACL,IAMCL,EAAAG,UAAAS,eAAV,WAEC,GAAIC,GAAIZ,KAAKa,MAEb,OADAb,MAAKa,OAASD,EAAIE,MAAMF,GAAK,EAAKA,EAAI,EAC/BA,GAGRb,EAAAG,UAAAa,UAAA,WAGC,MADAf,MAAKU,WACEV,KAAKI,UAGbL,EAAAG,UAAAc,KAAA,WAEC,MAAOhB,MAAKU,WACT,GAAIhB,GAAAuB,eAAejB,KAAKI,SAAUJ,KAAKa,QACvCnB,EAAAuB,eAAeC,MAGnBnB,EAAAG,UAAAiB,IAAA,WACCnB,KAAKoB,WAKNrB,EAAAG,UAAA,UAAA,SAASL,GAER,IAEC,MAAOA,KAAQC,GAASE,KAAKO,eAC1B,GAAIb,GAAAuB,eAAepB,EAAOC,IAAO,IACjCJ,EAAAuB,eAAeC,KDxBT,QC4BTlB,KAAKoB,YAIPrB,EAAAG,UAAAD,MAAA,WAECD,KAAKI,SAAWN,EAChBE,KAAKa,OAASQ,KAGftB,EAAAG,UAAAkB,QAAA,WAECpB,KAAKC,SAGIF,EAAAG,UAAAoB,aAAV,WAEC,MAAOtB,MAAKO,gBAGbZ,OAAAC,eAAIG,EAAAG,UAAA,aDjCOC,ICiCX,WAEC,MAAOH,MAAKsB,gBDhCFjB,YAAY,EACZC,cAAc,ICiC1BP,IA7FsBN,GAAAM,qBAAAA,EA+FtBN,EAAAA,WAAeM","file":"SimpleEnumerableBase.js","sourcesContent":["define([\"require\", \"exports\", \"./IteratorResult\"], function (require, exports, IteratorResult_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var VOID0 = void 0;\n    var SimpleEnumerableBase = (function () {\n        function SimpleEnumerableBase() {\n            this.reset();\n        }\n        Object.defineProperty(SimpleEnumerableBase.prototype, \"current\", {\n            get: function () {\n                return this._current;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(SimpleEnumerableBase.prototype, \"canMoveNext\", {\n            get: function () {\n                return this._canMoveNext();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        SimpleEnumerableBase.prototype.tryMoveNext = function (out) {\n            if (this.moveNext()) {\n                out(this._current);\n                return true;\n            }\n            return false;\n        };\n        SimpleEnumerableBase.prototype.incrementIndex = function () {\n            var i = this._index;\n            this._index = i = isNaN(i) ? 0 : (i + 1);\n            return i;\n        };\n        SimpleEnumerableBase.prototype.nextValue = function () {\n            this.moveNext();\n            return this._current;\n        };\n        SimpleEnumerableBase.prototype.next = function () {\n            return this.moveNext()\n                ? new IteratorResult_1.IteratorResult(this._current, this._index)\n                : IteratorResult_1.IteratorResult.Done;\n        };\n        SimpleEnumerableBase.prototype.end = function () {\n            this.dispose();\n        };\n        SimpleEnumerableBase.prototype['return'] = function (value) {\n            try {\n                return value !== VOID0 && this._canMoveNext()\n                    ? new IteratorResult_1.IteratorResult(value, VOID0, true)\n                    : IteratorResult_1.IteratorResult.Done;\n            }\n            finally {\n                this.dispose();\n            }\n        };\n        SimpleEnumerableBase.prototype.reset = function () {\n            this._current = VOID0;\n            this._index = NaN;\n        };\n        SimpleEnumerableBase.prototype.dispose = function () {\n            this.reset();\n        };\n        SimpleEnumerableBase.prototype.getIsEndless = function () {\n            return this._canMoveNext();\n        };\n        Object.defineProperty(SimpleEnumerableBase.prototype, \"isEndless\", {\n            get: function () {\n                return this.getIsEndless();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return SimpleEnumerableBase;\n    }());\n    exports.SimpleEnumerableBase = SimpleEnumerableBase;\n    exports.default = SimpleEnumerableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {IIteratorResult} from \"./IIterator\";\r\nimport {IteratorResult} from \"./IteratorResult\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {Action} from \"../../FunctionTypes\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport abstract class SimpleEnumerableBase<T> implements IEnumerator<T>\r\n{\r\n\r\n\tprotected _current:T|undefined;\r\n\tprotected _index:number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tget current():T|undefined\r\n\t{\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tprotected abstract _canMoveNext():boolean;\r\n\r\n\tget canMoveNext():boolean {\r\n\t\treturn this._canMoveNext();\r\n\t}\r\n\r\n\tabstract moveNext():boolean;\r\n\r\n\ttryMoveNext(out:Action<T>):boolean {\r\n\t\tif(this.moveNext()) {\r\n\t\t\tout(<T>this._current);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tprotected incrementIndex():number\r\n\t{\r\n\t\tlet i = this._index;\r\n\t\tthis._index = i = isNaN(i) ? 0 : (i + 1);\r\n\t\treturn i;\r\n\t}\r\n\r\n\tnextValue():T|undefined\r\n\t{\r\n\t\tthis.moveNext();\r\n\t\treturn this._current;\r\n\t}\r\n\r\n\tnext():IIteratorResult<T>\r\n\t{\r\n\t\treturn this.moveNext()\r\n\t\t\t? new IteratorResult(this._current, this._index)\r\n\t\t\t: IteratorResult.Done;\r\n\t}\r\n\r\n\tend():void {\r\n\t\tthis.dispose();\r\n\t}\r\n\r\n\t'return'():IIteratorResult<void>\r\n\t'return'<TReturn>(value:TReturn):IIteratorResult<TReturn>\r\n\t'return'(value?:any):IIteratorResult<any>\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn value!==VOID0 && this._canMoveNext()\r\n\t\t\t\t? new IteratorResult(value, VOID0, true)\r\n\t\t\t\t: IteratorResult.Done;\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\tthis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tthis._current = VOID0;\r\n\t\tthis._index = NaN;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn this._canMoveNext();\r\n\t}\r\n\r\n\tget isEndless():boolean|undefined\r\n\t{\r\n\t\treturn this.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default SimpleEnumerableBase;\r\n"]}