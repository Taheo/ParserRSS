{"version":3,"sources":["System/Collections/Array/Sorting/quickSort.js","System/Collections/Array/Sorting/quickSort.ts"],"names":["define","require","exports","ArgumentNullException_1","quickSort","target","ArgumentNullException","len","length","sort","low","high","swap","pivotIndex","Math","floor","i","j","Object","defineProperty","value"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,6CAA8C,SAAUC,EAASC,EAASC,GACpG,YCcJ,SAAAC,GAAoFC,GAEnF,IAAIA,EAAQ,KAAM,IAAIF,GAAAG,sBAAsB,SAC5C,IAAMC,GAAMF,EAAOG,MACnB,OAAOH,GAAOG,OAAO,EAAIH,EAASI,EAAKJ,EAAQ,EAAGE,EAAM,GAGzD,QAAAE,GACCJ,EACAK,EACAC,GAEA,GAAGD,EAAIC,EACP,CAEC,GAAIC,GAAI,OACFC,EAAaC,KAAKC,OAAOL,EAAMC,GAAM,EAE3CC,GAAOP,EAAOQ,GACdR,EAAOQ,GAAcR,EAAOM,GAC5BN,EAAOM,GAAQC,CAGf,KAAI,GADAI,GAAIN,EACAO,EAAIP,EAAKO,EAAEN,EAAMM,IAErBZ,EAAOY,GAAGZ,EAAOM,KAEnBC,EAAOP,EAAOW,GACdX,EAAOW,GAAKX,EAAOY,GACnBZ,EAAOY,GAAKL,EACZI,IAIFJ,GAAOP,EAAOW,GACdX,EAAOW,GAAKX,EAAOM,GACnBN,EAAOM,GAAQC,EAEfH,EAAKJ,EAAQK,EAAKM,EAAI,GACtBP,EAAKJ,EAAQW,EAAI,EAAGL,GAGrB,MAAON,GDvDJa,OAAOC,eAAejB,EAAS,cAAgBkB,OAAO,ICa1DlB,EAAAE,UAAAA","file":"quickSort.js","sourcesContent":["define([\"require\", \"exports\", \"../../../Exceptions/ArgumentNullException\"], function (require, exports, ArgumentNullException_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Quick internalSort O(n log (n))\n     * Warning: Uses recursion.\n     * @param target\n     * @returns {T[]}\n     */\n    function quickSort(target) {\n        if (!target)\n            throw new ArgumentNullException_1.ArgumentNullException(\"target\");\n        var len = target.length;\n        return target.length < 2 ? target : sort(target, 0, len - 1);\n    }\n    exports.quickSort = quickSort;\n    function sort(target, low, high) {\n        if (low < high) {\n            // Partition first...\n            var swap = void 0;\n            var pivotIndex = Math.floor((low + high) / 2);\n            swap = target[pivotIndex];\n            target[pivotIndex] = target[high];\n            target[high] = swap;\n            var i = low;\n            for (var j = low; j < high; j++) {\n                if (target[j] < target[high]) {\n                    swap = target[i];\n                    target[i] = target[j];\n                    target[j] = swap;\n                    i++;\n                }\n            }\n            swap = target[i];\n            target[i] = target[high];\n            target[high] = swap;\n            sort(target, low, i - 1);\n            sort(target, i + 1, high);\n        }\n        return target;\n    }\n});\n","/*!\r\n * @author Sebastian Belmar / https://github.com/sebabelmar/\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Primitive} from \"../../../Primitive\";\r\nimport {ArgumentNullException} from \"../../../Exceptions/ArgumentNullException\";\r\nimport {ArrayLikeWritable} from \"../ArrayLikeWritable\";\r\n\r\n/**\r\n * Quick internalSort O(n log (n))\r\n * Warning: Uses recursion.\r\n * @param target\r\n * @returns {T[]}\r\n */\r\nexport function quickSort<T extends Primitive, TArray extends ArrayLikeWritable<T>>(target:TArray):TArray\r\n{\r\n\tif(!target) throw new ArgumentNullException(\"target\");\r\n\tconst len = target.length;\r\n\treturn target.length<2 ? target : sort(target, 0, len - 1);\r\n}\r\n\r\nfunction sort<T extends Primitive, TArray extends ArrayLikeWritable<T>>(\r\n\ttarget:TArray,\r\n\tlow:number,\r\n\thigh:number):TArray\r\n{\r\n\tif(low<high)\r\n\t{\r\n\t\t// Partition first...\r\n\t\tlet swap:T;\r\n\t\tconst pivotIndex = Math.floor((low + high)/2);\r\n\r\n\t\tswap = target[pivotIndex];\r\n\t\ttarget[pivotIndex] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tlet i = low;\r\n\t\tfor(let j = low; j<high; j++)\r\n\t\t{\r\n\t\t\tif(target[j]<target[high])\r\n\t\t\t{\r\n\t\t\t\tswap = target[i];\r\n\t\t\t\ttarget[i] = target[j];\r\n\t\t\t\ttarget[j] = swap;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswap = target[i];\r\n\t\ttarget[i] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tsort(target, low, i - 1);\r\n\t\tsort(target, i + 1, high);\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n"]}