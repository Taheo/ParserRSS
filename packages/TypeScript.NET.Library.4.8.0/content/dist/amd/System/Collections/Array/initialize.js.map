{"version":3,"sources":["System/Collections/Array/initialize.js","System/Collections/Array/initialize.ts"],"names":["define","require","exports","Integer_1","initialize","length","Integer","assert","array","Array","Object","defineProperty","value"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,iBAAkB,SAAUC,EAASC,EAASC,GACxE,YCUJ,SAAAC,GAA8BC,GAE7BF,EAAAG,QAAQC,OAAOF,EAAQ,SAEvB,IAAIG,EAQJ,OAPGH,GAAO,MACTG,EAAQ,GAAIC,OAAMJ,IAGlBG,KACAA,EAAMH,OAASA,GAETG,EDrBJE,OAAOC,eAAeT,EAAS,cAAgBU,OAAO,ICS1DV,EAAAE,WAAAA","file":"initialize.js","sourcesContent":["define([\"require\", \"exports\", \"../../Integer\"], function (require, exports, Integer_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * Initializes an array depending on the requested capacity.\n     * The returned array will have a .length equal to the value provided.\n     * @param length\n     * @returns {T[]}\n     */\n    function initialize(length) {\n        Integer_1.Integer.assert(length, 'length');\n        // This logic is based upon JS performance tests that show a significant difference at the level of 65536.\n        var array;\n        if (length > 65536)\n            array = new Array(length);\n        else {\n            array = [];\n            array.length = length;\n        }\n        return array;\n    }\n    exports.initialize = initialize;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {Integer} from \"../../Integer\";\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\tInteger.assert(length, 'length');\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tlet array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}"]}