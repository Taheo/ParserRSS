{"version":3,"sources":["System/Collections/List.js","System/Collections/List.ts"],"names":["define","require","exports","Compare_1","Utility_1","Enumerator_1","Types_1","CollectionBase_1","extends_1","EnumeratorBase_1","Object","defineProperty","value","__extends","VOID0","List","_super","source","equalityComparer","areEqual","_this","call","this","_source","slice","_importEntries","prototype","_onDispose","getCount","length","_addInternal","entry","push","_removeInternal","max","Infinity","remove","_equalityComparer","_clearInternal","len","entries","Type","isArrayLike","s","first","i","get","index","set","_signalModification","indexOf","item","insert","_","splice","removeAt","removeIndex","contains","copyTo","target","getEnumerator","throwIfDisposed","version","EnumeratorBase","_version","yielder","wasDisposed","yieldBreak","assertVersion","yieldReturn","forEach","action","useCopy","CollectionBase"],"mappings":"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","file":"List.js","sourcesContent":["define([\"require\", \"exports\", \"../Compare\", \"./Array/Utility\", \"./Enumeration/Enumerator\", \"../Types\", \"./CollectionBase\", \"../../extends\", \"./Enumeration/EnumeratorBase\"], function (require, exports, Compare_1, Utility_1, Enumerator_1, Types_1, CollectionBase_1, extends_1, EnumeratorBase_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var List = (function (_super) {\n        __extends(List, _super);\n        function List(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            var _this = _super.call(this, VOID0, equalityComparer) || this;\n            if ((source) instanceof (Array)) {\n                _this._source = source.slice();\n            }\n            else {\n                _this._source = [];\n                _this._importEntries(source);\n            }\n            return _this;\n        }\n        List.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._source = null;\n        };\n        List.prototype.getCount = function () {\n            return this._source.length;\n        };\n        List.prototype._addInternal = function (entry) {\n            this._source.push(entry);\n            return true;\n        };\n        List.prototype._removeInternal = function (entry, max) {\n            if (max === void 0) { max = Infinity; }\n            return Utility_1.remove(this._source, entry, max, this._equalityComparer);\n        };\n        List.prototype._clearInternal = function () {\n            var len = this._source.length;\n            this._source.length = 0;\n            return len;\n        };\n        List.prototype._importEntries = function (entries) {\n            if (Types_1.Type.isArrayLike(entries)) {\n                var len = entries.length;\n                if (!len)\n                    return 0;\n                var s = this._source;\n                var first = s.length;\n                s.length += len;\n                for (var i = 0; i < len; i++) {\n                    s[i + first] = entries[i];\n                }\n                return len;\n            }\n            else {\n                return _super.prototype._importEntries.call(this, entries);\n            }\n        };\n        List.prototype.get = function (index) {\n            return this._source[index];\n        };\n        List.prototype.set = function (index, value) {\n            var s = this._source;\n            if (index < s.length && Compare_1.areEqual(value, s[index]))\n                return false;\n            s[index] = value;\n            this._signalModification(true);\n            return true;\n        };\n        List.prototype.indexOf = function (item) {\n            return Utility_1.indexOf(this._source, item, this._equalityComparer);\n        };\n        List.prototype.insert = function (index, value) {\n            var _ = this;\n            var s = _._source;\n            if (index < s.length) {\n                _._source.splice(index, 0, value);\n            }\n            else {\n                _._source[index] = value;\n            }\n            _._signalModification(true);\n        };\n        List.prototype.removeAt = function (index) {\n            if (Utility_1.removeIndex(this._source, index)) {\n                this._signalModification(true);\n                return true;\n            }\n            return false;\n        };\n        List.prototype.contains = function (item) {\n            return Utility_1.contains(this._source, item, this._equalityComparer);\n        };\n        List.prototype.copyTo = function (target, index) {\n            return Utility_1.copyTo(this._source, target, 0, index);\n        };\n        List.prototype.getEnumerator = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var source, index, version;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                source = _._source;\n                version = _._version;\n                index = 0;\n            }, function (yielder) {\n                if (index)\n                    _.throwIfDisposed();\n                else if (_.wasDisposed) {\n                    // We never actually started? Then no biggie.\n                    return yielder.yieldBreak();\n                }\n                _.assertVersion(version);\n                if (index >= source.length)\n                    return yielder.yieldBreak();\n                return yielder.yieldReturn(source[index++]);\n            });\n        };\n        List.prototype.forEach = function (action, useCopy) {\n            var s = this._source;\n            return Enumerator_1.forEach(useCopy ? s.slice() : this, action);\n        };\n        return List;\n    }(CollectionBase_1.CollectionBase));\n    exports.List = List;\n    exports.default = List;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {areEqual} from \"../Compare\";\r\nimport {remove, indexOf, contains, copyTo, removeIndex} from \"./Array/Utility\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {Type} from \"../Types\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {EqualityComparison, ActionWithIndex, PredicateWithIndex} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IList} from \"./IList\";\r\nimport {IEnumerateEach} from \"./Enumeration/IEnumerateEach\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ArrayLikeWritable} from \"./Array/ArrayLikeWritable\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\nexport class List<T>\r\nextends CollectionBase<T> implements IList<T>, IEnumerateEach<T>\r\n{\r\n\r\n\tprotected readonly _source:T[];\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T>,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(VOID0, equalityComparer);\r\n\t\tif((source)instanceof(Array))\r\n\t\t{\r\n\t\t\tthis._source = source.slice();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis._source = [];\r\n\t\t\tthis._importEntries(source);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _onDispose() {\r\n\t\tsuper._onDispose();\r\n\t\t(<any>this)._source = null;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._source.length;\r\n\t}\r\n\r\n\tprotected _addInternal(entry:T):boolean\r\n\t{\r\n\t\tthis._source.push(entry);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected _removeInternal(entry:T, max:number = Infinity):number\r\n\t{\r\n\t\treturn remove(\r\n\t\t\tthis._source, entry, max,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst len = this._source.length;\r\n\t\tthis._source.length = 0;\r\n\t\treturn len;\r\n\t}\r\n\r\n\tprotected _importEntries(entries:IEnumerableOrArray<T>|null|undefined):number\r\n\t{\r\n\t\tif(Type.isArrayLike(entries))\r\n\t\t{\r\n\t\t\tlet len = entries.length;\r\n\t\t\tif(!len) return 0;\r\n\t\t\tconst s = this._source;\r\n\r\n\t\t\tconst first = s.length;\r\n\t\t\ts.length += len;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\ts[i + first] = entries[i];\r\n\t\t\t}\r\n\r\n\t\t\treturn len;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn super._importEntries(entries);\r\n\t\t}\r\n\t}\r\n\r\n\tget(index:number):T\r\n\t{\r\n\t\treturn this._source[index];\r\n\t}\r\n\r\n\tset(index:number, value:T):boolean\r\n\t{\r\n\t\tconst s = this._source;\r\n\t\tif(index<s.length && areEqual(value, s[index]))\r\n\t\t\treturn false;\r\n\r\n\t\ts[index] = value;\r\n\t\tthis._signalModification(true);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tindexOf(item:T):number\r\n\t{\r\n\t\treturn indexOf(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tinsert(index:number, value:T):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst s = _._source;\r\n\t\tif(index<s.length)\r\n\t\t{\r\n\t\t\t_._source.splice(index, 0, value);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_._source[index] = value;\r\n\t\t}\r\n\t\t_._signalModification(true);\r\n\t}\r\n\r\n\tremoveAt(index:number):boolean\r\n\t{\r\n\t\tif(removeIndex(this._source, index))\r\n\t\t{\r\n\t\t\tthis._signalModification(true);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn contains(\r\n\t\t\tthis._source, item,\r\n\t\t\tthis._equalityComparer);\r\n\t}\r\n\r\n\tcopyTo<TTarget extends ArrayLikeWritable<any>>(target:TTarget, index?:number):TTarget\r\n\t{\r\n\t\treturn copyTo(this._source, target, 0, index);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet source:T[], index:number, version:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tsource = _._source;\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder)=>\r\n\t\t\t{\r\n\t\t\t\tif(index) _.throwIfDisposed();\r\n\t\t\t\telse if(_.wasDisposed) {\r\n\t\t\t\t\t// We never actually started? Then no biggie.\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_.assertVersion(version);\r\n\r\n\t\t\t\tif(index>=source.length) // Just in case the size changes as we enumerate use '>='.\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(source[index++]);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, useCopy?:boolean):number\r\n\t{\r\n\t\tconst s = this._source;\r\n\t\treturn forEach(useCopy ? s.slice() : this, action);\r\n\t}\r\n\r\n}\r\n\r\nexport default List;"]}