{"version":3,"sources":["System/Integer.js","System/Integer.ts"],"names":["define","require","exports","ArgumentException_1","ArgumentOutOfRangeException_1","Integer","n","Math","floor","Object","defineProperty","value","as32Bit","result","isNaN","is","NUMBER","isFinite","is32Bit","assert","argumentName","i","ArgumentException","assertZeroOrGreater","ArgumentOutOfRangeException","assertPositive","MAX_32_BIT","MAX_VALUE"],"mappings":"AAAAA,QAAQ,UAAW,UAAW,iCAAkC,4CAA6C,SAAUC,EAASC,EAASC,EAAqBC,GAC1J,YCOJ,SAAAC,GAAwBC,GAEvB,MAAOC,MAAKC,MAAMF,GDRfG,OAAOC,eAAeR,EAAS,cAAgBS,OAAO,ICM1DT,EAAAG,QAAAA,EAKA,SAAcA,GAYb,QAAAO,GAAwBN,GAEvB,GAAMO,GAAa,EAAJP,CACf,IAAGQ,MAAMR,GACR,KAAM,sBACP,IAAIA,QAAWO,OACd,KAAM,0CACP,OAAOA,GASR,QAAAE,GAAmBT,GAElB,aAAcA,KAAIU,GAAUC,SAASX,IAAMA,IAAIC,KAAKC,MAAMF,GAQ3D,QAAAY,GAAwBZ,GAEvB,MAAOA,MAAS,EAAJA,GAUb,QAAAa,GAAuBb,EAAUc,GAEhC,GAAIC,GAAIN,EAAGT,EACX,KAAIe,EACH,KAAM,IAAIlB,GAAAmB,kBAAkBF,GAAgB,IAAK,qBAClD,OAAOC,GASR,QAAAE,GAAoCjB,EAAUc,GAE7C,GAAIC,GAAIF,EAAOb,EAAGc,IAAiBd,GAAG,CACtC,KAAIe,EACH,KAAM,IAAIjB,GAAAoB,4BAA4BJ,GAAgB,IAAKd,EAAG,yDAC/D,OAAOe,GASR,QAAAI,GAA+BnB,EAAUc,GAExC,GAAIC,GAAIF,EAAOb,EAAGc,IAAiBd,EAAE,CACrC,KAAIe,EACH,KAAM,IAAIjB,GAAAoB,4BAA4BJ,GAAgB,IAAKd,EAAG,6BAC/D,OAAOe,GAjFKhB,EAAAqB,WAAoB,WACpBrB,EAAAsB,UAAmB,gBAChC,IAAMX,GAA0B,QAQhBX,GAAAO,QAAOA,EAgBPP,EAAAU,GAAEA,EAUFV,EAAAa,QAAOA,EAYPb,EAAAc,OAAMA,EAcNd,EAAAkB,oBAAmBA,EAcnBlB,EAAAoB,eAAcA,GA9EjBpB,EAAAH,EAAAG,UAAAH,EAAAG,aAwFdH,EAAAA,WAAeG","file":"Integer.js","sourcesContent":["define([\"require\", \"exports\", \"./Exceptions/ArgumentException\", \"./Exceptions/ArgumentOutOfRangeException\"], function (require, exports, ArgumentException_1, ArgumentOutOfRangeException_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function Integer(n) {\n        return Math.floor(n);\n    }\n    exports.Integer = Integer;\n    (function (Integer) {\n        Integer.MAX_32_BIT = 2147483647;\n        Integer.MAX_VALUE = 9007199254740991;\n        var NUMBER = \"number\";\n        /**\n         * Converts any number to its 32bit counterpart.\n         * Throws if conversion is not possible.\n         * @param n\n         * @returns {number}\n         */\n        function as32Bit(n) {\n            var result = n | 0;\n            if (isNaN(n))\n                throw \"'n' is not a number.\";\n            if (n !== -1 && result === -1)\n                throw \"'n' is too large to be a 32 bit integer.\";\n            return result;\n        }\n        Integer.as32Bit = as32Bit;\n        /**\n         * Returns true if the value is an integer.\n         * @param n\n         * @returns {boolean}\n         */\n        function is(n) {\n            return typeof n === NUMBER && isFinite(n) && n === Math.floor(n);\n        }\n        Integer.is = is;\n        /**\n         * Returns true if the value is within a 32 bit range.\n         * @param n\n         * @returns {boolean}\n         */\n        function is32Bit(n) {\n            return n === (n | 0);\n        }\n        Integer.is32Bit = is32Bit;\n        /**\n         * Throws if not an integer.\n         * @param n\n         * @param argumentName\n         * @returns {boolean}\n         */\n        function assert(n, argumentName) {\n            var i = is(n);\n            if (!i)\n                throw new ArgumentException_1.ArgumentException(argumentName || 'n', \"Must be a integer.\");\n            return i;\n        }\n        Integer.assert = assert;\n        /**\n         * Throws if less than zero.\n         * @param n\n         * @param argumentName\n         * @returns {boolean}\n         */\n        function assertZeroOrGreater(n, argumentName) {\n            var i = assert(n, argumentName) && n >= 0;\n            if (!i)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\n            return i;\n        }\n        Integer.assertZeroOrGreater = assertZeroOrGreater;\n        /**\n         * Throws if not greater than zero.\n         * @param n\n         * @param argumentName\n         * @returns {boolean}\n         */\n        function assertPositive(n, argumentName) {\n            var i = assert(n, argumentName) && n > 0;\n            if (!i)\n                throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\n            return i;\n        }\n        Integer.assertPositive = assertPositive;\n    })(Integer = exports.Integer || (exports.Integer = {}));\n    exports.default = Integer;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\nimport {ArgumentException} from \"./Exceptions/ArgumentException\";\r\nimport {ArgumentOutOfRangeException} from \"./Exceptions/ArgumentOutOfRangeException\";\r\nimport {TypeValue} from \"./TypeValue\";\r\n\r\nexport function Integer(n:number):number\r\n{\r\n\treturn Math.floor(n);\r\n}\r\n\r\nexport module Integer\r\n{\r\n\texport const MAX_32_BIT:number = 2147483647;\r\n\texport const MAX_VALUE:number = 9007199254740991;\r\n\tconst NUMBER:TypeValue.Number = \"number\";\r\n\r\n\t/**\r\n\t * Converts any number to its 32bit counterpart.\r\n\t * Throws if conversion is not possible.\r\n\t * @param n\r\n\t * @returns {number}\r\n\t */\r\n\texport function as32Bit(n:number):number\r\n\t{\r\n\t\tconst result = n | 0;\r\n\t\tif(isNaN(n))\r\n\t\t\tthrow \"'n' is not a number.\";\r\n\t\tif (n!== -1 && result=== -1)\r\n\t\t\tthrow \"'n' is too large to be a 32 bit integer.\";\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns true if the value is an integer.\r\n\t * @param n\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function is(n:number):boolean\r\n\t{\r\n\t\treturn typeof n===NUMBER && isFinite(n) && n===Math.floor(n);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the value is within a 32 bit range.\r\n\t * @param n\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function is32Bit(n:number):boolean\r\n\t{\r\n\t\treturn n===(n | 0);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Throws if not an integer.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assert(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = is(n);\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentException(argumentName || 'n', \"Must be a integer.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws if less than zero.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assertZeroOrGreater(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = assert(n, argumentName) && n>=0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be a valid integer greater than or equal to zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n\t/**\r\n\t * Throws if not greater than zero.\r\n\t * @param n\r\n\t * @param argumentName\r\n\t * @returns {boolean}\r\n\t */\r\n\texport function assertPositive(n:number, argumentName?:string):true|never\r\n\t{\r\n\t\tlet i = assert(n, argumentName) && n>0;\r\n\t\tif(!i)\r\n\t\t\tthrow new ArgumentOutOfRangeException(argumentName || 'n', n, \"Must be greater than zero.\");\r\n\t\treturn i;\r\n\t}\r\n\r\n}\r\n\r\nexport default Integer;\r\n"]}